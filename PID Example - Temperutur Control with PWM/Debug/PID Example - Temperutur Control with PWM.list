
PID Example - Temperutur Control with PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005524  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005638  08005638  00015638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a64  08005a64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005a64  08005a64  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a64  08005a64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e0  08005c48  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005c48  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000883d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba5  00000000  00000000  00028a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002ad60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018183  00000000  00000000  0002b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009744  00000000  00000000  000435a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b54  00000000  00000000  0004cce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d083b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df0  00000000  00000000  000d0890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800561c 	.word	0x0800561c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800561c 	.word	0x0800561c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_GPIO_Init+0x40>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <MX_GPIO_Init+0x40>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_GPIO_Init+0x40>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_GPIO_Init+0x40>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <MX_GPIO_Init+0x40>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <MX_GPIO_Init+0x40>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000

08000b6c <GetTemp>:
char msg[100];

double Temp, PIDOut, TempSetpoint;

float GetTemp(void)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	 * Temperature simulink by ratio of PIDOut
	*/

	static float tmp = 0;

	tmp += (PIDOut / 100);
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <GetTemp+0x48>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fc57 	bl	8000428 <__aeabi_f2d>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	460d      	mov	r5, r1
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <GetTemp+0x4c>)
 8000b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <GetTemp+0x50>)
 8000b8a:	f7ff fdcf 	bl	800072c <__aeabi_ddiv>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	4620      	mov	r0, r4
 8000b94:	4629      	mov	r1, r5
 8000b96:	f7ff fae9 	bl	800016c <__adddf3>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff ff71 	bl	8000a88 <__aeabi_d2f>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a02      	ldr	r2, [pc, #8]	; (8000bb4 <GetTemp+0x48>)
 8000baa:	6013      	str	r3, [r2, #0]

	return tmp;
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <GetTemp+0x48>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb4:	200001fc 	.word	0x200001fc
 8000bb8:	20000280 	.word	0x20000280
 8000bbc:	40590000 	.word	0x40590000

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 fd9f 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f881 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f7ff ffab 	bl	8000b28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bd2:	f000 fcfd 	bl	80015d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Your temp setpoint
  TempSetpoint = 51;
 8000bd6:	4932      	ldr	r1, [pc, #200]	; (8000ca0 <main+0xe0>)
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <main+0xe4>)
 8000bde:	e9c1 2300 	strd	r2, r3, [r1]

  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8000be2:	2300      	movs	r3, #0
 8000be4:	9307      	str	r3, [sp, #28]
 8000be6:	2301      	movs	r3, #1
 8000be8:	9306      	str	r3, [sp, #24]
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <main+0xe8>)
 8000bf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <main+0xec>)
 8000bfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c06:	e9cd 2300 	strd	r2, r3, [sp]
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <main+0xe0>)
 8000c0c:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <main+0xf0>)
 8000c0e:	4929      	ldr	r1, [pc, #164]	; (8000cb4 <main+0xf4>)
 8000c10:	4829      	ldr	r0, [pc, #164]	; (8000cb8 <main+0xf8>)
 8000c12:	f000 f8e1 	bl	8000dd8 <PID>

  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000c16:	2101      	movs	r1, #1
 8000c18:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <main+0xf8>)
 8000c1a:	f000 fa0f 	bl	800103c <PID_SetMode>
  PID_SetSampleTime(&TPID, 500);
 8000c1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c22:	4825      	ldr	r0, [pc, #148]	; (8000cb8 <main+0xf8>)
 8000c24:	f000 fb78 	bl	8001318 <PID_SetSampleTime>
  PID_SetOutputLimits(&TPID, -100, 100);
 8000c28:	f04f 0200 	mov.w	r2, #0
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <main+0xfc>)
 8000c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <main+0x100>)
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <main+0xf8>)
 8000c3a:	f000 fa1d 	bl	8001078 <PID_SetOutputLimits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Temp = GetTemp();
 8000c3e:	f7ff ff95 	bl	8000b6c <GetTemp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbef 	bl	8000428 <__aeabi_f2d>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4919      	ldr	r1, [pc, #100]	; (8000cb4 <main+0xf4>)
 8000c50:	e9c1 2300 	strd	r2, r3, [r1]
	  PID_Compute(&TPID);
 8000c54:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <main+0xf8>)
 8000c56:	f000 f907 	bl	8000e68 <PID_Compute>

	  sprintf(msg, "Temperature: %3.2f /PID Value: %d\r\n", Temp, (int16_t)PIDOut);
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <main+0xf4>)
 8000c5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <main+0xf0>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff fee5 	bl	8000a38 <__aeabi_d2iz>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4622      	mov	r2, r4
 8000c76:	462b      	mov	r3, r5
 8000c78:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <main+0x104>)
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <main+0x108>)
 8000c7c:	f002 fa96 	bl	80031ac <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <main+0x108>)
 8000c82:	f7ff fa65 	bl	8000150 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <main+0x108>)
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <main+0x10c>)
 8000c90:	f001 fc8f 	bl	80025b2 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8000c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c98:	f000 fd98 	bl	80017cc <HAL_Delay>
	  Temp = GetTemp();
 8000c9c:	e7cf      	b.n	8000c3e <main+0x7e>
 8000c9e:	bf00      	nop
 8000ca0:	200002f8 	.word	0x200002f8
 8000ca4:	40498000 	.word	0x40498000
 8000ca8:	3ff00000 	.word	0x3ff00000
 8000cac:	40140000 	.word	0x40140000
 8000cb0:	20000280 	.word	0x20000280
 8000cb4:	20000288 	.word	0x20000288
 8000cb8:	20000210 	.word	0x20000210
 8000cbc:	40590000 	.word	0x40590000
 8000cc0:	c0590000 	.word	0xc0590000
 8000cc4:	08005638 	.word	0x08005638
 8000cc8:	20000290 	.word	0x20000290
 8000ccc:	20000300 	.word	0x20000300

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b090      	sub	sp, #64	; 0x40
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fdfc 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 ffe3 	bl	8001ce4 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d24:	f000 f819 	bl	8000d5a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fa4e 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d4e:	f000 f804 	bl	8000d5a <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3740      	adds	r7, #64	; 0x40
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5e:	b672      	cpsid	i
}
 8000d60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <Error_Handler+0x8>

08000d64 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000d94:	f7ff fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8000daa:	e011      	b.n	8000dd0 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000db8:	f7ff fe00 	bl	80009bc <__aeabi_dcmplt>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <PID_Init+0x60>
}
 8000dc2:	e005      	b.n	8000dd0 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af06      	add	r7, sp, #24
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8000dfe:	a318      	add	r3, pc, #96	; (adr r3, 8000e60 <PID+0x88>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	e9cd 2300 	strd	r2, r3, [sp]
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f000 f931 	bl	8001078 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2264      	movs	r2, #100	; 0x64
 8000e1a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8000e1c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e20:	4619      	mov	r1, r3
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f000 fa38 	bl	8001298 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8000e28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e2c:	9304      	str	r3, [sp, #16]
 8000e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8000e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f000 f984 	bl	8001150 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8000e48:	f000 fcb6 	bl	80017b8 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	605a      	str	r2, [r3, #4]
	
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	00000000 	.word	0x00000000
 8000e64:	406fe000 	.word	0x406fe000

08000e68 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <PID_Compute+0x14>
	{
		return _FALSE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e0db      	b.n	8001034 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8000e7c:	f000 fc9c 	bl	80017b8 <HAL_GetTick>
 8000e80:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	6a3a      	ldr	r2, [r7, #32]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	f0c0 80cd 	bcc.w	8001032 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000eb0:	f7ff f95a 	bl	8000168 <__aeabi_dsub>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000ec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ec6:	f7ff f94f 	bl	8000168 <__aeabi_dsub>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000ede:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ee2:	f7ff faf9 	bl	80004d8 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff f93d 	bl	800016c <__adddf3>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d114      	bne.n	8000f2e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f14:	f7ff fae0 	bl	80004d8 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f7ff f922 	bl	8000168 <__aeabi_dsub>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000f3a:	f7ff fd5d 	bl	80009f8 <__aeabi_dcmpgt>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000f50:	e010      	b.n	8000f74 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000f5e:	f7ff fd2d 	bl	80009bc <__aeabi_dcmplt>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000f82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f86:	f7ff faa7 	bl	80004d8 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f92:	e005      	b.n	8000fa0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fb0:	f7ff fa92 	bl	80004d8 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	f7ff f8d4 	bl	8000168 <__aeabi_dsub>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fc8:	f7ff f8d0 	bl	800016c <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fde:	f7ff fd0b 	bl	80009f8 <__aeabi_dcmpgt>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000fee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000ff2:	e00e      	b.n	8001012 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ffe:	f7ff fcdd 	bl	80009bc <__aeabi_dcmplt>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800100e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800101a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001024:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8001032:	2300      	movs	r3, #0
	}
	
}
 8001034:	4618      	mov	r0, r3
 8001036:	3730      	adds	r7, #48	; 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bdb0      	pop	{r4, r5, r7, pc}

0800103c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b01      	cmp	r3, #1
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <PID_SetMode+0x2e>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe7d 	bl	8000d64 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	705a      	strb	r2, [r3, #1]
	
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800108c:	f7ff fcaa 	bl	80009e4 <__aeabi_dcmpge>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d158      	bne.n	8001148 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800109c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d04b      	beq.n	800114a <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80010c0:	f7ff fc9a 	bl	80009f8 <__aeabi_dcmpgt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80010d4:	e9c1 2300 	strd	r2, r3, [r1]
 80010d8:	e012      	b.n	8001100 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80010e8:	f7ff fc68 	bl	80009bc <__aeabi_dcmplt>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80010fc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800110c:	f7ff fc74 	bl	80009f8 <__aeabi_dcmpgt>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001122:	e012      	b.n	800114a <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001130:	f7ff fc44 	bl	80009bc <__aeabi_dcmplt>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001146:	e000      	b.n	800114a <PID_SetOutputLimits+0xd2>
		return;
 8001148:	bf00      	nop
		}
		else { }
		
	}
	
}
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001168:	f7ff fc28 	bl	80009bc <__aeabi_dcmplt>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 808b 	bne.w	800128a <PID_SetTunings2+0x13a>
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001180:	f7ff fc1c 	bl	80009bc <__aeabi_dcmplt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d17f      	bne.n	800128a <PID_SetTunings2+0x13a>
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d174      	bne.n	800128a <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011a6:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80011a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80011d0:	68f9      	ldr	r1, [r7, #12]
 80011d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f900 	bl	80003e4 <__aeabi_ui2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <PID_SetTunings2+0x144>)
 80011ea:	f7ff fa9f 	bl	800072c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001200:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001204:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001208:	f7ff f966 	bl	80004d8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	68f9      	ldr	r1, [r7, #12]
 8001212:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001216:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800121a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800121e:	f7ff fa85 	bl	800072c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	68f9      	ldr	r1, [r7, #12]
 8001228:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d12b      	bne.n	800128c <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	f04f 0100 	mov.w	r1, #0
 8001242:	f7fe ff91 	bl	8000168 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	f04f 0100 	mov.w	r1, #0
 800125e:	f7fe ff83 	bl	8000168 <__aeabi_dsub>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001272:	f04f 0000 	mov.w	r0, #0
 8001276:	f04f 0100 	mov.w	r1, #0
 800127a:	f7fe ff75 	bl	8000168 <__aeabi_dsub>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001288:	e000      	b.n	800128c <PID_SetTunings2+0x13c>
		return;
 800128a:	bf00      	nop
		
	}
	
}
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	408f4000 	.word	0x408f4000

08001298 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d02e      	beq.n	800130a <PID_SetControllerDirection+0x72>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d029      	beq.n	800130a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012bc:	f04f 0000 	mov.w	r0, #0
 80012c0:	f04f 0100 	mov.w	r1, #0
 80012c4:	f7fe ff50 	bl	8000168 <__aeabi_dsub>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	f7fe ff42 	bl	8000168 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80012f4:	f04f 0000 	mov.w	r0, #0
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	f7fe ff34 	bl	8000168 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	70da      	strb	r2, [r3, #3]
	
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd2e      	ble.n	8001386 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f7ff f86b 	bl	8000404 <__aeabi_i2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f854 	bl	80003e4 <__aeabi_ui2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7ff f9f2 	bl	800072c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135a:	f7ff f8bd 	bl	80004d8 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800136e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001372:	f7ff f9db 	bl	800072c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_MspInit+0x5c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_MspInit+0x5c>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_MspInit+0x5c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_MspInit+0x5c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_MspInit+0x5c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_MspInit+0x60>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_MspInit+0x60>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 f9ab 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
	return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_kill>:

int _kill(int pid, int sig)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800145a:	f001 fa15 	bl	8002888 <__errno>
 800145e:	4603      	mov	r3, r0
 8001460:	2216      	movs	r2, #22
 8001462:	601a      	str	r2, [r3, #0]
	return -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_exit>:

void _exit (int status)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffe7 	bl	8001450 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001482:	e7fe      	b.n	8001482 <_exit+0x12>

08001484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
	}

return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e009      	b.n	80014e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf1      	blt.n	80014d0 <_write+0x12>
	}
	return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_close>:

int _close(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151c:	605a      	str	r2, [r3, #4]
	return 0;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
	return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f001 f97e 	bl	8002888 <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20005000 	.word	0x20005000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	20000200 	.word	0x20000200
 80015c0:	20000358 	.word	0x20000358

080015c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART1_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x4c>)
 8001608:	f000 ff86 	bl	8002518 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fba2 	bl	8000d5a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000300 	.word	0x20000300
 8001620:	40013800 	.word	0x40013800

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_UART_MspInit+0x8c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d131      	bne.n	80016a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_UART_MspInit+0x90>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <HAL_UART_MspInit+0x90>)
 800164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_UART_MspInit+0x90>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_UART_MspInit+0x90>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <HAL_UART_MspInit+0x90>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0x90>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4619      	mov	r1, r3
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <HAL_UART_MspInit+0x94>)
 800168a:	f000 f9a7 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_UART_MspInit+0x94>)
 80016a4:	f000 f99a 	bl	80019dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800

080016bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016e2:	f7ff ff6f 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f001 f8d5 	bl	8002894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ea:	f7ff fa69 	bl	8000bc0 <main>
  bx lr
 80016ee:	4770      	bx	lr
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016f8:	08005a6c 	.word	0x08005a6c
  ldr r2, =_sbss
 80016fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001700:	20000358 	.word	0x20000358

08001704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_2_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x28>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x28>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f92b 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe34 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40022000 	.word	0x40022000

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f935 	bl	80019c2 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f90b 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x1c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x20>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <HAL_IncTick+0x20>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000344 	.word	0x20000344

080017b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_GetTick+0x10>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000344 	.word	0x20000344

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff fff0 	bl	80017b8 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffe0 	bl	80017b8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff90 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff49 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff5e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff90 	bl	80018cc <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5f 	bl	8001878 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffb0 	bl	8001930 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b08b      	sub	sp, #44	; 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	e169      	b.n	8001cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f0:	2201      	movs	r2, #1
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8158 	bne.w	8001cbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a9a      	ldr	r2, [pc, #616]	; (8001c7c <HAL_GPIO_Init+0x2a0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d05e      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a18:	4a98      	ldr	r2, [pc, #608]	; (8001c7c <HAL_GPIO_Init+0x2a0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d875      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a1e:	4a98      	ldr	r2, [pc, #608]	; (8001c80 <HAL_GPIO_Init+0x2a4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d058      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a24:	4a96      	ldr	r2, [pc, #600]	; (8001c80 <HAL_GPIO_Init+0x2a4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d86f      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a2a:	4a96      	ldr	r2, [pc, #600]	; (8001c84 <HAL_GPIO_Init+0x2a8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d052      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a30:	4a94      	ldr	r2, [pc, #592]	; (8001c84 <HAL_GPIO_Init+0x2a8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d869      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a36:	4a94      	ldr	r2, [pc, #592]	; (8001c88 <HAL_GPIO_Init+0x2ac>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d04c      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a3c:	4a92      	ldr	r2, [pc, #584]	; (8001c88 <HAL_GPIO_Init+0x2ac>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d863      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a42:	4a92      	ldr	r2, [pc, #584]	; (8001c8c <HAL_GPIO_Init+0x2b0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d046      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
 8001a48:	4a90      	ldr	r2, [pc, #576]	; (8001c8c <HAL_GPIO_Init+0x2b0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d85d      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a4e:	2b12      	cmp	r3, #18
 8001a50:	d82a      	bhi.n	8001aa8 <HAL_GPIO_Init+0xcc>
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d859      	bhi.n	8001b0a <HAL_GPIO_Init+0x12e>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <HAL_GPIO_Init+0x80>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ab1 	.word	0x08001ab1
 8001a64:	08001ac3 	.word	0x08001ac3
 8001a68:	08001b05 	.word	0x08001b05
 8001a6c:	08001b0b 	.word	0x08001b0b
 8001a70:	08001b0b 	.word	0x08001b0b
 8001a74:	08001b0b 	.word	0x08001b0b
 8001a78:	08001b0b 	.word	0x08001b0b
 8001a7c:	08001b0b 	.word	0x08001b0b
 8001a80:	08001b0b 	.word	0x08001b0b
 8001a84:	08001b0b 	.word	0x08001b0b
 8001a88:	08001b0b 	.word	0x08001b0b
 8001a8c:	08001b0b 	.word	0x08001b0b
 8001a90:	08001b0b 	.word	0x08001b0b
 8001a94:	08001b0b 	.word	0x08001b0b
 8001a98:	08001b0b 	.word	0x08001b0b
 8001a9c:	08001b0b 	.word	0x08001b0b
 8001aa0:	08001ab9 	.word	0x08001ab9
 8001aa4:	08001acd 	.word	0x08001acd
 8001aa8:	4a79      	ldr	r2, [pc, #484]	; (8001c90 <HAL_GPIO_Init+0x2b4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aae:	e02c      	b.n	8001b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e029      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	3304      	adds	r3, #4
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e024      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e01f      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	330c      	adds	r3, #12
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e01a      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e013      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aec:	2308      	movs	r3, #8
 8001aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	611a      	str	r2, [r3, #16]
          break;
 8001af6:	e009      	b.n	8001b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af8:	2308      	movs	r3, #8
 8001afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	615a      	str	r2, [r3, #20]
          break;
 8001b02:	e003      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x130>
          break;
 8001b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d801      	bhi.n	8001b16 <HAL_GPIO_Init+0x13a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	e001      	b.n	8001b1a <HAL_GPIO_Init+0x13e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d802      	bhi.n	8001b28 <HAL_GPIO_Init+0x14c>
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x152>
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	3b08      	subs	r3, #8
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	210f      	movs	r1, #15
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	6a39      	ldr	r1, [r7, #32]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80b1 	beq.w	8001cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <HAL_GPIO_Init+0x2b8>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <HAL_GPIO_Init+0x2b8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_GPIO_Init+0x2b8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b74:	4a48      	ldr	r2, [pc, #288]	; (8001c98 <HAL_GPIO_Init+0x2bc>)
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a40      	ldr	r2, [pc, #256]	; (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d013      	beq.n	8001bc8 <HAL_GPIO_Init+0x1ec>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3f      	ldr	r2, [pc, #252]	; (8001ca0 <HAL_GPIO_Init+0x2c4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_GPIO_Init+0x1e8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <HAL_GPIO_Init+0x2c8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d007      	beq.n	8001bc0 <HAL_GPIO_Init+0x1e4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3d      	ldr	r2, [pc, #244]	; (8001ca8 <HAL_GPIO_Init+0x2cc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_GPIO_Init+0x1e0>
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e006      	b.n	8001bca <HAL_GPIO_Init+0x1ee>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e004      	b.n	8001bca <HAL_GPIO_Init+0x1ee>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x1ee>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_GPIO_Init+0x1ee>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bcc:	f002 0203 	and.w	r2, r2, #3
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bda:	492f      	ldr	r1, [pc, #188]	; (8001c98 <HAL_GPIO_Init+0x2bc>)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	492c      	ldr	r1, [pc, #176]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4928      	ldr	r1, [pc, #160]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4922      	ldr	r1, [pc, #136]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	491e      	ldr	r1, [pc, #120]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4918      	ldr	r1, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4914      	ldr	r1, [pc, #80]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d021      	beq.n	8001cb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
 8001c78:	e021      	b.n	8001cbe <HAL_GPIO_Init+0x2e2>
 8001c7a:	bf00      	nop
 8001c7c:	10320000 	.word	0x10320000
 8001c80:	10310000 	.word	0x10310000
 8001c84:	10220000 	.word	0x10220000
 8001c88:	10210000 	.word	0x10210000
 8001c8c:	10120000 	.word	0x10120000
 8001c90:	10110000 	.word	0x10110000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40011400 	.word	0x40011400
 8001cac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	4909      	ldr	r1, [pc, #36]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f47f ae8e 	bne.w	80019f0 <HAL_GPIO_Init+0x14>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	372c      	adds	r7, #44	; 0x2c
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e26c      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d00c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x12c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d168      	bne.n	8001e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e246      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x76>
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a7f      	ldr	r2, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e02e      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0xbc>
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6a      	ldr	r2, [pc, #424]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a67      	ldr	r2, [pc, #412]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fcfa 	bl	80017b8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fcf6 	bl	80017b8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1fa      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe4>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fce6 	bl	80017b8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fce2 	bl	80017b8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1e6      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x10c>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1ba      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fc9b 	bl	80017b8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fc97 	bl	80017b8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e19b      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4927      	ldr	r1, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fc7a 	bl	80017b8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fc76 	bl	80017b8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e17a      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03a      	beq.n	8001f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fc5a 	bl	80017b8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fc56 	bl	80017b8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e15a      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f000 fad8 	bl	80024dc <RCC_Delay>
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fc40 	bl	80017b8 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc3c 	bl	80017b8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d908      	bls.n	8001f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e140      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	42420000 	.word	0x42420000
 8001f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e9      	bne.n	8001f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a6 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b97      	ldr	r3, [pc, #604]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8a      	ldr	r2, [pc, #552]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fbfd 	bl	80017b8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff fbf9 	bl	80017b8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0fd      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x312>
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e02d      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x334>
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	e01c      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x356>
 8002020:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a6c      	ldr	r2, [pc, #432]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff fbad 	bl	80017b8 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fba9 	bl	80017b8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ab      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCC_OscConfig+0x37e>
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff fb97 	bl	80017b8 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff fb93 	bl	80017b8 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e095      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8081 	beq.w	80021ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d061      	beq.n	800219c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d146      	bne.n	800216e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb67 	bl	80017b8 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fb63 	bl	80017b8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e067      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002116:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a19      	ldr	r1, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	430b      	orrs	r3, r1
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fb37 	bl	80017b8 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff fb33 	bl	80017b8 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e037      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x46a>
 800216c:	e02f      	b.n	80021ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fb20 	bl	80017b8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff fb1c 	bl	80017b8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e020      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x498>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e013      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	42420060 	.word	0x42420060

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff fa70 	bl	80017b8 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff fa6c 	bl	80017b8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f9ce 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800566c 	.word	0x0800566c
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b490      	push	{r4, r7}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c0:	1d3c      	adds	r4, r7, #4
 80023c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023c8:	f240 2301 	movw	r3, #513	; 0x201
 80023cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x46>
 80023f6:	e02d      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fa:	623b      	str	r3, [r7, #32]
      break;
 80023fc:	e02d      	b.n	800245a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800240a:	4413      	add	r3, r2
 800240c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002410:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_RCC_GetSysClockFreq+0xb4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0c5b      	lsrs	r3, r3, #17
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800242a:	4413      	add	r3, r2
 800242c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002430:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002436:	fb02 f203 	mul.w	r2, r2, r3
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	e004      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	623b      	str	r3, [r7, #32]
      break;
 8002452:	e002      	b.n	800245a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002456:	623b      	str	r3, [r7, #32]
      break;
 8002458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245a:	6a3b      	ldr	r3, [r7, #32]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bc90      	pop	{r4, r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	0800565c 	.word	0x0800565c
 800246c:	40021000 	.word	0x40021000
 8002470:	007a1200 	.word	0x007a1200
 8002474:	003d0900 	.word	0x003d0900

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <HAL_RCC_GetHCLKFreq+0x10>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002490:	f7ff fff2 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	0800567c 	.word	0x0800567c

080024b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024b8:	f7ff ffde 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0adb      	lsrs	r3, r3, #11
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	0800567c 	.word	0x0800567c

080024dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <RCC_Delay+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <RCC_Delay+0x38>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0a5b      	lsrs	r3, r3, #9
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f8:	bf00      	nop
  }
  while (Delay --);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	60fa      	str	r2, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <RCC_Delay+0x1c>
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000000 	.word	0x20000000
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e03f      	b.n	80025aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff f870 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f905 	bl	800276c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b08a      	sub	sp, #40	; 0x28
 80025b6:	af02      	add	r7, sp, #8
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d17c      	bne.n	80026cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_UART_Transmit+0x2c>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e075      	b.n	80026ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Transmit+0x3e>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e06e      	b.n	80026ce <HAL_UART_Transmit+0x11c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2221      	movs	r2, #33	; 0x21
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002606:	f7ff f8d7 	bl	80017b8 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002620:	d108      	bne.n	8002634 <HAL_UART_Transmit+0x82>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e003      	b.n	800263c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002644:	e02a      	b.n	800269c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f840 	bl	80026d6 <UART_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e036      	b.n	80026ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3302      	adds	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e007      	b.n	800268e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3301      	adds	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1cf      	bne.n	8002646 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2140      	movs	r1, #64	; 0x40
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f810 	bl	80026d6 <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e6:	e02c      	b.n	8002742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d028      	beq.n	8002742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f6:	f7ff f85f 	bl	80017b8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	429a      	cmp	r2, r3
 8002704:	d21d      	bcs.n	8002742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e00f      	b.n	8002762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d0c3      	beq.n	80026e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027a6:	f023 030c 	bic.w	r3, r3, #12
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <UART_SetConfig+0x114>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027d4:	f7ff fe6e 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	e002      	b.n	80027e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027dc:	f7ff fe56 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80027e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009a      	lsls	r2, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <UART_SetConfig+0x118>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	0119      	lsls	r1, r3, #4
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	441a      	add	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fbb2 f2f3 	udiv	r2, r2, r3
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <UART_SetConfig+0x118>)
 800281a:	fba3 0302 	umull	r0, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	fb00 f303 	mul.w	r3, r0, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	3332      	adds	r3, #50	; 0x32
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <UART_SetConfig+0x118>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002838:	4419      	add	r1, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <UART_SetConfig+0x118>)
 8002852:	fba3 0302 	umull	r0, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2064      	movs	r0, #100	; 0x64
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	3332      	adds	r3, #50	; 0x32
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <UART_SetConfig+0x118>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	440a      	add	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40013800 	.word	0x40013800
 8002884:	51eb851f 	.word	0x51eb851f

08002888 <__errno>:
 8002888:	4b01      	ldr	r3, [pc, #4]	; (8002890 <__errno+0x8>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000000c 	.word	0x2000000c

08002894 <__libc_init_array>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	2600      	movs	r6, #0
 8002898:	4d0c      	ldr	r5, [pc, #48]	; (80028cc <__libc_init_array+0x38>)
 800289a:	4c0d      	ldr	r4, [pc, #52]	; (80028d0 <__libc_init_array+0x3c>)
 800289c:	1b64      	subs	r4, r4, r5
 800289e:	10a4      	asrs	r4, r4, #2
 80028a0:	42a6      	cmp	r6, r4
 80028a2:	d109      	bne.n	80028b8 <__libc_init_array+0x24>
 80028a4:	f002 feba 	bl	800561c <_init>
 80028a8:	2600      	movs	r6, #0
 80028aa:	4d0a      	ldr	r5, [pc, #40]	; (80028d4 <__libc_init_array+0x40>)
 80028ac:	4c0a      	ldr	r4, [pc, #40]	; (80028d8 <__libc_init_array+0x44>)
 80028ae:	1b64      	subs	r4, r4, r5
 80028b0:	10a4      	asrs	r4, r4, #2
 80028b2:	42a6      	cmp	r6, r4
 80028b4:	d105      	bne.n	80028c2 <__libc_init_array+0x2e>
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
 80028b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028bc:	4798      	blx	r3
 80028be:	3601      	adds	r6, #1
 80028c0:	e7ee      	b.n	80028a0 <__libc_init_array+0xc>
 80028c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c6:	4798      	blx	r3
 80028c8:	3601      	adds	r6, #1
 80028ca:	e7f2      	b.n	80028b2 <__libc_init_array+0x1e>
 80028cc:	08005a64 	.word	0x08005a64
 80028d0:	08005a64 	.word	0x08005a64
 80028d4:	08005a64 	.word	0x08005a64
 80028d8:	08005a68 	.word	0x08005a68

080028dc <memset>:
 80028dc:	4603      	mov	r3, r0
 80028de:	4402      	add	r2, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <__cvt>:
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f2:	461f      	mov	r7, r3
 80028f4:	bfbb      	ittet	lt
 80028f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80028fa:	461f      	movlt	r7, r3
 80028fc:	2300      	movge	r3, #0
 80028fe:	232d      	movlt	r3, #45	; 0x2d
 8002900:	b088      	sub	sp, #32
 8002902:	4614      	mov	r4, r2
 8002904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002906:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002908:	7013      	strb	r3, [r2, #0]
 800290a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800290c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002910:	f023 0820 	bic.w	r8, r3, #32
 8002914:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002918:	d005      	beq.n	8002926 <__cvt+0x3a>
 800291a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800291e:	d100      	bne.n	8002922 <__cvt+0x36>
 8002920:	3501      	adds	r5, #1
 8002922:	2302      	movs	r3, #2
 8002924:	e000      	b.n	8002928 <__cvt+0x3c>
 8002926:	2303      	movs	r3, #3
 8002928:	aa07      	add	r2, sp, #28
 800292a:	9204      	str	r2, [sp, #16]
 800292c:	aa06      	add	r2, sp, #24
 800292e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002932:	e9cd 3500 	strd	r3, r5, [sp]
 8002936:	4622      	mov	r2, r4
 8002938:	463b      	mov	r3, r7
 800293a:	f000 fce5 	bl	8003308 <_dtoa_r>
 800293e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002942:	4606      	mov	r6, r0
 8002944:	d102      	bne.n	800294c <__cvt+0x60>
 8002946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002948:	07db      	lsls	r3, r3, #31
 800294a:	d522      	bpl.n	8002992 <__cvt+0xa6>
 800294c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002950:	eb06 0905 	add.w	r9, r6, r5
 8002954:	d110      	bne.n	8002978 <__cvt+0x8c>
 8002956:	7833      	ldrb	r3, [r6, #0]
 8002958:	2b30      	cmp	r3, #48	; 0x30
 800295a:	d10a      	bne.n	8002972 <__cvt+0x86>
 800295c:	2200      	movs	r2, #0
 800295e:	2300      	movs	r3, #0
 8002960:	4620      	mov	r0, r4
 8002962:	4639      	mov	r1, r7
 8002964:	f7fe f820 	bl	80009a8 <__aeabi_dcmpeq>
 8002968:	b918      	cbnz	r0, 8002972 <__cvt+0x86>
 800296a:	f1c5 0501 	rsb	r5, r5, #1
 800296e:	f8ca 5000 	str.w	r5, [sl]
 8002972:	f8da 3000 	ldr.w	r3, [sl]
 8002976:	4499      	add	r9, r3
 8002978:	2200      	movs	r2, #0
 800297a:	2300      	movs	r3, #0
 800297c:	4620      	mov	r0, r4
 800297e:	4639      	mov	r1, r7
 8002980:	f7fe f812 	bl	80009a8 <__aeabi_dcmpeq>
 8002984:	b108      	cbz	r0, 800298a <__cvt+0x9e>
 8002986:	f8cd 901c 	str.w	r9, [sp, #28]
 800298a:	2230      	movs	r2, #48	; 0x30
 800298c:	9b07      	ldr	r3, [sp, #28]
 800298e:	454b      	cmp	r3, r9
 8002990:	d307      	bcc.n	80029a2 <__cvt+0xb6>
 8002992:	4630      	mov	r0, r6
 8002994:	9b07      	ldr	r3, [sp, #28]
 8002996:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002998:	1b9b      	subs	r3, r3, r6
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	b008      	add	sp, #32
 800299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	9107      	str	r1, [sp, #28]
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e7f0      	b.n	800298c <__cvt+0xa0>

080029aa <__exponent>:
 80029aa:	4603      	mov	r3, r0
 80029ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ae:	2900      	cmp	r1, #0
 80029b0:	f803 2b02 	strb.w	r2, [r3], #2
 80029b4:	bfb6      	itet	lt
 80029b6:	222d      	movlt	r2, #45	; 0x2d
 80029b8:	222b      	movge	r2, #43	; 0x2b
 80029ba:	4249      	neglt	r1, r1
 80029bc:	2909      	cmp	r1, #9
 80029be:	7042      	strb	r2, [r0, #1]
 80029c0:	dd2b      	ble.n	8002a1a <__exponent+0x70>
 80029c2:	f10d 0407 	add.w	r4, sp, #7
 80029c6:	46a4      	mov	ip, r4
 80029c8:	270a      	movs	r7, #10
 80029ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80029ce:	460a      	mov	r2, r1
 80029d0:	46a6      	mov	lr, r4
 80029d2:	fb07 1516 	mls	r5, r7, r6, r1
 80029d6:	2a63      	cmp	r2, #99	; 0x63
 80029d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80029dc:	4631      	mov	r1, r6
 80029de:	f104 34ff 	add.w	r4, r4, #4294967295
 80029e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80029e6:	dcf0      	bgt.n	80029ca <__exponent+0x20>
 80029e8:	3130      	adds	r1, #48	; 0x30
 80029ea:	f1ae 0502 	sub.w	r5, lr, #2
 80029ee:	f804 1c01 	strb.w	r1, [r4, #-1]
 80029f2:	4629      	mov	r1, r5
 80029f4:	1c44      	adds	r4, r0, #1
 80029f6:	4561      	cmp	r1, ip
 80029f8:	d30a      	bcc.n	8002a10 <__exponent+0x66>
 80029fa:	f10d 0209 	add.w	r2, sp, #9
 80029fe:	eba2 020e 	sub.w	r2, r2, lr
 8002a02:	4565      	cmp	r5, ip
 8002a04:	bf88      	it	hi
 8002a06:	2200      	movhi	r2, #0
 8002a08:	4413      	add	r3, r2
 8002a0a:	1a18      	subs	r0, r3, r0
 8002a0c:	b003      	add	sp, #12
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002a18:	e7ed      	b.n	80029f6 <__exponent+0x4c>
 8002a1a:	2330      	movs	r3, #48	; 0x30
 8002a1c:	3130      	adds	r1, #48	; 0x30
 8002a1e:	7083      	strb	r3, [r0, #2]
 8002a20:	70c1      	strb	r1, [r0, #3]
 8002a22:	1d03      	adds	r3, r0, #4
 8002a24:	e7f1      	b.n	8002a0a <__exponent+0x60>
	...

08002a28 <_printf_float>:
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	b091      	sub	sp, #68	; 0x44
 8002a2e:	460c      	mov	r4, r1
 8002a30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002a34:	4616      	mov	r6, r2
 8002a36:	461f      	mov	r7, r3
 8002a38:	4605      	mov	r5, r0
 8002a3a:	f001 fa53 	bl	8003ee4 <_localeconv_r>
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	9309      	str	r3, [sp, #36]	; 0x24
 8002a44:	f7fd fb84 	bl	8000150 <strlen>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8002a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a50:	900a      	str	r0, [sp, #40]	; 0x28
 8002a52:	3307      	adds	r3, #7
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	f103 0208 	add.w	r2, r3, #8
 8002a5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002a60:	f8d4 b000 	ldr.w	fp, [r4]
 8002a64:	f8c8 2000 	str.w	r2, [r8]
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002a74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7e:	4640      	mov	r0, r8
 8002a80:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <_printf_float+0x2cc>)
 8002a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a84:	f7fd ffc2 	bl	8000a0c <__aeabi_dcmpun>
 8002a88:	bb70      	cbnz	r0, 8002ae8 <_printf_float+0xc0>
 8002a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8e:	4640      	mov	r0, r8
 8002a90:	4b98      	ldr	r3, [pc, #608]	; (8002cf4 <_printf_float+0x2cc>)
 8002a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a94:	f7fd ff9c 	bl	80009d0 <__aeabi_dcmple>
 8002a98:	bb30      	cbnz	r0, 8002ae8 <_printf_float+0xc0>
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	f7fd ff8b 	bl	80009bc <__aeabi_dcmplt>
 8002aa6:	b110      	cbz	r0, 8002aae <_printf_float+0x86>
 8002aa8:	232d      	movs	r3, #45	; 0x2d
 8002aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aae:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <_printf_float+0x2d0>)
 8002ab0:	4892      	ldr	r0, [pc, #584]	; (8002cfc <_printf_float+0x2d4>)
 8002ab2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002ab6:	bf94      	ite	ls
 8002ab8:	4698      	movls	r8, r3
 8002aba:	4680      	movhi	r8, r0
 8002abc:	2303      	movs	r3, #3
 8002abe:	f04f 0a00 	mov.w	sl, #0
 8002ac2:	6123      	str	r3, [r4, #16]
 8002ac4:	f02b 0304 	bic.w	r3, fp, #4
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	4633      	mov	r3, r6
 8002acc:	4621      	mov	r1, r4
 8002ace:	4628      	mov	r0, r5
 8002ad0:	9700      	str	r7, [sp, #0]
 8002ad2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ad4:	f000 f9d4 	bl	8002e80 <_printf_common>
 8002ad8:	3001      	adds	r0, #1
 8002ada:	f040 8090 	bne.w	8002bfe <_printf_float+0x1d6>
 8002ade:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae2:	b011      	add	sp, #68	; 0x44
 8002ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae8:	4642      	mov	r2, r8
 8002aea:	4653      	mov	r3, sl
 8002aec:	4640      	mov	r0, r8
 8002aee:	4651      	mov	r1, sl
 8002af0:	f7fd ff8c 	bl	8000a0c <__aeabi_dcmpun>
 8002af4:	b148      	cbz	r0, 8002b0a <_printf_float+0xe2>
 8002af6:	f1ba 0f00 	cmp.w	sl, #0
 8002afa:	bfb8      	it	lt
 8002afc:	232d      	movlt	r3, #45	; 0x2d
 8002afe:	4880      	ldr	r0, [pc, #512]	; (8002d00 <_printf_float+0x2d8>)
 8002b00:	bfb8      	it	lt
 8002b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <_printf_float+0x2dc>)
 8002b08:	e7d3      	b.n	8002ab2 <_printf_float+0x8a>
 8002b0a:	6863      	ldr	r3, [r4, #4]
 8002b0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	d142      	bne.n	8002b9a <_printf_float+0x172>
 8002b14:	2306      	movs	r3, #6
 8002b16:	6063      	str	r3, [r4, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	9206      	str	r2, [sp, #24]
 8002b1c:	aa0e      	add	r2, sp, #56	; 0x38
 8002b1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002b22:	aa0d      	add	r2, sp, #52	; 0x34
 8002b24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002b28:	9203      	str	r2, [sp, #12]
 8002b2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002b2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002b32:	6023      	str	r3, [r4, #0]
 8002b34:	6863      	ldr	r3, [r4, #4]
 8002b36:	4642      	mov	r2, r8
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	4653      	mov	r3, sl
 8002b3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002b40:	f7ff fed4 	bl	80028ec <__cvt>
 8002b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b46:	4680      	mov	r8, r0
 8002b48:	2947      	cmp	r1, #71	; 0x47
 8002b4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002b4c:	d108      	bne.n	8002b60 <_printf_float+0x138>
 8002b4e:	1cc8      	adds	r0, r1, #3
 8002b50:	db02      	blt.n	8002b58 <_printf_float+0x130>
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	4299      	cmp	r1, r3
 8002b56:	dd40      	ble.n	8002bda <_printf_float+0x1b2>
 8002b58:	f1a9 0902 	sub.w	r9, r9, #2
 8002b5c:	fa5f f989 	uxtb.w	r9, r9
 8002b60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002b64:	d81f      	bhi.n	8002ba6 <_printf_float+0x17e>
 8002b66:	464a      	mov	r2, r9
 8002b68:	3901      	subs	r1, #1
 8002b6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b6e:	910d      	str	r1, [sp, #52]	; 0x34
 8002b70:	f7ff ff1b 	bl	80029aa <__exponent>
 8002b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b76:	4682      	mov	sl, r0
 8002b78:	1813      	adds	r3, r2, r0
 8002b7a:	2a01      	cmp	r2, #1
 8002b7c:	6123      	str	r3, [r4, #16]
 8002b7e:	dc02      	bgt.n	8002b86 <_printf_float+0x15e>
 8002b80:	6822      	ldr	r2, [r4, #0]
 8002b82:	07d2      	lsls	r2, r2, #31
 8002b84:	d501      	bpl.n	8002b8a <_printf_float+0x162>
 8002b86:	3301      	adds	r3, #1
 8002b88:	6123      	str	r3, [r4, #16]
 8002b8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d09b      	beq.n	8002aca <_printf_float+0xa2>
 8002b92:	232d      	movs	r3, #45	; 0x2d
 8002b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b98:	e797      	b.n	8002aca <_printf_float+0xa2>
 8002b9a:	2947      	cmp	r1, #71	; 0x47
 8002b9c:	d1bc      	bne.n	8002b18 <_printf_float+0xf0>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ba      	bne.n	8002b18 <_printf_float+0xf0>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e7b7      	b.n	8002b16 <_printf_float+0xee>
 8002ba6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002baa:	d118      	bne.n	8002bde <_printf_float+0x1b6>
 8002bac:	2900      	cmp	r1, #0
 8002bae:	6863      	ldr	r3, [r4, #4]
 8002bb0:	dd0b      	ble.n	8002bca <_printf_float+0x1a2>
 8002bb2:	6121      	str	r1, [r4, #16]
 8002bb4:	b913      	cbnz	r3, 8002bbc <_printf_float+0x194>
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	07d0      	lsls	r0, r2, #31
 8002bba:	d502      	bpl.n	8002bc2 <_printf_float+0x19a>
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	440b      	add	r3, r1
 8002bc0:	6123      	str	r3, [r4, #16]
 8002bc2:	f04f 0a00 	mov.w	sl, #0
 8002bc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002bc8:	e7df      	b.n	8002b8a <_printf_float+0x162>
 8002bca:	b913      	cbnz	r3, 8002bd2 <_printf_float+0x1aa>
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	07d2      	lsls	r2, r2, #31
 8002bd0:	d501      	bpl.n	8002bd6 <_printf_float+0x1ae>
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	e7f4      	b.n	8002bc0 <_printf_float+0x198>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e7f2      	b.n	8002bc0 <_printf_float+0x198>
 8002bda:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002be0:	4299      	cmp	r1, r3
 8002be2:	db05      	blt.n	8002bf0 <_printf_float+0x1c8>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	6121      	str	r1, [r4, #16]
 8002be8:	07d8      	lsls	r0, r3, #31
 8002bea:	d5ea      	bpl.n	8002bc2 <_printf_float+0x19a>
 8002bec:	1c4b      	adds	r3, r1, #1
 8002bee:	e7e7      	b.n	8002bc0 <_printf_float+0x198>
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	bfcc      	ite	gt
 8002bf4:	2201      	movgt	r2, #1
 8002bf6:	f1c1 0202 	rsble	r2, r1, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	e7e0      	b.n	8002bc0 <_printf_float+0x198>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	055a      	lsls	r2, r3, #21
 8002c02:	d407      	bmi.n	8002c14 <_printf_float+0x1ec>
 8002c04:	6923      	ldr	r3, [r4, #16]
 8002c06:	4642      	mov	r2, r8
 8002c08:	4631      	mov	r1, r6
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	47b8      	blx	r7
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d12b      	bne.n	8002c6a <_printf_float+0x242>
 8002c12:	e764      	b.n	8002ade <_printf_float+0xb6>
 8002c14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002c18:	f240 80dd 	bls.w	8002dd6 <_printf_float+0x3ae>
 8002c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c20:	2200      	movs	r2, #0
 8002c22:	2300      	movs	r3, #0
 8002c24:	f7fd fec0 	bl	80009a8 <__aeabi_dcmpeq>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d033      	beq.n	8002c94 <_printf_float+0x26c>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	4631      	mov	r1, r6
 8002c30:	4628      	mov	r0, r5
 8002c32:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <_printf_float+0x2e0>)
 8002c34:	47b8      	blx	r7
 8002c36:	3001      	adds	r0, #1
 8002c38:	f43f af51 	beq.w	8002ade <_printf_float+0xb6>
 8002c3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c40:	429a      	cmp	r2, r3
 8002c42:	db02      	blt.n	8002c4a <_printf_float+0x222>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	07d8      	lsls	r0, r3, #31
 8002c48:	d50f      	bpl.n	8002c6a <_printf_float+0x242>
 8002c4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c4e:	4631      	mov	r1, r6
 8002c50:	4628      	mov	r0, r5
 8002c52:	47b8      	blx	r7
 8002c54:	3001      	adds	r0, #1
 8002c56:	f43f af42 	beq.w	8002ade <_printf_float+0xb6>
 8002c5a:	f04f 0800 	mov.w	r8, #0
 8002c5e:	f104 091a 	add.w	r9, r4, #26
 8002c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c64:	3b01      	subs	r3, #1
 8002c66:	4543      	cmp	r3, r8
 8002c68:	dc09      	bgt.n	8002c7e <_printf_float+0x256>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	079b      	lsls	r3, r3, #30
 8002c6e:	f100 8102 	bmi.w	8002e76 <_printf_float+0x44e>
 8002c72:	68e0      	ldr	r0, [r4, #12]
 8002c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c76:	4298      	cmp	r0, r3
 8002c78:	bfb8      	it	lt
 8002c7a:	4618      	movlt	r0, r3
 8002c7c:	e731      	b.n	8002ae2 <_printf_float+0xba>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	464a      	mov	r2, r9
 8002c82:	4631      	mov	r1, r6
 8002c84:	4628      	mov	r0, r5
 8002c86:	47b8      	blx	r7
 8002c88:	3001      	adds	r0, #1
 8002c8a:	f43f af28 	beq.w	8002ade <_printf_float+0xb6>
 8002c8e:	f108 0801 	add.w	r8, r8, #1
 8002c92:	e7e6      	b.n	8002c62 <_printf_float+0x23a>
 8002c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	dc38      	bgt.n	8002d0c <_printf_float+0x2e4>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4631      	mov	r1, r6
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <_printf_float+0x2e0>)
 8002ca2:	47b8      	blx	r7
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	f43f af1a 	beq.w	8002ade <_printf_float+0xb6>
 8002caa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	d102      	bne.n	8002cb8 <_printf_float+0x290>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	07d9      	lsls	r1, r3, #31
 8002cb6:	d5d8      	bpl.n	8002c6a <_printf_float+0x242>
 8002cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cbc:	4631      	mov	r1, r6
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	47b8      	blx	r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	f43f af0b 	beq.w	8002ade <_printf_float+0xb6>
 8002cc8:	f04f 0900 	mov.w	r9, #0
 8002ccc:	f104 0a1a 	add.w	sl, r4, #26
 8002cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cd2:	425b      	negs	r3, r3
 8002cd4:	454b      	cmp	r3, r9
 8002cd6:	dc01      	bgt.n	8002cdc <_printf_float+0x2b4>
 8002cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cda:	e794      	b.n	8002c06 <_printf_float+0x1de>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4652      	mov	r2, sl
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	47b8      	blx	r7
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	f43f aef9 	beq.w	8002ade <_printf_float+0xb6>
 8002cec:	f109 0901 	add.w	r9, r9, #1
 8002cf0:	e7ee      	b.n	8002cd0 <_printf_float+0x2a8>
 8002cf2:	bf00      	nop
 8002cf4:	7fefffff 	.word	0x7fefffff
 8002cf8:	08005688 	.word	0x08005688
 8002cfc:	0800568c 	.word	0x0800568c
 8002d00:	08005694 	.word	0x08005694
 8002d04:	08005690 	.word	0x08005690
 8002d08:	08005698 	.word	0x08005698
 8002d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d10:	429a      	cmp	r2, r3
 8002d12:	bfa8      	it	ge
 8002d14:	461a      	movge	r2, r3
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	4691      	mov	r9, r2
 8002d1a:	dc37      	bgt.n	8002d8c <_printf_float+0x364>
 8002d1c:	f04f 0b00 	mov.w	fp, #0
 8002d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d24:	f104 021a 	add.w	r2, r4, #26
 8002d28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002d2c:	ebaa 0309 	sub.w	r3, sl, r9
 8002d30:	455b      	cmp	r3, fp
 8002d32:	dc33      	bgt.n	8002d9c <_printf_float+0x374>
 8002d34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	db3b      	blt.n	8002db4 <_printf_float+0x38c>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	07da      	lsls	r2, r3, #31
 8002d40:	d438      	bmi.n	8002db4 <_printf_float+0x38c>
 8002d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d46:	eba2 030a 	sub.w	r3, r2, sl
 8002d4a:	eba2 0901 	sub.w	r9, r2, r1
 8002d4e:	4599      	cmp	r9, r3
 8002d50:	bfa8      	it	ge
 8002d52:	4699      	movge	r9, r3
 8002d54:	f1b9 0f00 	cmp.w	r9, #0
 8002d58:	dc34      	bgt.n	8002dc4 <_printf_float+0x39c>
 8002d5a:	f04f 0800 	mov.w	r8, #0
 8002d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d62:	f104 0a1a 	add.w	sl, r4, #26
 8002d66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	eba3 0309 	sub.w	r3, r3, r9
 8002d70:	4543      	cmp	r3, r8
 8002d72:	f77f af7a 	ble.w	8002c6a <_printf_float+0x242>
 8002d76:	2301      	movs	r3, #1
 8002d78:	4652      	mov	r2, sl
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	47b8      	blx	r7
 8002d80:	3001      	adds	r0, #1
 8002d82:	f43f aeac 	beq.w	8002ade <_printf_float+0xb6>
 8002d86:	f108 0801 	add.w	r8, r8, #1
 8002d8a:	e7ec      	b.n	8002d66 <_printf_float+0x33e>
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4642      	mov	r2, r8
 8002d92:	4628      	mov	r0, r5
 8002d94:	47b8      	blx	r7
 8002d96:	3001      	adds	r0, #1
 8002d98:	d1c0      	bne.n	8002d1c <_printf_float+0x2f4>
 8002d9a:	e6a0      	b.n	8002ade <_printf_float+0xb6>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4631      	mov	r1, r6
 8002da0:	4628      	mov	r0, r5
 8002da2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002da4:	47b8      	blx	r7
 8002da6:	3001      	adds	r0, #1
 8002da8:	f43f ae99 	beq.w	8002ade <_printf_float+0xb6>
 8002dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002dae:	f10b 0b01 	add.w	fp, fp, #1
 8002db2:	e7b9      	b.n	8002d28 <_printf_float+0x300>
 8002db4:	4631      	mov	r1, r6
 8002db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dba:	4628      	mov	r0, r5
 8002dbc:	47b8      	blx	r7
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d1bf      	bne.n	8002d42 <_printf_float+0x31a>
 8002dc2:	e68c      	b.n	8002ade <_printf_float+0xb6>
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4628      	mov	r0, r5
 8002dca:	eb08 020a 	add.w	r2, r8, sl
 8002dce:	47b8      	blx	r7
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d1c2      	bne.n	8002d5a <_printf_float+0x332>
 8002dd4:	e683      	b.n	8002ade <_printf_float+0xb6>
 8002dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dd8:	2a01      	cmp	r2, #1
 8002dda:	dc01      	bgt.n	8002de0 <_printf_float+0x3b8>
 8002ddc:	07db      	lsls	r3, r3, #31
 8002dde:	d537      	bpl.n	8002e50 <_printf_float+0x428>
 8002de0:	2301      	movs	r3, #1
 8002de2:	4642      	mov	r2, r8
 8002de4:	4631      	mov	r1, r6
 8002de6:	4628      	mov	r0, r5
 8002de8:	47b8      	blx	r7
 8002dea:	3001      	adds	r0, #1
 8002dec:	f43f ae77 	beq.w	8002ade <_printf_float+0xb6>
 8002df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002df4:	4631      	mov	r1, r6
 8002df6:	4628      	mov	r0, r5
 8002df8:	47b8      	blx	r7
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	f43f ae6f 	beq.w	8002ade <_printf_float+0xb6>
 8002e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e04:	2200      	movs	r2, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	f7fd fdce 	bl	80009a8 <__aeabi_dcmpeq>
 8002e0c:	b9d8      	cbnz	r0, 8002e46 <_printf_float+0x41e>
 8002e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e10:	f108 0201 	add.w	r2, r8, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	4631      	mov	r1, r6
 8002e18:	4628      	mov	r0, r5
 8002e1a:	47b8      	blx	r7
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d10e      	bne.n	8002e3e <_printf_float+0x416>
 8002e20:	e65d      	b.n	8002ade <_printf_float+0xb6>
 8002e22:	2301      	movs	r3, #1
 8002e24:	464a      	mov	r2, r9
 8002e26:	4631      	mov	r1, r6
 8002e28:	4628      	mov	r0, r5
 8002e2a:	47b8      	blx	r7
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	f43f ae56 	beq.w	8002ade <_printf_float+0xb6>
 8002e32:	f108 0801 	add.w	r8, r8, #1
 8002e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	4543      	cmp	r3, r8
 8002e3c:	dcf1      	bgt.n	8002e22 <_printf_float+0x3fa>
 8002e3e:	4653      	mov	r3, sl
 8002e40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e44:	e6e0      	b.n	8002c08 <_printf_float+0x1e0>
 8002e46:	f04f 0800 	mov.w	r8, #0
 8002e4a:	f104 091a 	add.w	r9, r4, #26
 8002e4e:	e7f2      	b.n	8002e36 <_printf_float+0x40e>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4642      	mov	r2, r8
 8002e54:	e7df      	b.n	8002e16 <_printf_float+0x3ee>
 8002e56:	2301      	movs	r3, #1
 8002e58:	464a      	mov	r2, r9
 8002e5a:	4631      	mov	r1, r6
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	47b8      	blx	r7
 8002e60:	3001      	adds	r0, #1
 8002e62:	f43f ae3c 	beq.w	8002ade <_printf_float+0xb6>
 8002e66:	f108 0801 	add.w	r8, r8, #1
 8002e6a:	68e3      	ldr	r3, [r4, #12]
 8002e6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002e6e:	1a5b      	subs	r3, r3, r1
 8002e70:	4543      	cmp	r3, r8
 8002e72:	dcf0      	bgt.n	8002e56 <_printf_float+0x42e>
 8002e74:	e6fd      	b.n	8002c72 <_printf_float+0x24a>
 8002e76:	f04f 0800 	mov.w	r8, #0
 8002e7a:	f104 0919 	add.w	r9, r4, #25
 8002e7e:	e7f4      	b.n	8002e6a <_printf_float+0x442>

08002e80 <_printf_common>:
 8002e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	4616      	mov	r6, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	688a      	ldr	r2, [r1, #8]
 8002e8a:	690b      	ldr	r3, [r1, #16]
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	bfb8      	it	lt
 8002e92:	4613      	movlt	r3, r2
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea0:	b10a      	cbz	r2, 8002ea6 <_printf_common+0x26>
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	6033      	str	r3, [r6, #0]
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	0699      	lsls	r1, r3, #26
 8002eaa:	bf42      	ittt	mi
 8002eac:	6833      	ldrmi	r3, [r6, #0]
 8002eae:	3302      	addmi	r3, #2
 8002eb0:	6033      	strmi	r3, [r6, #0]
 8002eb2:	6825      	ldr	r5, [r4, #0]
 8002eb4:	f015 0506 	ands.w	r5, r5, #6
 8002eb8:	d106      	bne.n	8002ec8 <_printf_common+0x48>
 8002eba:	f104 0a19 	add.w	sl, r4, #25
 8002ebe:	68e3      	ldr	r3, [r4, #12]
 8002ec0:	6832      	ldr	r2, [r6, #0]
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	42ab      	cmp	r3, r5
 8002ec6:	dc28      	bgt.n	8002f1a <_printf_common+0x9a>
 8002ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ecc:	1e13      	subs	r3, r2, #0
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	bf18      	it	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	0692      	lsls	r2, r2, #26
 8002ed6:	d42d      	bmi.n	8002f34 <_printf_common+0xb4>
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4638      	mov	r0, r7
 8002edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ee0:	47c0      	blx	r8
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	d020      	beq.n	8002f28 <_printf_common+0xa8>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	68e5      	ldr	r5, [r4, #12]
 8002eea:	f003 0306 	and.w	r3, r3, #6
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf18      	it	ne
 8002ef2:	2500      	movne	r5, #0
 8002ef4:	6832      	ldr	r2, [r6, #0]
 8002ef6:	f04f 0600 	mov.w	r6, #0
 8002efa:	68a3      	ldr	r3, [r4, #8]
 8002efc:	bf08      	it	eq
 8002efe:	1aad      	subeq	r5, r5, r2
 8002f00:	6922      	ldr	r2, [r4, #16]
 8002f02:	bf08      	it	eq
 8002f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bfc4      	itt	gt
 8002f0c:	1a9b      	subgt	r3, r3, r2
 8002f0e:	18ed      	addgt	r5, r5, r3
 8002f10:	341a      	adds	r4, #26
 8002f12:	42b5      	cmp	r5, r6
 8002f14:	d11a      	bne.n	8002f4c <_printf_common+0xcc>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e008      	b.n	8002f2c <_printf_common+0xac>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4652      	mov	r2, sl
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4638      	mov	r0, r7
 8002f22:	47c0      	blx	r8
 8002f24:	3001      	adds	r0, #1
 8002f26:	d103      	bne.n	8002f30 <_printf_common+0xb0>
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7c4      	b.n	8002ebe <_printf_common+0x3e>
 8002f34:	2030      	movs	r0, #48	; 0x30
 8002f36:	18e1      	adds	r1, r4, r3
 8002f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f42:	4422      	add	r2, r4
 8002f44:	3302      	adds	r3, #2
 8002f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f4a:	e7c5      	b.n	8002ed8 <_printf_common+0x58>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4622      	mov	r2, r4
 8002f50:	4649      	mov	r1, r9
 8002f52:	4638      	mov	r0, r7
 8002f54:	47c0      	blx	r8
 8002f56:	3001      	adds	r0, #1
 8002f58:	d0e6      	beq.n	8002f28 <_printf_common+0xa8>
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7d9      	b.n	8002f12 <_printf_common+0x92>
	...

08002f60 <_printf_i>:
 8002f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	460c      	mov	r4, r1
 8002f66:	7e27      	ldrb	r7, [r4, #24]
 8002f68:	4691      	mov	r9, r2
 8002f6a:	2f78      	cmp	r7, #120	; 0x78
 8002f6c:	4680      	mov	r8, r0
 8002f6e:	469a      	mov	sl, r3
 8002f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f76:	d807      	bhi.n	8002f88 <_printf_i+0x28>
 8002f78:	2f62      	cmp	r7, #98	; 0x62
 8002f7a:	d80a      	bhi.n	8002f92 <_printf_i+0x32>
 8002f7c:	2f00      	cmp	r7, #0
 8002f7e:	f000 80d9 	beq.w	8003134 <_printf_i+0x1d4>
 8002f82:	2f58      	cmp	r7, #88	; 0x58
 8002f84:	f000 80a4 	beq.w	80030d0 <_printf_i+0x170>
 8002f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f90:	e03a      	b.n	8003008 <_printf_i+0xa8>
 8002f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f96:	2b15      	cmp	r3, #21
 8002f98:	d8f6      	bhi.n	8002f88 <_printf_i+0x28>
 8002f9a:	a001      	add	r0, pc, #4	; (adr r0, 8002fa0 <_printf_i+0x40>)
 8002f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	0800300d 	.word	0x0800300d
 8002fa8:	08002f89 	.word	0x08002f89
 8002fac:	08002f89 	.word	0x08002f89
 8002fb0:	08002f89 	.word	0x08002f89
 8002fb4:	08002f89 	.word	0x08002f89
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	08002f89 	.word	0x08002f89
 8002fc0:	08002f89 	.word	0x08002f89
 8002fc4:	08002f89 	.word	0x08002f89
 8002fc8:	08002f89 	.word	0x08002f89
 8002fcc:	0800311b 	.word	0x0800311b
 8002fd0:	0800303d 	.word	0x0800303d
 8002fd4:	080030fd 	.word	0x080030fd
 8002fd8:	08002f89 	.word	0x08002f89
 8002fdc:	08002f89 	.word	0x08002f89
 8002fe0:	0800313d 	.word	0x0800313d
 8002fe4:	08002f89 	.word	0x08002f89
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	08002f89 	.word	0x08002f89
 8002ff0:	08002f89 	.word	0x08002f89
 8002ff4:	08003105 	.word	0x08003105
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	600a      	str	r2, [r1, #0]
 8003004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003008:	2301      	movs	r3, #1
 800300a:	e0a4      	b.n	8003156 <_printf_i+0x1f6>
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	6808      	ldr	r0, [r1, #0]
 8003010:	062e      	lsls	r6, r5, #24
 8003012:	f100 0304 	add.w	r3, r0, #4
 8003016:	d50a      	bpl.n	800302e <_printf_i+0xce>
 8003018:	6805      	ldr	r5, [r0, #0]
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	2d00      	cmp	r5, #0
 800301e:	da03      	bge.n	8003028 <_printf_i+0xc8>
 8003020:	232d      	movs	r3, #45	; 0x2d
 8003022:	426d      	negs	r5, r5
 8003024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003028:	230a      	movs	r3, #10
 800302a:	485e      	ldr	r0, [pc, #376]	; (80031a4 <_printf_i+0x244>)
 800302c:	e019      	b.n	8003062 <_printf_i+0x102>
 800302e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003032:	6805      	ldr	r5, [r0, #0]
 8003034:	600b      	str	r3, [r1, #0]
 8003036:	bf18      	it	ne
 8003038:	b22d      	sxthne	r5, r5
 800303a:	e7ef      	b.n	800301c <_printf_i+0xbc>
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	6825      	ldr	r5, [r4, #0]
 8003040:	1d18      	adds	r0, r3, #4
 8003042:	6008      	str	r0, [r1, #0]
 8003044:	0628      	lsls	r0, r5, #24
 8003046:	d501      	bpl.n	800304c <_printf_i+0xec>
 8003048:	681d      	ldr	r5, [r3, #0]
 800304a:	e002      	b.n	8003052 <_printf_i+0xf2>
 800304c:	0669      	lsls	r1, r5, #25
 800304e:	d5fb      	bpl.n	8003048 <_printf_i+0xe8>
 8003050:	881d      	ldrh	r5, [r3, #0]
 8003052:	2f6f      	cmp	r7, #111	; 0x6f
 8003054:	bf0c      	ite	eq
 8003056:	2308      	moveq	r3, #8
 8003058:	230a      	movne	r3, #10
 800305a:	4852      	ldr	r0, [pc, #328]	; (80031a4 <_printf_i+0x244>)
 800305c:	2100      	movs	r1, #0
 800305e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003062:	6866      	ldr	r6, [r4, #4]
 8003064:	2e00      	cmp	r6, #0
 8003066:	bfa8      	it	ge
 8003068:	6821      	ldrge	r1, [r4, #0]
 800306a:	60a6      	str	r6, [r4, #8]
 800306c:	bfa4      	itt	ge
 800306e:	f021 0104 	bicge.w	r1, r1, #4
 8003072:	6021      	strge	r1, [r4, #0]
 8003074:	b90d      	cbnz	r5, 800307a <_printf_i+0x11a>
 8003076:	2e00      	cmp	r6, #0
 8003078:	d04d      	beq.n	8003116 <_printf_i+0x1b6>
 800307a:	4616      	mov	r6, r2
 800307c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003080:	fb03 5711 	mls	r7, r3, r1, r5
 8003084:	5dc7      	ldrb	r7, [r0, r7]
 8003086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800308a:	462f      	mov	r7, r5
 800308c:	42bb      	cmp	r3, r7
 800308e:	460d      	mov	r5, r1
 8003090:	d9f4      	bls.n	800307c <_printf_i+0x11c>
 8003092:	2b08      	cmp	r3, #8
 8003094:	d10b      	bne.n	80030ae <_printf_i+0x14e>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	07df      	lsls	r7, r3, #31
 800309a:	d508      	bpl.n	80030ae <_printf_i+0x14e>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	6861      	ldr	r1, [r4, #4]
 80030a0:	4299      	cmp	r1, r3
 80030a2:	bfde      	ittt	le
 80030a4:	2330      	movle	r3, #48	; 0x30
 80030a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030ae:	1b92      	subs	r2, r2, r6
 80030b0:	6122      	str	r2, [r4, #16]
 80030b2:	464b      	mov	r3, r9
 80030b4:	4621      	mov	r1, r4
 80030b6:	4640      	mov	r0, r8
 80030b8:	f8cd a000 	str.w	sl, [sp]
 80030bc:	aa03      	add	r2, sp, #12
 80030be:	f7ff fedf 	bl	8002e80 <_printf_common>
 80030c2:	3001      	adds	r0, #1
 80030c4:	d14c      	bne.n	8003160 <_printf_i+0x200>
 80030c6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ca:	b004      	add	sp, #16
 80030cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d0:	4834      	ldr	r0, [pc, #208]	; (80031a4 <_printf_i+0x244>)
 80030d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030d6:	680e      	ldr	r6, [r1, #0]
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f856 5b04 	ldr.w	r5, [r6], #4
 80030de:	061f      	lsls	r7, r3, #24
 80030e0:	600e      	str	r6, [r1, #0]
 80030e2:	d514      	bpl.n	800310e <_printf_i+0x1ae>
 80030e4:	07d9      	lsls	r1, r3, #31
 80030e6:	bf44      	itt	mi
 80030e8:	f043 0320 	orrmi.w	r3, r3, #32
 80030ec:	6023      	strmi	r3, [r4, #0]
 80030ee:	b91d      	cbnz	r5, 80030f8 <_printf_i+0x198>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	f023 0320 	bic.w	r3, r3, #32
 80030f6:	6023      	str	r3, [r4, #0]
 80030f8:	2310      	movs	r3, #16
 80030fa:	e7af      	b.n	800305c <_printf_i+0xfc>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f043 0320 	orr.w	r3, r3, #32
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	2378      	movs	r3, #120	; 0x78
 8003106:	4828      	ldr	r0, [pc, #160]	; (80031a8 <_printf_i+0x248>)
 8003108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800310c:	e7e3      	b.n	80030d6 <_printf_i+0x176>
 800310e:	065e      	lsls	r6, r3, #25
 8003110:	bf48      	it	mi
 8003112:	b2ad      	uxthmi	r5, r5
 8003114:	e7e6      	b.n	80030e4 <_printf_i+0x184>
 8003116:	4616      	mov	r6, r2
 8003118:	e7bb      	b.n	8003092 <_printf_i+0x132>
 800311a:	680b      	ldr	r3, [r1, #0]
 800311c:	6826      	ldr	r6, [r4, #0]
 800311e:	1d1d      	adds	r5, r3, #4
 8003120:	6960      	ldr	r0, [r4, #20]
 8003122:	600d      	str	r5, [r1, #0]
 8003124:	0635      	lsls	r5, r6, #24
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	d501      	bpl.n	800312e <_printf_i+0x1ce>
 800312a:	6018      	str	r0, [r3, #0]
 800312c:	e002      	b.n	8003134 <_printf_i+0x1d4>
 800312e:	0671      	lsls	r1, r6, #25
 8003130:	d5fb      	bpl.n	800312a <_printf_i+0x1ca>
 8003132:	8018      	strh	r0, [r3, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	4616      	mov	r6, r2
 8003138:	6123      	str	r3, [r4, #16]
 800313a:	e7ba      	b.n	80030b2 <_printf_i+0x152>
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	600a      	str	r2, [r1, #0]
 8003142:	681e      	ldr	r6, [r3, #0]
 8003144:	2100      	movs	r1, #0
 8003146:	4630      	mov	r0, r6
 8003148:	6862      	ldr	r2, [r4, #4]
 800314a:	f000 fed7 	bl	8003efc <memchr>
 800314e:	b108      	cbz	r0, 8003154 <_printf_i+0x1f4>
 8003150:	1b80      	subs	r0, r0, r6
 8003152:	6060      	str	r0, [r4, #4]
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	6123      	str	r3, [r4, #16]
 8003158:	2300      	movs	r3, #0
 800315a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800315e:	e7a8      	b.n	80030b2 <_printf_i+0x152>
 8003160:	4632      	mov	r2, r6
 8003162:	4649      	mov	r1, r9
 8003164:	4640      	mov	r0, r8
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	47d0      	blx	sl
 800316a:	3001      	adds	r0, #1
 800316c:	d0ab      	beq.n	80030c6 <_printf_i+0x166>
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	079b      	lsls	r3, r3, #30
 8003172:	d413      	bmi.n	800319c <_printf_i+0x23c>
 8003174:	68e0      	ldr	r0, [r4, #12]
 8003176:	9b03      	ldr	r3, [sp, #12]
 8003178:	4298      	cmp	r0, r3
 800317a:	bfb8      	it	lt
 800317c:	4618      	movlt	r0, r3
 800317e:	e7a4      	b.n	80030ca <_printf_i+0x16a>
 8003180:	2301      	movs	r3, #1
 8003182:	4632      	mov	r2, r6
 8003184:	4649      	mov	r1, r9
 8003186:	4640      	mov	r0, r8
 8003188:	47d0      	blx	sl
 800318a:	3001      	adds	r0, #1
 800318c:	d09b      	beq.n	80030c6 <_printf_i+0x166>
 800318e:	3501      	adds	r5, #1
 8003190:	68e3      	ldr	r3, [r4, #12]
 8003192:	9903      	ldr	r1, [sp, #12]
 8003194:	1a5b      	subs	r3, r3, r1
 8003196:	42ab      	cmp	r3, r5
 8003198:	dcf2      	bgt.n	8003180 <_printf_i+0x220>
 800319a:	e7eb      	b.n	8003174 <_printf_i+0x214>
 800319c:	2500      	movs	r5, #0
 800319e:	f104 0619 	add.w	r6, r4, #25
 80031a2:	e7f5      	b.n	8003190 <_printf_i+0x230>
 80031a4:	0800569a 	.word	0x0800569a
 80031a8:	080056ab 	.word	0x080056ab

080031ac <siprintf>:
 80031ac:	b40e      	push	{r1, r2, r3}
 80031ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031b2:	b500      	push	{lr}
 80031b4:	b09c      	sub	sp, #112	; 0x70
 80031b6:	ab1d      	add	r3, sp, #116	; 0x74
 80031b8:	9002      	str	r0, [sp, #8]
 80031ba:	9006      	str	r0, [sp, #24]
 80031bc:	9107      	str	r1, [sp, #28]
 80031be:	9104      	str	r1, [sp, #16]
 80031c0:	4808      	ldr	r0, [pc, #32]	; (80031e4 <siprintf+0x38>)
 80031c2:	4909      	ldr	r1, [pc, #36]	; (80031e8 <siprintf+0x3c>)
 80031c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031c8:	9105      	str	r1, [sp, #20]
 80031ca:	6800      	ldr	r0, [r0, #0]
 80031cc:	a902      	add	r1, sp, #8
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f001 fb42 	bl	8004858 <_svfiprintf_r>
 80031d4:	2200      	movs	r2, #0
 80031d6:	9b02      	ldr	r3, [sp, #8]
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	b01c      	add	sp, #112	; 0x70
 80031dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e0:	b003      	add	sp, #12
 80031e2:	4770      	bx	lr
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	ffff0208 	.word	0xffff0208

080031ec <quorem>:
 80031ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	6903      	ldr	r3, [r0, #16]
 80031f2:	690c      	ldr	r4, [r1, #16]
 80031f4:	4607      	mov	r7, r0
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	f2c0 8083 	blt.w	8003302 <quorem+0x116>
 80031fc:	3c01      	subs	r4, #1
 80031fe:	f100 0514 	add.w	r5, r0, #20
 8003202:	f101 0814 	add.w	r8, r1, #20
 8003206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003214:	3301      	adds	r3, #1
 8003216:	429a      	cmp	r2, r3
 8003218:	fbb2 f6f3 	udiv	r6, r2, r3
 800321c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003224:	d332      	bcc.n	800328c <quorem+0xa0>
 8003226:	f04f 0e00 	mov.w	lr, #0
 800322a:	4640      	mov	r0, r8
 800322c:	46ac      	mov	ip, r5
 800322e:	46f2      	mov	sl, lr
 8003230:	f850 2b04 	ldr.w	r2, [r0], #4
 8003234:	b293      	uxth	r3, r2
 8003236:	fb06 e303 	mla	r3, r6, r3, lr
 800323a:	0c12      	lsrs	r2, r2, #16
 800323c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003240:	fb06 e202 	mla	r2, r6, r2, lr
 8003244:	b29b      	uxth	r3, r3
 8003246:	ebaa 0303 	sub.w	r3, sl, r3
 800324a:	f8dc a000 	ldr.w	sl, [ip]
 800324e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003252:	fa1f fa8a 	uxth.w	sl, sl
 8003256:	4453      	add	r3, sl
 8003258:	fa1f fa82 	uxth.w	sl, r2
 800325c:	f8dc 2000 	ldr.w	r2, [ip]
 8003260:	4581      	cmp	r9, r0
 8003262:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800326a:	b29b      	uxth	r3, r3
 800326c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003270:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003274:	f84c 3b04 	str.w	r3, [ip], #4
 8003278:	d2da      	bcs.n	8003230 <quorem+0x44>
 800327a:	f855 300b 	ldr.w	r3, [r5, fp]
 800327e:	b92b      	cbnz	r3, 800328c <quorem+0xa0>
 8003280:	9b01      	ldr	r3, [sp, #4]
 8003282:	3b04      	subs	r3, #4
 8003284:	429d      	cmp	r5, r3
 8003286:	461a      	mov	r2, r3
 8003288:	d32f      	bcc.n	80032ea <quorem+0xfe>
 800328a:	613c      	str	r4, [r7, #16]
 800328c:	4638      	mov	r0, r7
 800328e:	f001 f8cb 	bl	8004428 <__mcmp>
 8003292:	2800      	cmp	r0, #0
 8003294:	db25      	blt.n	80032e2 <quorem+0xf6>
 8003296:	4628      	mov	r0, r5
 8003298:	f04f 0c00 	mov.w	ip, #0
 800329c:	3601      	adds	r6, #1
 800329e:	f858 1b04 	ldr.w	r1, [r8], #4
 80032a2:	f8d0 e000 	ldr.w	lr, [r0]
 80032a6:	b28b      	uxth	r3, r1
 80032a8:	ebac 0303 	sub.w	r3, ip, r3
 80032ac:	fa1f f28e 	uxth.w	r2, lr
 80032b0:	4413      	add	r3, r2
 80032b2:	0c0a      	lsrs	r2, r1, #16
 80032b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80032b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032bc:	b29b      	uxth	r3, r3
 80032be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032c2:	45c1      	cmp	r9, r8
 80032c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80032c8:	f840 3b04 	str.w	r3, [r0], #4
 80032cc:	d2e7      	bcs.n	800329e <quorem+0xb2>
 80032ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80032d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80032d6:	b922      	cbnz	r2, 80032e2 <quorem+0xf6>
 80032d8:	3b04      	subs	r3, #4
 80032da:	429d      	cmp	r5, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	d30a      	bcc.n	80032f6 <quorem+0x10a>
 80032e0:	613c      	str	r4, [r7, #16]
 80032e2:	4630      	mov	r0, r6
 80032e4:	b003      	add	sp, #12
 80032e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	3b04      	subs	r3, #4
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d1cb      	bne.n	800328a <quorem+0x9e>
 80032f2:	3c01      	subs	r4, #1
 80032f4:	e7c6      	b.n	8003284 <quorem+0x98>
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	3b04      	subs	r3, #4
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	d1f0      	bne.n	80032e0 <quorem+0xf4>
 80032fe:	3c01      	subs	r4, #1
 8003300:	e7eb      	b.n	80032da <quorem+0xee>
 8003302:	2000      	movs	r0, #0
 8003304:	e7ee      	b.n	80032e4 <quorem+0xf8>
	...

08003308 <_dtoa_r>:
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	4616      	mov	r6, r2
 800330e:	461f      	mov	r7, r3
 8003310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003312:	b099      	sub	sp, #100	; 0x64
 8003314:	4605      	mov	r5, r0
 8003316:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800331a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800331e:	b974      	cbnz	r4, 800333e <_dtoa_r+0x36>
 8003320:	2010      	movs	r0, #16
 8003322:	f000 fde3 	bl	8003eec <malloc>
 8003326:	4602      	mov	r2, r0
 8003328:	6268      	str	r0, [r5, #36]	; 0x24
 800332a:	b920      	cbnz	r0, 8003336 <_dtoa_r+0x2e>
 800332c:	21ea      	movs	r1, #234	; 0xea
 800332e:	4bae      	ldr	r3, [pc, #696]	; (80035e8 <_dtoa_r+0x2e0>)
 8003330:	48ae      	ldr	r0, [pc, #696]	; (80035ec <_dtoa_r+0x2e4>)
 8003332:	f001 fba1 	bl	8004a78 <__assert_func>
 8003336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800333a:	6004      	str	r4, [r0, #0]
 800333c:	60c4      	str	r4, [r0, #12]
 800333e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	b151      	cbz	r1, 800335a <_dtoa_r+0x52>
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	2301      	movs	r3, #1
 8003348:	4093      	lsls	r3, r2
 800334a:	604a      	str	r2, [r1, #4]
 800334c:	608b      	str	r3, [r1, #8]
 800334e:	4628      	mov	r0, r5
 8003350:	f000 fe30 	bl	8003fb4 <_Bfree>
 8003354:	2200      	movs	r2, #0
 8003356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	1e3b      	subs	r3, r7, #0
 800335c:	bfaf      	iteee	ge
 800335e:	2300      	movge	r3, #0
 8003360:	2201      	movlt	r2, #1
 8003362:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003366:	9305      	strlt	r3, [sp, #20]
 8003368:	bfa8      	it	ge
 800336a:	f8c8 3000 	strge.w	r3, [r8]
 800336e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003372:	4b9f      	ldr	r3, [pc, #636]	; (80035f0 <_dtoa_r+0x2e8>)
 8003374:	bfb8      	it	lt
 8003376:	f8c8 2000 	strlt.w	r2, [r8]
 800337a:	ea33 0309 	bics.w	r3, r3, r9
 800337e:	d119      	bne.n	80033b4 <_dtoa_r+0xac>
 8003380:	f242 730f 	movw	r3, #9999	; 0x270f
 8003384:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800338c:	4333      	orrs	r3, r6
 800338e:	f000 8580 	beq.w	8003e92 <_dtoa_r+0xb8a>
 8003392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003394:	b953      	cbnz	r3, 80033ac <_dtoa_r+0xa4>
 8003396:	4b97      	ldr	r3, [pc, #604]	; (80035f4 <_dtoa_r+0x2ec>)
 8003398:	e022      	b.n	80033e0 <_dtoa_r+0xd8>
 800339a:	4b97      	ldr	r3, [pc, #604]	; (80035f8 <_dtoa_r+0x2f0>)
 800339c:	9308      	str	r3, [sp, #32]
 800339e:	3308      	adds	r3, #8
 80033a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	9808      	ldr	r0, [sp, #32]
 80033a6:	b019      	add	sp, #100	; 0x64
 80033a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ac:	4b91      	ldr	r3, [pc, #580]	; (80035f4 <_dtoa_r+0x2ec>)
 80033ae:	9308      	str	r3, [sp, #32]
 80033b0:	3303      	adds	r3, #3
 80033b2:	e7f5      	b.n	80033a0 <_dtoa_r+0x98>
 80033b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80033b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80033bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	2300      	movs	r3, #0
 80033c4:	f7fd faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80033c8:	4680      	mov	r8, r0
 80033ca:	b158      	cbz	r0, 80033e4 <_dtoa_r+0xdc>
 80033cc:	2301      	movs	r3, #1
 80033ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8559 	beq.w	8003e8c <_dtoa_r+0xb84>
 80033da:	4888      	ldr	r0, [pc, #544]	; (80035fc <_dtoa_r+0x2f4>)
 80033dc:	6018      	str	r0, [r3, #0]
 80033de:	1e43      	subs	r3, r0, #1
 80033e0:	9308      	str	r3, [sp, #32]
 80033e2:	e7df      	b.n	80033a4 <_dtoa_r+0x9c>
 80033e4:	ab16      	add	r3, sp, #88	; 0x58
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	ab17      	add	r3, sp, #92	; 0x5c
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4628      	mov	r0, r5
 80033ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80033f2:	f001 f8c5 	bl	8004580 <__d2b>
 80033f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80033fa:	4682      	mov	sl, r0
 80033fc:	2c00      	cmp	r4, #0
 80033fe:	d07e      	beq.n	80034fe <_dtoa_r+0x1f6>
 8003400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003406:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800340a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800340e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003412:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003416:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800341a:	2200      	movs	r2, #0
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <_dtoa_r+0x2f8>)
 800341e:	f7fc fea3 	bl	8000168 <__aeabi_dsub>
 8003422:	a36b      	add	r3, pc, #428	; (adr r3, 80035d0 <_dtoa_r+0x2c8>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f856 	bl	80004d8 <__aeabi_dmul>
 800342c:	a36a      	add	r3, pc, #424	; (adr r3, 80035d8 <_dtoa_r+0x2d0>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fc fe9b 	bl	800016c <__adddf3>
 8003436:	4606      	mov	r6, r0
 8003438:	4620      	mov	r0, r4
 800343a:	460f      	mov	r7, r1
 800343c:	f7fc ffe2 	bl	8000404 <__aeabi_i2d>
 8003440:	a367      	add	r3, pc, #412	; (adr r3, 80035e0 <_dtoa_r+0x2d8>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f847 	bl	80004d8 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4630      	mov	r0, r6
 8003450:	4639      	mov	r1, r7
 8003452:	f7fc fe8b 	bl	800016c <__adddf3>
 8003456:	4606      	mov	r6, r0
 8003458:	460f      	mov	r7, r1
 800345a:	f7fd faed 	bl	8000a38 <__aeabi_d2iz>
 800345e:	2200      	movs	r2, #0
 8003460:	4681      	mov	r9, r0
 8003462:	2300      	movs	r3, #0
 8003464:	4630      	mov	r0, r6
 8003466:	4639      	mov	r1, r7
 8003468:	f7fd faa8 	bl	80009bc <__aeabi_dcmplt>
 800346c:	b148      	cbz	r0, 8003482 <_dtoa_r+0x17a>
 800346e:	4648      	mov	r0, r9
 8003470:	f7fc ffc8 	bl	8000404 <__aeabi_i2d>
 8003474:	4632      	mov	r2, r6
 8003476:	463b      	mov	r3, r7
 8003478:	f7fd fa96 	bl	80009a8 <__aeabi_dcmpeq>
 800347c:	b908      	cbnz	r0, 8003482 <_dtoa_r+0x17a>
 800347e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003482:	f1b9 0f16 	cmp.w	r9, #22
 8003486:	d857      	bhi.n	8003538 <_dtoa_r+0x230>
 8003488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800348c:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <_dtoa_r+0x2fc>)
 800348e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fd fa91 	bl	80009bc <__aeabi_dcmplt>
 800349a:	2800      	cmp	r0, #0
 800349c:	d04e      	beq.n	800353c <_dtoa_r+0x234>
 800349e:	2300      	movs	r3, #0
 80034a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80034a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80034a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80034a8:	1b1c      	subs	r4, r3, r4
 80034aa:	1e63      	subs	r3, r4, #1
 80034ac:	9309      	str	r3, [sp, #36]	; 0x24
 80034ae:	bf49      	itett	mi
 80034b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80034b4:	2300      	movpl	r3, #0
 80034b6:	9306      	strmi	r3, [sp, #24]
 80034b8:	2300      	movmi	r3, #0
 80034ba:	bf54      	ite	pl
 80034bc:	9306      	strpl	r3, [sp, #24]
 80034be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80034c0:	f1b9 0f00 	cmp.w	r9, #0
 80034c4:	db3c      	blt.n	8003540 <_dtoa_r+0x238>
 80034c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80034cc:	444b      	add	r3, r9
 80034ce:	9309      	str	r3, [sp, #36]	; 0x24
 80034d0:	2300      	movs	r3, #0
 80034d2:	930a      	str	r3, [sp, #40]	; 0x28
 80034d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034d6:	2b09      	cmp	r3, #9
 80034d8:	d86c      	bhi.n	80035b4 <_dtoa_r+0x2ac>
 80034da:	2b05      	cmp	r3, #5
 80034dc:	bfc4      	itt	gt
 80034de:	3b04      	subgt	r3, #4
 80034e0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80034e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034e4:	bfc8      	it	gt
 80034e6:	2400      	movgt	r4, #0
 80034e8:	f1a3 0302 	sub.w	r3, r3, #2
 80034ec:	bfd8      	it	le
 80034ee:	2401      	movle	r4, #1
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	f200 808b 	bhi.w	800360c <_dtoa_r+0x304>
 80034f6:	e8df f003 	tbb	[pc, r3]
 80034fa:	4f2d      	.short	0x4f2d
 80034fc:	5b4d      	.short	0x5b4d
 80034fe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003502:	441c      	add	r4, r3
 8003504:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003508:	2b20      	cmp	r3, #32
 800350a:	bfc3      	ittte	gt
 800350c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003510:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003514:	fa09 f303 	lslgt.w	r3, r9, r3
 8003518:	f1c3 0320 	rsble	r3, r3, #32
 800351c:	bfc6      	itte	gt
 800351e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003522:	4318      	orrgt	r0, r3
 8003524:	fa06 f003 	lslle.w	r0, r6, r3
 8003528:	f7fc ff5c 	bl	80003e4 <__aeabi_ui2d>
 800352c:	2301      	movs	r3, #1
 800352e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003532:	3c01      	subs	r4, #1
 8003534:	9313      	str	r3, [sp, #76]	; 0x4c
 8003536:	e770      	b.n	800341a <_dtoa_r+0x112>
 8003538:	2301      	movs	r3, #1
 800353a:	e7b3      	b.n	80034a4 <_dtoa_r+0x19c>
 800353c:	900f      	str	r0, [sp, #60]	; 0x3c
 800353e:	e7b2      	b.n	80034a6 <_dtoa_r+0x19e>
 8003540:	9b06      	ldr	r3, [sp, #24]
 8003542:	eba3 0309 	sub.w	r3, r3, r9
 8003546:	9306      	str	r3, [sp, #24]
 8003548:	f1c9 0300 	rsb	r3, r9, #0
 800354c:	930a      	str	r3, [sp, #40]	; 0x28
 800354e:	2300      	movs	r3, #0
 8003550:	930e      	str	r3, [sp, #56]	; 0x38
 8003552:	e7bf      	b.n	80034d4 <_dtoa_r+0x1cc>
 8003554:	2300      	movs	r3, #0
 8003556:	930b      	str	r3, [sp, #44]	; 0x2c
 8003558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800355a:	2b00      	cmp	r3, #0
 800355c:	dc59      	bgt.n	8003612 <_dtoa_r+0x30a>
 800355e:	f04f 0b01 	mov.w	fp, #1
 8003562:	465b      	mov	r3, fp
 8003564:	f8cd b008 	str.w	fp, [sp, #8]
 8003568:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800356c:	2200      	movs	r2, #0
 800356e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003570:	6042      	str	r2, [r0, #4]
 8003572:	2204      	movs	r2, #4
 8003574:	f102 0614 	add.w	r6, r2, #20
 8003578:	429e      	cmp	r6, r3
 800357a:	6841      	ldr	r1, [r0, #4]
 800357c:	d94f      	bls.n	800361e <_dtoa_r+0x316>
 800357e:	4628      	mov	r0, r5
 8003580:	f000 fcd8 	bl	8003f34 <_Balloc>
 8003584:	9008      	str	r0, [sp, #32]
 8003586:	2800      	cmp	r0, #0
 8003588:	d14d      	bne.n	8003626 <_dtoa_r+0x31e>
 800358a:	4602      	mov	r2, r0
 800358c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <_dtoa_r+0x300>)
 8003592:	e6cd      	b.n	8003330 <_dtoa_r+0x28>
 8003594:	2301      	movs	r3, #1
 8003596:	e7de      	b.n	8003556 <_dtoa_r+0x24e>
 8003598:	2300      	movs	r3, #0
 800359a:	930b      	str	r3, [sp, #44]	; 0x2c
 800359c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800359e:	eb09 0b03 	add.w	fp, r9, r3
 80035a2:	f10b 0301 	add.w	r3, fp, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	9302      	str	r3, [sp, #8]
 80035aa:	bfb8      	it	lt
 80035ac:	2301      	movlt	r3, #1
 80035ae:	e7dd      	b.n	800356c <_dtoa_r+0x264>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e7f2      	b.n	800359a <_dtoa_r+0x292>
 80035b4:	2401      	movs	r4, #1
 80035b6:	2300      	movs	r3, #0
 80035b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80035ba:	9322      	str	r3, [sp, #136]	; 0x88
 80035bc:	f04f 3bff 	mov.w	fp, #4294967295
 80035c0:	2200      	movs	r2, #0
 80035c2:	2312      	movs	r3, #18
 80035c4:	f8cd b008 	str.w	fp, [sp, #8]
 80035c8:	9223      	str	r2, [sp, #140]	; 0x8c
 80035ca:	e7cf      	b.n	800356c <_dtoa_r+0x264>
 80035cc:	f3af 8000 	nop.w
 80035d0:	636f4361 	.word	0x636f4361
 80035d4:	3fd287a7 	.word	0x3fd287a7
 80035d8:	8b60c8b3 	.word	0x8b60c8b3
 80035dc:	3fc68a28 	.word	0x3fc68a28
 80035e0:	509f79fb 	.word	0x509f79fb
 80035e4:	3fd34413 	.word	0x3fd34413
 80035e8:	080056c9 	.word	0x080056c9
 80035ec:	080056e0 	.word	0x080056e0
 80035f0:	7ff00000 	.word	0x7ff00000
 80035f4:	080056c5 	.word	0x080056c5
 80035f8:	080056bc 	.word	0x080056bc
 80035fc:	08005699 	.word	0x08005699
 8003600:	3ff80000 	.word	0x3ff80000
 8003604:	080057d8 	.word	0x080057d8
 8003608:	0800573f 	.word	0x0800573f
 800360c:	2301      	movs	r3, #1
 800360e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003610:	e7d4      	b.n	80035bc <_dtoa_r+0x2b4>
 8003612:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003616:	465b      	mov	r3, fp
 8003618:	f8cd b008 	str.w	fp, [sp, #8]
 800361c:	e7a6      	b.n	800356c <_dtoa_r+0x264>
 800361e:	3101      	adds	r1, #1
 8003620:	6041      	str	r1, [r0, #4]
 8003622:	0052      	lsls	r2, r2, #1
 8003624:	e7a6      	b.n	8003574 <_dtoa_r+0x26c>
 8003626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003628:	9a08      	ldr	r2, [sp, #32]
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	9b02      	ldr	r3, [sp, #8]
 800362e:	2b0e      	cmp	r3, #14
 8003630:	f200 80a8 	bhi.w	8003784 <_dtoa_r+0x47c>
 8003634:	2c00      	cmp	r4, #0
 8003636:	f000 80a5 	beq.w	8003784 <_dtoa_r+0x47c>
 800363a:	f1b9 0f00 	cmp.w	r9, #0
 800363e:	dd34      	ble.n	80036aa <_dtoa_r+0x3a2>
 8003640:	4a9a      	ldr	r2, [pc, #616]	; (80038ac <_dtoa_r+0x5a4>)
 8003642:	f009 030f 	and.w	r3, r9, #15
 8003646:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800364a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800364e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003652:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003656:	ea4f 1429 	mov.w	r4, r9, asr #4
 800365a:	d016      	beq.n	800368a <_dtoa_r+0x382>
 800365c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003660:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <_dtoa_r+0x5a8>)
 8003662:	2703      	movs	r7, #3
 8003664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003668:	f7fd f860 	bl	800072c <__aeabi_ddiv>
 800366c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003670:	f004 040f 	and.w	r4, r4, #15
 8003674:	4e8e      	ldr	r6, [pc, #568]	; (80038b0 <_dtoa_r+0x5a8>)
 8003676:	b954      	cbnz	r4, 800368e <_dtoa_r+0x386>
 8003678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800367c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003680:	f7fd f854 	bl	800072c <__aeabi_ddiv>
 8003684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003688:	e029      	b.n	80036de <_dtoa_r+0x3d6>
 800368a:	2702      	movs	r7, #2
 800368c:	e7f2      	b.n	8003674 <_dtoa_r+0x36c>
 800368e:	07e1      	lsls	r1, r4, #31
 8003690:	d508      	bpl.n	80036a4 <_dtoa_r+0x39c>
 8003692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003696:	e9d6 2300 	ldrd	r2, r3, [r6]
 800369a:	f7fc ff1d 	bl	80004d8 <__aeabi_dmul>
 800369e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80036a2:	3701      	adds	r7, #1
 80036a4:	1064      	asrs	r4, r4, #1
 80036a6:	3608      	adds	r6, #8
 80036a8:	e7e5      	b.n	8003676 <_dtoa_r+0x36e>
 80036aa:	f000 80a5 	beq.w	80037f8 <_dtoa_r+0x4f0>
 80036ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80036b2:	f1c9 0400 	rsb	r4, r9, #0
 80036b6:	4b7d      	ldr	r3, [pc, #500]	; (80038ac <_dtoa_r+0x5a4>)
 80036b8:	f004 020f 	and.w	r2, r4, #15
 80036bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f7fc ff08 	bl	80004d8 <__aeabi_dmul>
 80036c8:	2702      	movs	r7, #2
 80036ca:	2300      	movs	r3, #0
 80036cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036d0:	4e77      	ldr	r6, [pc, #476]	; (80038b0 <_dtoa_r+0x5a8>)
 80036d2:	1124      	asrs	r4, r4, #4
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	f040 8084 	bne.w	80037e2 <_dtoa_r+0x4da>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1d2      	bne.n	8003684 <_dtoa_r+0x37c>
 80036de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 808b 	beq.w	80037fc <_dtoa_r+0x4f4>
 80036e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80036ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80036ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036f2:	2200      	movs	r2, #0
 80036f4:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <_dtoa_r+0x5ac>)
 80036f6:	f7fd f961 	bl	80009bc <__aeabi_dcmplt>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d07e      	beq.n	80037fc <_dtoa_r+0x4f4>
 80036fe:	9b02      	ldr	r3, [sp, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d07b      	beq.n	80037fc <_dtoa_r+0x4f4>
 8003704:	f1bb 0f00 	cmp.w	fp, #0
 8003708:	dd38      	ble.n	800377c <_dtoa_r+0x474>
 800370a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800370e:	2200      	movs	r2, #0
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <_dtoa_r+0x5b0>)
 8003712:	f7fc fee1 	bl	80004d8 <__aeabi_dmul>
 8003716:	465c      	mov	r4, fp
 8003718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800371c:	f109 38ff 	add.w	r8, r9, #4294967295
 8003720:	3701      	adds	r7, #1
 8003722:	4638      	mov	r0, r7
 8003724:	f7fc fe6e 	bl	8000404 <__aeabi_i2d>
 8003728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800372c:	f7fc fed4 	bl	80004d8 <__aeabi_dmul>
 8003730:	2200      	movs	r2, #0
 8003732:	4b62      	ldr	r3, [pc, #392]	; (80038bc <_dtoa_r+0x5b4>)
 8003734:	f7fc fd1a 	bl	800016c <__adddf3>
 8003738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800373c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003740:	9611      	str	r6, [sp, #68]	; 0x44
 8003742:	2c00      	cmp	r4, #0
 8003744:	d15d      	bne.n	8003802 <_dtoa_r+0x4fa>
 8003746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800374a:	2200      	movs	r2, #0
 800374c:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <_dtoa_r+0x5b8>)
 800374e:	f7fc fd0b 	bl	8000168 <__aeabi_dsub>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800375a:	4633      	mov	r3, r6
 800375c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800375e:	f7fd f94b 	bl	80009f8 <__aeabi_dcmpgt>
 8003762:	2800      	cmp	r0, #0
 8003764:	f040 829e 	bne.w	8003ca4 <_dtoa_r+0x99c>
 8003768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800376c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800376e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003772:	f7fd f923 	bl	80009bc <__aeabi_dcmplt>
 8003776:	2800      	cmp	r0, #0
 8003778:	f040 8292 	bne.w	8003ca0 <_dtoa_r+0x998>
 800377c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003780:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003786:	2b00      	cmp	r3, #0
 8003788:	f2c0 8153 	blt.w	8003a32 <_dtoa_r+0x72a>
 800378c:	f1b9 0f0e 	cmp.w	r9, #14
 8003790:	f300 814f 	bgt.w	8003a32 <_dtoa_r+0x72a>
 8003794:	4b45      	ldr	r3, [pc, #276]	; (80038ac <_dtoa_r+0x5a4>)
 8003796:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800379a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800379e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80037a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f280 80db 	bge.w	8003960 <_dtoa_r+0x658>
 80037aa:	9b02      	ldr	r3, [sp, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f300 80d7 	bgt.w	8003960 <_dtoa_r+0x658>
 80037b2:	f040 8274 	bne.w	8003c9e <_dtoa_r+0x996>
 80037b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037ba:	2200      	movs	r2, #0
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <_dtoa_r+0x5b8>)
 80037be:	f7fc fe8b 	bl	80004d8 <__aeabi_dmul>
 80037c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037c6:	f7fd f90d 	bl	80009e4 <__aeabi_dcmpge>
 80037ca:	9c02      	ldr	r4, [sp, #8]
 80037cc:	4626      	mov	r6, r4
 80037ce:	2800      	cmp	r0, #0
 80037d0:	f040 824a 	bne.w	8003c68 <_dtoa_r+0x960>
 80037d4:	2331      	movs	r3, #49	; 0x31
 80037d6:	9f08      	ldr	r7, [sp, #32]
 80037d8:	f109 0901 	add.w	r9, r9, #1
 80037dc:	f807 3b01 	strb.w	r3, [r7], #1
 80037e0:	e246      	b.n	8003c70 <_dtoa_r+0x968>
 80037e2:	07e2      	lsls	r2, r4, #31
 80037e4:	d505      	bpl.n	80037f2 <_dtoa_r+0x4ea>
 80037e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80037ea:	f7fc fe75 	bl	80004d8 <__aeabi_dmul>
 80037ee:	2301      	movs	r3, #1
 80037f0:	3701      	adds	r7, #1
 80037f2:	1064      	asrs	r4, r4, #1
 80037f4:	3608      	adds	r6, #8
 80037f6:	e76d      	b.n	80036d4 <_dtoa_r+0x3cc>
 80037f8:	2702      	movs	r7, #2
 80037fa:	e770      	b.n	80036de <_dtoa_r+0x3d6>
 80037fc:	46c8      	mov	r8, r9
 80037fe:	9c02      	ldr	r4, [sp, #8]
 8003800:	e78f      	b.n	8003722 <_dtoa_r+0x41a>
 8003802:	9908      	ldr	r1, [sp, #32]
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <_dtoa_r+0x5a4>)
 8003806:	4421      	add	r1, r4
 8003808:	9112      	str	r1, [sp, #72]	; 0x48
 800380a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800380c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003810:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003814:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003818:	2900      	cmp	r1, #0
 800381a:	d055      	beq.n	80038c8 <_dtoa_r+0x5c0>
 800381c:	2000      	movs	r0, #0
 800381e:	4929      	ldr	r1, [pc, #164]	; (80038c4 <_dtoa_r+0x5bc>)
 8003820:	f7fc ff84 	bl	800072c <__aeabi_ddiv>
 8003824:	463b      	mov	r3, r7
 8003826:	4632      	mov	r2, r6
 8003828:	f7fc fc9e 	bl	8000168 <__aeabi_dsub>
 800382c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003830:	9f08      	ldr	r7, [sp, #32]
 8003832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003836:	f7fd f8ff 	bl	8000a38 <__aeabi_d2iz>
 800383a:	4604      	mov	r4, r0
 800383c:	f7fc fde2 	bl	8000404 <__aeabi_i2d>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003848:	f7fc fc8e 	bl	8000168 <__aeabi_dsub>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	3430      	adds	r4, #48	; 0x30
 8003852:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800385a:	f807 4b01 	strb.w	r4, [r7], #1
 800385e:	f7fd f8ad 	bl	80009bc <__aeabi_dcmplt>
 8003862:	2800      	cmp	r0, #0
 8003864:	d174      	bne.n	8003950 <_dtoa_r+0x648>
 8003866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800386a:	2000      	movs	r0, #0
 800386c:	4911      	ldr	r1, [pc, #68]	; (80038b4 <_dtoa_r+0x5ac>)
 800386e:	f7fc fc7b 	bl	8000168 <__aeabi_dsub>
 8003872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003876:	f7fd f8a1 	bl	80009bc <__aeabi_dcmplt>
 800387a:	2800      	cmp	r0, #0
 800387c:	f040 80b6 	bne.w	80039ec <_dtoa_r+0x6e4>
 8003880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003882:	429f      	cmp	r7, r3
 8003884:	f43f af7a 	beq.w	800377c <_dtoa_r+0x474>
 8003888:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800388c:	2200      	movs	r2, #0
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <_dtoa_r+0x5b0>)
 8003890:	f7fc fe22 	bl	80004d8 <__aeabi_dmul>
 8003894:	2200      	movs	r2, #0
 8003896:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800389a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <_dtoa_r+0x5b0>)
 80038a0:	f7fc fe1a 	bl	80004d8 <__aeabi_dmul>
 80038a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038a8:	e7c3      	b.n	8003832 <_dtoa_r+0x52a>
 80038aa:	bf00      	nop
 80038ac:	080057d8 	.word	0x080057d8
 80038b0:	080057b0 	.word	0x080057b0
 80038b4:	3ff00000 	.word	0x3ff00000
 80038b8:	40240000 	.word	0x40240000
 80038bc:	401c0000 	.word	0x401c0000
 80038c0:	40140000 	.word	0x40140000
 80038c4:	3fe00000 	.word	0x3fe00000
 80038c8:	4630      	mov	r0, r6
 80038ca:	4639      	mov	r1, r7
 80038cc:	f7fc fe04 	bl	80004d8 <__aeabi_dmul>
 80038d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80038d6:	9c08      	ldr	r4, [sp, #32]
 80038d8:	9314      	str	r3, [sp, #80]	; 0x50
 80038da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038de:	f7fd f8ab 	bl	8000a38 <__aeabi_d2iz>
 80038e2:	9015      	str	r0, [sp, #84]	; 0x54
 80038e4:	f7fc fd8e 	bl	8000404 <__aeabi_i2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038f0:	f7fc fc3a 	bl	8000168 <__aeabi_dsub>
 80038f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038f6:	4606      	mov	r6, r0
 80038f8:	3330      	adds	r3, #48	; 0x30
 80038fa:	f804 3b01 	strb.w	r3, [r4], #1
 80038fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003900:	460f      	mov	r7, r1
 8003902:	429c      	cmp	r4, r3
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	d124      	bne.n	8003954 <_dtoa_r+0x64c>
 800390a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800390e:	4bb3      	ldr	r3, [pc, #716]	; (8003bdc <_dtoa_r+0x8d4>)
 8003910:	f7fc fc2c 	bl	800016c <__adddf3>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4630      	mov	r0, r6
 800391a:	4639      	mov	r1, r7
 800391c:	f7fd f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8003920:	2800      	cmp	r0, #0
 8003922:	d162      	bne.n	80039ea <_dtoa_r+0x6e2>
 8003924:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003928:	2000      	movs	r0, #0
 800392a:	49ac      	ldr	r1, [pc, #688]	; (8003bdc <_dtoa_r+0x8d4>)
 800392c:	f7fc fc1c 	bl	8000168 <__aeabi_dsub>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4630      	mov	r0, r6
 8003936:	4639      	mov	r1, r7
 8003938:	f7fd f840 	bl	80009bc <__aeabi_dcmplt>
 800393c:	2800      	cmp	r0, #0
 800393e:	f43f af1d 	beq.w	800377c <_dtoa_r+0x474>
 8003942:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003944:	1e7b      	subs	r3, r7, #1
 8003946:	9314      	str	r3, [sp, #80]	; 0x50
 8003948:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d0f8      	beq.n	8003942 <_dtoa_r+0x63a>
 8003950:	46c1      	mov	r9, r8
 8003952:	e03a      	b.n	80039ca <_dtoa_r+0x6c2>
 8003954:	4ba2      	ldr	r3, [pc, #648]	; (8003be0 <_dtoa_r+0x8d8>)
 8003956:	f7fc fdbf 	bl	80004d8 <__aeabi_dmul>
 800395a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800395e:	e7bc      	b.n	80038da <_dtoa_r+0x5d2>
 8003960:	9f08      	ldr	r7, [sp, #32]
 8003962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800396a:	f7fc fedf 	bl	800072c <__aeabi_ddiv>
 800396e:	f7fd f863 	bl	8000a38 <__aeabi_d2iz>
 8003972:	4604      	mov	r4, r0
 8003974:	f7fc fd46 	bl	8000404 <__aeabi_i2d>
 8003978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800397c:	f7fc fdac 	bl	80004d8 <__aeabi_dmul>
 8003980:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003984:	460b      	mov	r3, r1
 8003986:	4602      	mov	r2, r0
 8003988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800398c:	f7fc fbec 	bl	8000168 <__aeabi_dsub>
 8003990:	f807 6b01 	strb.w	r6, [r7], #1
 8003994:	9e08      	ldr	r6, [sp, #32]
 8003996:	9b02      	ldr	r3, [sp, #8]
 8003998:	1bbe      	subs	r6, r7, r6
 800399a:	42b3      	cmp	r3, r6
 800399c:	d13a      	bne.n	8003a14 <_dtoa_r+0x70c>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	f7fc fbe3 	bl	800016c <__adddf3>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039b2:	f7fd f821 	bl	80009f8 <__aeabi_dcmpgt>
 80039b6:	bb58      	cbnz	r0, 8003a10 <_dtoa_r+0x708>
 80039b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039c0:	f7fc fff2 	bl	80009a8 <__aeabi_dcmpeq>
 80039c4:	b108      	cbz	r0, 80039ca <_dtoa_r+0x6c2>
 80039c6:	07e1      	lsls	r1, r4, #31
 80039c8:	d422      	bmi.n	8003a10 <_dtoa_r+0x708>
 80039ca:	4628      	mov	r0, r5
 80039cc:	4651      	mov	r1, sl
 80039ce:	f000 faf1 	bl	8003fb4 <_Bfree>
 80039d2:	2300      	movs	r3, #0
 80039d4:	703b      	strb	r3, [r7, #0]
 80039d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80039d8:	f109 0001 	add.w	r0, r9, #1
 80039dc:	6018      	str	r0, [r3, #0]
 80039de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f43f acdf 	beq.w	80033a4 <_dtoa_r+0x9c>
 80039e6:	601f      	str	r7, [r3, #0]
 80039e8:	e4dc      	b.n	80033a4 <_dtoa_r+0x9c>
 80039ea:	4627      	mov	r7, r4
 80039ec:	463b      	mov	r3, r7
 80039ee:	461f      	mov	r7, r3
 80039f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80039f4:	2a39      	cmp	r2, #57	; 0x39
 80039f6:	d107      	bne.n	8003a08 <_dtoa_r+0x700>
 80039f8:	9a08      	ldr	r2, [sp, #32]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d1f7      	bne.n	80039ee <_dtoa_r+0x6e6>
 80039fe:	2230      	movs	r2, #48	; 0x30
 8003a00:	9908      	ldr	r1, [sp, #32]
 8003a02:	f108 0801 	add.w	r8, r8, #1
 8003a06:	700a      	strb	r2, [r1, #0]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	3201      	adds	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e79f      	b.n	8003950 <_dtoa_r+0x648>
 8003a10:	46c8      	mov	r8, r9
 8003a12:	e7eb      	b.n	80039ec <_dtoa_r+0x6e4>
 8003a14:	2200      	movs	r2, #0
 8003a16:	4b72      	ldr	r3, [pc, #456]	; (8003be0 <_dtoa_r+0x8d8>)
 8003a18:	f7fc fd5e 	bl	80004d8 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2300      	movs	r3, #0
 8003a28:	f7fc ffbe 	bl	80009a8 <__aeabi_dcmpeq>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d098      	beq.n	8003962 <_dtoa_r+0x65a>
 8003a30:	e7cb      	b.n	80039ca <_dtoa_r+0x6c2>
 8003a32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	f000 80cd 	beq.w	8003bd4 <_dtoa_r+0x8cc>
 8003a3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a3c:	2a01      	cmp	r2, #1
 8003a3e:	f300 80af 	bgt.w	8003ba0 <_dtoa_r+0x898>
 8003a42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	f000 80a7 	beq.w	8003b98 <_dtoa_r+0x890>
 8003a4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003a4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003a50:	9f06      	ldr	r7, [sp, #24]
 8003a52:	9a06      	ldr	r2, [sp, #24]
 8003a54:	2101      	movs	r1, #1
 8003a56:	441a      	add	r2, r3
 8003a58:	9206      	str	r2, [sp, #24]
 8003a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	441a      	add	r2, r3
 8003a60:	9209      	str	r2, [sp, #36]	; 0x24
 8003a62:	f000 fb61 	bl	8004128 <__i2b>
 8003a66:	4606      	mov	r6, r0
 8003a68:	2f00      	cmp	r7, #0
 8003a6a:	dd0c      	ble.n	8003a86 <_dtoa_r+0x77e>
 8003a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	dd09      	ble.n	8003a86 <_dtoa_r+0x77e>
 8003a72:	42bb      	cmp	r3, r7
 8003a74:	bfa8      	it	ge
 8003a76:	463b      	movge	r3, r7
 8003a78:	9a06      	ldr	r2, [sp, #24]
 8003a7a:	1aff      	subs	r7, r7, r3
 8003a7c:	1ad2      	subs	r2, r2, r3
 8003a7e:	9206      	str	r2, [sp, #24]
 8003a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	9309      	str	r3, [sp, #36]	; 0x24
 8003a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a88:	b1f3      	cbz	r3, 8003ac8 <_dtoa_r+0x7c0>
 8003a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80a9 	beq.w	8003be4 <_dtoa_r+0x8dc>
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	dd10      	ble.n	8003ab8 <_dtoa_r+0x7b0>
 8003a96:	4631      	mov	r1, r6
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 fbfe 	bl	800429c <__pow5mult>
 8003aa0:	4652      	mov	r2, sl
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f000 fb54 	bl	8004154 <__multiply>
 8003aac:	4680      	mov	r8, r0
 8003aae:	4651      	mov	r1, sl
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 fa7f 	bl	8003fb4 <_Bfree>
 8003ab6:	46c2      	mov	sl, r8
 8003ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aba:	1b1a      	subs	r2, r3, r4
 8003abc:	d004      	beq.n	8003ac8 <_dtoa_r+0x7c0>
 8003abe:	4651      	mov	r1, sl
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 fbeb 	bl	800429c <__pow5mult>
 8003ac6:	4682      	mov	sl, r0
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4628      	mov	r0, r5
 8003acc:	f000 fb2c 	bl	8004128 <__i2b>
 8003ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f340 8087 	ble.w	8003be8 <_dtoa_r+0x8e0>
 8003ada:	461a      	mov	r2, r3
 8003adc:	4601      	mov	r1, r0
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 fbdc 	bl	800429c <__pow5mult>
 8003ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f340 8080 	ble.w	8003bee <_dtoa_r+0x8e6>
 8003aee:	f04f 0800 	mov.w	r8, #0
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003af8:	6918      	ldr	r0, [r3, #16]
 8003afa:	f000 fac7 	bl	800408c <__hi0bits>
 8003afe:	f1c0 0020 	rsb	r0, r0, #32
 8003b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b04:	4418      	add	r0, r3
 8003b06:	f010 001f 	ands.w	r0, r0, #31
 8003b0a:	f000 8092 	beq.w	8003c32 <_dtoa_r+0x92a>
 8003b0e:	f1c0 0320 	rsb	r3, r0, #32
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	f340 808a 	ble.w	8003c2c <_dtoa_r+0x924>
 8003b18:	f1c0 001c 	rsb	r0, r0, #28
 8003b1c:	9b06      	ldr	r3, [sp, #24]
 8003b1e:	4407      	add	r7, r0
 8003b20:	4403      	add	r3, r0
 8003b22:	9306      	str	r3, [sp, #24]
 8003b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b26:	4403      	add	r3, r0
 8003b28:	9309      	str	r3, [sp, #36]	; 0x24
 8003b2a:	9b06      	ldr	r3, [sp, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	dd05      	ble.n	8003b3c <_dtoa_r+0x834>
 8003b30:	4651      	mov	r1, sl
 8003b32:	461a      	mov	r2, r3
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 fc0b 	bl	8004350 <__lshift>
 8003b3a:	4682      	mov	sl, r0
 8003b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	dd05      	ble.n	8003b4e <_dtoa_r+0x846>
 8003b42:	4621      	mov	r1, r4
 8003b44:	461a      	mov	r2, r3
 8003b46:	4628      	mov	r0, r5
 8003b48:	f000 fc02 	bl	8004350 <__lshift>
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d070      	beq.n	8003c36 <_dtoa_r+0x92e>
 8003b54:	4621      	mov	r1, r4
 8003b56:	4650      	mov	r0, sl
 8003b58:	f000 fc66 	bl	8004428 <__mcmp>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	da6a      	bge.n	8003c36 <_dtoa_r+0x92e>
 8003b60:	2300      	movs	r3, #0
 8003b62:	4651      	mov	r1, sl
 8003b64:	220a      	movs	r2, #10
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 fa46 	bl	8003ff8 <__multadd>
 8003b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b6e:	4682      	mov	sl, r0
 8003b70:	f109 39ff 	add.w	r9, r9, #4294967295
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8193 	beq.w	8003ea0 <_dtoa_r+0xb98>
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	220a      	movs	r2, #10
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 fa39 	bl	8003ff8 <__multadd>
 8003b86:	f1bb 0f00 	cmp.w	fp, #0
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	f300 8093 	bgt.w	8003cb6 <_dtoa_r+0x9ae>
 8003b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	dc57      	bgt.n	8003c46 <_dtoa_r+0x93e>
 8003b96:	e08e      	b.n	8003cb6 <_dtoa_r+0x9ae>
 8003b98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003b9e:	e756      	b.n	8003a4e <_dtoa_r+0x746>
 8003ba0:	9b02      	ldr	r3, [sp, #8]
 8003ba2:	1e5c      	subs	r4, r3, #1
 8003ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	bfb7      	itett	lt
 8003baa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003bac:	1b1c      	subge	r4, r3, r4
 8003bae:	1ae2      	sublt	r2, r4, r3
 8003bb0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003bb2:	bfbe      	ittt	lt
 8003bb4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003bb6:	189b      	addlt	r3, r3, r2
 8003bb8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	bfb8      	it	lt
 8003bbe:	2400      	movlt	r4, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bfbb      	ittet	lt
 8003bc4:	9b06      	ldrlt	r3, [sp, #24]
 8003bc6:	9a02      	ldrlt	r2, [sp, #8]
 8003bc8:	9f06      	ldrge	r7, [sp, #24]
 8003bca:	1a9f      	sublt	r7, r3, r2
 8003bcc:	bfac      	ite	ge
 8003bce:	9b02      	ldrge	r3, [sp, #8]
 8003bd0:	2300      	movlt	r3, #0
 8003bd2:	e73e      	b.n	8003a52 <_dtoa_r+0x74a>
 8003bd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003bd6:	9f06      	ldr	r7, [sp, #24]
 8003bd8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003bda:	e745      	b.n	8003a68 <_dtoa_r+0x760>
 8003bdc:	3fe00000 	.word	0x3fe00000
 8003be0:	40240000 	.word	0x40240000
 8003be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003be6:	e76a      	b.n	8003abe <_dtoa_r+0x7b6>
 8003be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	dc19      	bgt.n	8003c22 <_dtoa_r+0x91a>
 8003bee:	9b04      	ldr	r3, [sp, #16]
 8003bf0:	b9bb      	cbnz	r3, 8003c22 <_dtoa_r+0x91a>
 8003bf2:	9b05      	ldr	r3, [sp, #20]
 8003bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf8:	b99b      	cbnz	r3, 8003c22 <_dtoa_r+0x91a>
 8003bfa:	9b05      	ldr	r3, [sp, #20]
 8003bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c00:	0d1b      	lsrs	r3, r3, #20
 8003c02:	051b      	lsls	r3, r3, #20
 8003c04:	b183      	cbz	r3, 8003c28 <_dtoa_r+0x920>
 8003c06:	f04f 0801 	mov.w	r8, #1
 8003c0a:	9b06      	ldr	r3, [sp, #24]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	9306      	str	r3, [sp, #24]
 8003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	9309      	str	r3, [sp, #36]	; 0x24
 8003c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f47f af6a 	bne.w	8003af2 <_dtoa_r+0x7ea>
 8003c1e:	2001      	movs	r0, #1
 8003c20:	e76f      	b.n	8003b02 <_dtoa_r+0x7fa>
 8003c22:	f04f 0800 	mov.w	r8, #0
 8003c26:	e7f6      	b.n	8003c16 <_dtoa_r+0x90e>
 8003c28:	4698      	mov	r8, r3
 8003c2a:	e7f4      	b.n	8003c16 <_dtoa_r+0x90e>
 8003c2c:	f43f af7d 	beq.w	8003b2a <_dtoa_r+0x822>
 8003c30:	4618      	mov	r0, r3
 8003c32:	301c      	adds	r0, #28
 8003c34:	e772      	b.n	8003b1c <_dtoa_r+0x814>
 8003c36:	9b02      	ldr	r3, [sp, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	dc36      	bgt.n	8003caa <_dtoa_r+0x9a2>
 8003c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	dd33      	ble.n	8003caa <_dtoa_r+0x9a2>
 8003c42:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003c46:	f1bb 0f00 	cmp.w	fp, #0
 8003c4a:	d10d      	bne.n	8003c68 <_dtoa_r+0x960>
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	465b      	mov	r3, fp
 8003c50:	2205      	movs	r2, #5
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 f9d0 	bl	8003ff8 <__multadd>
 8003c58:	4601      	mov	r1, r0
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4650      	mov	r0, sl
 8003c5e:	f000 fbe3 	bl	8004428 <__mcmp>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	f73f adb6 	bgt.w	80037d4 <_dtoa_r+0x4cc>
 8003c68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c6a:	9f08      	ldr	r7, [sp, #32]
 8003c6c:	ea6f 0903 	mvn.w	r9, r3
 8003c70:	f04f 0800 	mov.w	r8, #0
 8003c74:	4621      	mov	r1, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 f99c 	bl	8003fb4 <_Bfree>
 8003c7c:	2e00      	cmp	r6, #0
 8003c7e:	f43f aea4 	beq.w	80039ca <_dtoa_r+0x6c2>
 8003c82:	f1b8 0f00 	cmp.w	r8, #0
 8003c86:	d005      	beq.n	8003c94 <_dtoa_r+0x98c>
 8003c88:	45b0      	cmp	r8, r6
 8003c8a:	d003      	beq.n	8003c94 <_dtoa_r+0x98c>
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 f990 	bl	8003fb4 <_Bfree>
 8003c94:	4631      	mov	r1, r6
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 f98c 	bl	8003fb4 <_Bfree>
 8003c9c:	e695      	b.n	80039ca <_dtoa_r+0x6c2>
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	4626      	mov	r6, r4
 8003ca2:	e7e1      	b.n	8003c68 <_dtoa_r+0x960>
 8003ca4:	46c1      	mov	r9, r8
 8003ca6:	4626      	mov	r6, r4
 8003ca8:	e594      	b.n	80037d4 <_dtoa_r+0x4cc>
 8003caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cac:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80fc 	beq.w	8003eae <_dtoa_r+0xba6>
 8003cb6:	2f00      	cmp	r7, #0
 8003cb8:	dd05      	ble.n	8003cc6 <_dtoa_r+0x9be>
 8003cba:	4631      	mov	r1, r6
 8003cbc:	463a      	mov	r2, r7
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 fb46 	bl	8004350 <__lshift>
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	f1b8 0f00 	cmp.w	r8, #0
 8003cca:	d05c      	beq.n	8003d86 <_dtoa_r+0xa7e>
 8003ccc:	4628      	mov	r0, r5
 8003cce:	6871      	ldr	r1, [r6, #4]
 8003cd0:	f000 f930 	bl	8003f34 <_Balloc>
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	b928      	cbnz	r0, 8003ce4 <_dtoa_r+0x9dc>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003cde:	4b7e      	ldr	r3, [pc, #504]	; (8003ed8 <_dtoa_r+0xbd0>)
 8003ce0:	f7ff bb26 	b.w	8003330 <_dtoa_r+0x28>
 8003ce4:	6932      	ldr	r2, [r6, #16]
 8003ce6:	f106 010c 	add.w	r1, r6, #12
 8003cea:	3202      	adds	r2, #2
 8003cec:	0092      	lsls	r2, r2, #2
 8003cee:	300c      	adds	r0, #12
 8003cf0:	f000 f912 	bl	8003f18 <memcpy>
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 fb29 	bl	8004350 <__lshift>
 8003cfe:	46b0      	mov	r8, r6
 8003d00:	4606      	mov	r6, r0
 8003d02:	9b08      	ldr	r3, [sp, #32]
 8003d04:	3301      	adds	r3, #1
 8003d06:	9302      	str	r3, [sp, #8]
 8003d08:	9b08      	ldr	r3, [sp, #32]
 8003d0a:	445b      	add	r3, fp
 8003d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8003d0e:	9b04      	ldr	r3, [sp, #16]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	9309      	str	r3, [sp, #36]	; 0x24
 8003d16:	9b02      	ldr	r3, [sp, #8]
 8003d18:	4621      	mov	r1, r4
 8003d1a:	4650      	mov	r0, sl
 8003d1c:	f103 3bff 	add.w	fp, r3, #4294967295
 8003d20:	f7ff fa64 	bl	80031ec <quorem>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4641      	mov	r1, r8
 8003d28:	3330      	adds	r3, #48	; 0x30
 8003d2a:	9004      	str	r0, [sp, #16]
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d30:	f000 fb7a 	bl	8004428 <__mcmp>
 8003d34:	4632      	mov	r2, r6
 8003d36:	9006      	str	r0, [sp, #24]
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 fb90 	bl	8004460 <__mdiff>
 8003d40:	68c2      	ldr	r2, [r0, #12]
 8003d42:	4607      	mov	r7, r0
 8003d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d46:	bb02      	cbnz	r2, 8003d8a <_dtoa_r+0xa82>
 8003d48:	4601      	mov	r1, r0
 8003d4a:	4650      	mov	r0, sl
 8003d4c:	f000 fb6c 	bl	8004428 <__mcmp>
 8003d50:	4602      	mov	r2, r0
 8003d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d54:	4639      	mov	r1, r7
 8003d56:	4628      	mov	r0, r5
 8003d58:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003d5c:	f000 f92a 	bl	8003fb4 <_Bfree>
 8003d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d64:	9f02      	ldr	r7, [sp, #8]
 8003d66:	ea43 0102 	orr.w	r1, r3, r2
 8003d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d70:	d10d      	bne.n	8003d8e <_dtoa_r+0xa86>
 8003d72:	2b39      	cmp	r3, #57	; 0x39
 8003d74:	d027      	beq.n	8003dc6 <_dtoa_r+0xabe>
 8003d76:	9a06      	ldr	r2, [sp, #24]
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	dd01      	ble.n	8003d80 <_dtoa_r+0xa78>
 8003d7c:	9b04      	ldr	r3, [sp, #16]
 8003d7e:	3331      	adds	r3, #49	; 0x31
 8003d80:	f88b 3000 	strb.w	r3, [fp]
 8003d84:	e776      	b.n	8003c74 <_dtoa_r+0x96c>
 8003d86:	4630      	mov	r0, r6
 8003d88:	e7b9      	b.n	8003cfe <_dtoa_r+0x9f6>
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	e7e2      	b.n	8003d54 <_dtoa_r+0xa4c>
 8003d8e:	9906      	ldr	r1, [sp, #24]
 8003d90:	2900      	cmp	r1, #0
 8003d92:	db04      	blt.n	8003d9e <_dtoa_r+0xa96>
 8003d94:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003d96:	4301      	orrs	r1, r0
 8003d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d9a:	4301      	orrs	r1, r0
 8003d9c:	d120      	bne.n	8003de0 <_dtoa_r+0xad8>
 8003d9e:	2a00      	cmp	r2, #0
 8003da0:	ddee      	ble.n	8003d80 <_dtoa_r+0xa78>
 8003da2:	4651      	mov	r1, sl
 8003da4:	2201      	movs	r2, #1
 8003da6:	4628      	mov	r0, r5
 8003da8:	9302      	str	r3, [sp, #8]
 8003daa:	f000 fad1 	bl	8004350 <__lshift>
 8003dae:	4621      	mov	r1, r4
 8003db0:	4682      	mov	sl, r0
 8003db2:	f000 fb39 	bl	8004428 <__mcmp>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	9b02      	ldr	r3, [sp, #8]
 8003dba:	dc02      	bgt.n	8003dc2 <_dtoa_r+0xaba>
 8003dbc:	d1e0      	bne.n	8003d80 <_dtoa_r+0xa78>
 8003dbe:	07da      	lsls	r2, r3, #31
 8003dc0:	d5de      	bpl.n	8003d80 <_dtoa_r+0xa78>
 8003dc2:	2b39      	cmp	r3, #57	; 0x39
 8003dc4:	d1da      	bne.n	8003d7c <_dtoa_r+0xa74>
 8003dc6:	2339      	movs	r3, #57	; 0x39
 8003dc8:	f88b 3000 	strb.w	r3, [fp]
 8003dcc:	463b      	mov	r3, r7
 8003dce:	461f      	mov	r7, r3
 8003dd0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	2a39      	cmp	r2, #57	; 0x39
 8003dd8:	d050      	beq.n	8003e7c <_dtoa_r+0xb74>
 8003dda:	3201      	adds	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e749      	b.n	8003c74 <_dtoa_r+0x96c>
 8003de0:	2a00      	cmp	r2, #0
 8003de2:	dd03      	ble.n	8003dec <_dtoa_r+0xae4>
 8003de4:	2b39      	cmp	r3, #57	; 0x39
 8003de6:	d0ee      	beq.n	8003dc6 <_dtoa_r+0xabe>
 8003de8:	3301      	adds	r3, #1
 8003dea:	e7c9      	b.n	8003d80 <_dtoa_r+0xa78>
 8003dec:	9a02      	ldr	r2, [sp, #8]
 8003dee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003df0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003df4:	428a      	cmp	r2, r1
 8003df6:	d02a      	beq.n	8003e4e <_dtoa_r+0xb46>
 8003df8:	4651      	mov	r1, sl
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	220a      	movs	r2, #10
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 f8fa 	bl	8003ff8 <__multadd>
 8003e04:	45b0      	cmp	r8, r6
 8003e06:	4682      	mov	sl, r0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f04f 020a 	mov.w	r2, #10
 8003e10:	4641      	mov	r1, r8
 8003e12:	4628      	mov	r0, r5
 8003e14:	d107      	bne.n	8003e26 <_dtoa_r+0xb1e>
 8003e16:	f000 f8ef 	bl	8003ff8 <__multadd>
 8003e1a:	4680      	mov	r8, r0
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	9b02      	ldr	r3, [sp, #8]
 8003e20:	3301      	adds	r3, #1
 8003e22:	9302      	str	r3, [sp, #8]
 8003e24:	e777      	b.n	8003d16 <_dtoa_r+0xa0e>
 8003e26:	f000 f8e7 	bl	8003ff8 <__multadd>
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4680      	mov	r8, r0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	220a      	movs	r2, #10
 8003e32:	4628      	mov	r0, r5
 8003e34:	f000 f8e0 	bl	8003ff8 <__multadd>
 8003e38:	4606      	mov	r6, r0
 8003e3a:	e7f0      	b.n	8003e1e <_dtoa_r+0xb16>
 8003e3c:	f1bb 0f00 	cmp.w	fp, #0
 8003e40:	bfcc      	ite	gt
 8003e42:	465f      	movgt	r7, fp
 8003e44:	2701      	movle	r7, #1
 8003e46:	f04f 0800 	mov.w	r8, #0
 8003e4a:	9a08      	ldr	r2, [sp, #32]
 8003e4c:	4417      	add	r7, r2
 8003e4e:	4651      	mov	r1, sl
 8003e50:	2201      	movs	r2, #1
 8003e52:	4628      	mov	r0, r5
 8003e54:	9302      	str	r3, [sp, #8]
 8003e56:	f000 fa7b 	bl	8004350 <__lshift>
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4682      	mov	sl, r0
 8003e5e:	f000 fae3 	bl	8004428 <__mcmp>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	dcb2      	bgt.n	8003dcc <_dtoa_r+0xac4>
 8003e66:	d102      	bne.n	8003e6e <_dtoa_r+0xb66>
 8003e68:	9b02      	ldr	r3, [sp, #8]
 8003e6a:	07db      	lsls	r3, r3, #31
 8003e6c:	d4ae      	bmi.n	8003dcc <_dtoa_r+0xac4>
 8003e6e:	463b      	mov	r3, r7
 8003e70:	461f      	mov	r7, r3
 8003e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e76:	2a30      	cmp	r2, #48	; 0x30
 8003e78:	d0fa      	beq.n	8003e70 <_dtoa_r+0xb68>
 8003e7a:	e6fb      	b.n	8003c74 <_dtoa_r+0x96c>
 8003e7c:	9a08      	ldr	r2, [sp, #32]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d1a5      	bne.n	8003dce <_dtoa_r+0xac6>
 8003e82:	2331      	movs	r3, #49	; 0x31
 8003e84:	f109 0901 	add.w	r9, r9, #1
 8003e88:	7013      	strb	r3, [r2, #0]
 8003e8a:	e6f3      	b.n	8003c74 <_dtoa_r+0x96c>
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <_dtoa_r+0xbd4>)
 8003e8e:	f7ff baa7 	b.w	80033e0 <_dtoa_r+0xd8>
 8003e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f aa80 	bne.w	800339a <_dtoa_r+0x92>
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <_dtoa_r+0xbd8>)
 8003e9c:	f7ff baa0 	b.w	80033e0 <_dtoa_r+0xd8>
 8003ea0:	f1bb 0f00 	cmp.w	fp, #0
 8003ea4:	dc03      	bgt.n	8003eae <_dtoa_r+0xba6>
 8003ea6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f73f aecc 	bgt.w	8003c46 <_dtoa_r+0x93e>
 8003eae:	9f08      	ldr	r7, [sp, #32]
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4650      	mov	r0, sl
 8003eb4:	f7ff f99a 	bl	80031ec <quorem>
 8003eb8:	9a08      	ldr	r2, [sp, #32]
 8003eba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003ebe:	f807 3b01 	strb.w	r3, [r7], #1
 8003ec2:	1aba      	subs	r2, r7, r2
 8003ec4:	4593      	cmp	fp, r2
 8003ec6:	ddb9      	ble.n	8003e3c <_dtoa_r+0xb34>
 8003ec8:	4651      	mov	r1, sl
 8003eca:	2300      	movs	r3, #0
 8003ecc:	220a      	movs	r2, #10
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 f892 	bl	8003ff8 <__multadd>
 8003ed4:	4682      	mov	sl, r0
 8003ed6:	e7eb      	b.n	8003eb0 <_dtoa_r+0xba8>
 8003ed8:	0800573f 	.word	0x0800573f
 8003edc:	08005698 	.word	0x08005698
 8003ee0:	080056bc 	.word	0x080056bc

08003ee4 <_localeconv_r>:
 8003ee4:	4800      	ldr	r0, [pc, #0]	; (8003ee8 <_localeconv_r+0x4>)
 8003ee6:	4770      	bx	lr
 8003ee8:	20000160 	.word	0x20000160

08003eec <malloc>:
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <malloc+0xc>)
 8003eee:	4601      	mov	r1, r0
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f000 bbfb 	b.w	80046ec <_malloc_r>
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c

08003efc <memchr>:
 8003efc:	4603      	mov	r3, r0
 8003efe:	b510      	push	{r4, lr}
 8003f00:	b2c9      	uxtb	r1, r1
 8003f02:	4402      	add	r2, r0
 8003f04:	4293      	cmp	r3, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	d101      	bne.n	8003f0e <memchr+0x12>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e003      	b.n	8003f16 <memchr+0x1a>
 8003f0e:	7804      	ldrb	r4, [r0, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	428c      	cmp	r4, r1
 8003f14:	d1f6      	bne.n	8003f04 <memchr+0x8>
 8003f16:	bd10      	pop	{r4, pc}

08003f18 <memcpy>:
 8003f18:	440a      	add	r2, r1
 8003f1a:	4291      	cmp	r1, r2
 8003f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f20:	d100      	bne.n	8003f24 <memcpy+0xc>
 8003f22:	4770      	bx	lr
 8003f24:	b510      	push	{r4, lr}
 8003f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f2a:	4291      	cmp	r1, r2
 8003f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f30:	d1f9      	bne.n	8003f26 <memcpy+0xe>
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <_Balloc>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003f38:	4604      	mov	r4, r0
 8003f3a:	460d      	mov	r5, r1
 8003f3c:	b976      	cbnz	r6, 8003f5c <_Balloc+0x28>
 8003f3e:	2010      	movs	r0, #16
 8003f40:	f7ff ffd4 	bl	8003eec <malloc>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6260      	str	r0, [r4, #36]	; 0x24
 8003f48:	b920      	cbnz	r0, 8003f54 <_Balloc+0x20>
 8003f4a:	2166      	movs	r1, #102	; 0x66
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <_Balloc+0x78>)
 8003f4e:	4818      	ldr	r0, [pc, #96]	; (8003fb0 <_Balloc+0x7c>)
 8003f50:	f000 fd92 	bl	8004a78 <__assert_func>
 8003f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f58:	6006      	str	r6, [r0, #0]
 8003f5a:	60c6      	str	r6, [r0, #12]
 8003f5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f5e:	68f3      	ldr	r3, [r6, #12]
 8003f60:	b183      	cbz	r3, 8003f84 <_Balloc+0x50>
 8003f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003f6a:	b9b8      	cbnz	r0, 8003f9c <_Balloc+0x68>
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	fa01 f605 	lsl.w	r6, r1, r5
 8003f72:	1d72      	adds	r2, r6, #5
 8003f74:	4620      	mov	r0, r4
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	f000 fb5e 	bl	8004638 <_calloc_r>
 8003f7c:	b160      	cbz	r0, 8003f98 <_Balloc+0x64>
 8003f7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f82:	e00e      	b.n	8003fa2 <_Balloc+0x6e>
 8003f84:	2221      	movs	r2, #33	; 0x21
 8003f86:	2104      	movs	r1, #4
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f000 fb55 	bl	8004638 <_calloc_r>
 8003f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f90:	60f0      	str	r0, [r6, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e4      	bne.n	8003f62 <_Balloc+0x2e>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	6802      	ldr	r2, [r0, #0]
 8003f9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003fa8:	e7f7      	b.n	8003f9a <_Balloc+0x66>
 8003faa:	bf00      	nop
 8003fac:	080056c9 	.word	0x080056c9
 8003fb0:	08005750 	.word	0x08005750

08003fb4 <_Bfree>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003fb8:	4605      	mov	r5, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	b976      	cbnz	r6, 8003fdc <_Bfree+0x28>
 8003fbe:	2010      	movs	r0, #16
 8003fc0:	f7ff ff94 	bl	8003eec <malloc>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6268      	str	r0, [r5, #36]	; 0x24
 8003fc8:	b920      	cbnz	r0, 8003fd4 <_Bfree+0x20>
 8003fca:	218a      	movs	r1, #138	; 0x8a
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <_Bfree+0x3c>)
 8003fce:	4809      	ldr	r0, [pc, #36]	; (8003ff4 <_Bfree+0x40>)
 8003fd0:	f000 fd52 	bl	8004a78 <__assert_func>
 8003fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fd8:	6006      	str	r6, [r0, #0]
 8003fda:	60c6      	str	r6, [r0, #12]
 8003fdc:	b13c      	cbz	r4, 8003fee <_Bfree+0x3a>
 8003fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fe0:	6862      	ldr	r2, [r4, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fe8:	6021      	str	r1, [r4, #0]
 8003fea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	080056c9 	.word	0x080056c9
 8003ff4:	08005750 	.word	0x08005750

08003ff8 <__multadd>:
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	4698      	mov	r8, r3
 8003ffe:	460c      	mov	r4, r1
 8004000:	2300      	movs	r3, #0
 8004002:	690e      	ldr	r6, [r1, #16]
 8004004:	4607      	mov	r7, r0
 8004006:	f101 0014 	add.w	r0, r1, #20
 800400a:	6805      	ldr	r5, [r0, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	b2a9      	uxth	r1, r5
 8004010:	fb02 8101 	mla	r1, r2, r1, r8
 8004014:	0c2d      	lsrs	r5, r5, #16
 8004016:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800401a:	fb02 c505 	mla	r5, r2, r5, ip
 800401e:	b289      	uxth	r1, r1
 8004020:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004024:	429e      	cmp	r6, r3
 8004026:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800402a:	f840 1b04 	str.w	r1, [r0], #4
 800402e:	dcec      	bgt.n	800400a <__multadd+0x12>
 8004030:	f1b8 0f00 	cmp.w	r8, #0
 8004034:	d022      	beq.n	800407c <__multadd+0x84>
 8004036:	68a3      	ldr	r3, [r4, #8]
 8004038:	42b3      	cmp	r3, r6
 800403a:	dc19      	bgt.n	8004070 <__multadd+0x78>
 800403c:	6861      	ldr	r1, [r4, #4]
 800403e:	4638      	mov	r0, r7
 8004040:	3101      	adds	r1, #1
 8004042:	f7ff ff77 	bl	8003f34 <_Balloc>
 8004046:	4605      	mov	r5, r0
 8004048:	b928      	cbnz	r0, 8004056 <__multadd+0x5e>
 800404a:	4602      	mov	r2, r0
 800404c:	21b5      	movs	r1, #181	; 0xb5
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <__multadd+0x8c>)
 8004050:	480d      	ldr	r0, [pc, #52]	; (8004088 <__multadd+0x90>)
 8004052:	f000 fd11 	bl	8004a78 <__assert_func>
 8004056:	6922      	ldr	r2, [r4, #16]
 8004058:	f104 010c 	add.w	r1, r4, #12
 800405c:	3202      	adds	r2, #2
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	300c      	adds	r0, #12
 8004062:	f7ff ff59 	bl	8003f18 <memcpy>
 8004066:	4621      	mov	r1, r4
 8004068:	4638      	mov	r0, r7
 800406a:	f7ff ffa3 	bl	8003fb4 <_Bfree>
 800406e:	462c      	mov	r4, r5
 8004070:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004074:	3601      	adds	r6, #1
 8004076:	f8c3 8014 	str.w	r8, [r3, #20]
 800407a:	6126      	str	r6, [r4, #16]
 800407c:	4620      	mov	r0, r4
 800407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004082:	bf00      	nop
 8004084:	0800573f 	.word	0x0800573f
 8004088:	08005750 	.word	0x08005750

0800408c <__hi0bits>:
 800408c:	0c02      	lsrs	r2, r0, #16
 800408e:	0412      	lsls	r2, r2, #16
 8004090:	4603      	mov	r3, r0
 8004092:	b9ca      	cbnz	r2, 80040c8 <__hi0bits+0x3c>
 8004094:	0403      	lsls	r3, r0, #16
 8004096:	2010      	movs	r0, #16
 8004098:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800409c:	bf04      	itt	eq
 800409e:	021b      	lsleq	r3, r3, #8
 80040a0:	3008      	addeq	r0, #8
 80040a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80040a6:	bf04      	itt	eq
 80040a8:	011b      	lsleq	r3, r3, #4
 80040aa:	3004      	addeq	r0, #4
 80040ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80040b0:	bf04      	itt	eq
 80040b2:	009b      	lsleq	r3, r3, #2
 80040b4:	3002      	addeq	r0, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db05      	blt.n	80040c6 <__hi0bits+0x3a>
 80040ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80040be:	f100 0001 	add.w	r0, r0, #1
 80040c2:	bf08      	it	eq
 80040c4:	2020      	moveq	r0, #32
 80040c6:	4770      	bx	lr
 80040c8:	2000      	movs	r0, #0
 80040ca:	e7e5      	b.n	8004098 <__hi0bits+0xc>

080040cc <__lo0bits>:
 80040cc:	6803      	ldr	r3, [r0, #0]
 80040ce:	4602      	mov	r2, r0
 80040d0:	f013 0007 	ands.w	r0, r3, #7
 80040d4:	d00b      	beq.n	80040ee <__lo0bits+0x22>
 80040d6:	07d9      	lsls	r1, r3, #31
 80040d8:	d422      	bmi.n	8004120 <__lo0bits+0x54>
 80040da:	0798      	lsls	r0, r3, #30
 80040dc:	bf49      	itett	mi
 80040de:	085b      	lsrmi	r3, r3, #1
 80040e0:	089b      	lsrpl	r3, r3, #2
 80040e2:	2001      	movmi	r0, #1
 80040e4:	6013      	strmi	r3, [r2, #0]
 80040e6:	bf5c      	itt	pl
 80040e8:	2002      	movpl	r0, #2
 80040ea:	6013      	strpl	r3, [r2, #0]
 80040ec:	4770      	bx	lr
 80040ee:	b299      	uxth	r1, r3
 80040f0:	b909      	cbnz	r1, 80040f6 <__lo0bits+0x2a>
 80040f2:	2010      	movs	r0, #16
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80040fa:	bf04      	itt	eq
 80040fc:	0a1b      	lsreq	r3, r3, #8
 80040fe:	3008      	addeq	r0, #8
 8004100:	0719      	lsls	r1, r3, #28
 8004102:	bf04      	itt	eq
 8004104:	091b      	lsreq	r3, r3, #4
 8004106:	3004      	addeq	r0, #4
 8004108:	0799      	lsls	r1, r3, #30
 800410a:	bf04      	itt	eq
 800410c:	089b      	lsreq	r3, r3, #2
 800410e:	3002      	addeq	r0, #2
 8004110:	07d9      	lsls	r1, r3, #31
 8004112:	d403      	bmi.n	800411c <__lo0bits+0x50>
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	f100 0001 	add.w	r0, r0, #1
 800411a:	d003      	beq.n	8004124 <__lo0bits+0x58>
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4770      	bx	lr
 8004120:	2000      	movs	r0, #0
 8004122:	4770      	bx	lr
 8004124:	2020      	movs	r0, #32
 8004126:	4770      	bx	lr

08004128 <__i2b>:
 8004128:	b510      	push	{r4, lr}
 800412a:	460c      	mov	r4, r1
 800412c:	2101      	movs	r1, #1
 800412e:	f7ff ff01 	bl	8003f34 <_Balloc>
 8004132:	4602      	mov	r2, r0
 8004134:	b928      	cbnz	r0, 8004142 <__i2b+0x1a>
 8004136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <__i2b+0x24>)
 800413c:	4804      	ldr	r0, [pc, #16]	; (8004150 <__i2b+0x28>)
 800413e:	f000 fc9b 	bl	8004a78 <__assert_func>
 8004142:	2301      	movs	r3, #1
 8004144:	6144      	str	r4, [r0, #20]
 8004146:	6103      	str	r3, [r0, #16]
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	0800573f 	.word	0x0800573f
 8004150:	08005750 	.word	0x08005750

08004154 <__multiply>:
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	4614      	mov	r4, r2
 800415a:	690a      	ldr	r2, [r1, #16]
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	460d      	mov	r5, r1
 8004160:	429a      	cmp	r2, r3
 8004162:	bfbe      	ittt	lt
 8004164:	460b      	movlt	r3, r1
 8004166:	4625      	movlt	r5, r4
 8004168:	461c      	movlt	r4, r3
 800416a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800416e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004172:	68ab      	ldr	r3, [r5, #8]
 8004174:	6869      	ldr	r1, [r5, #4]
 8004176:	eb0a 0709 	add.w	r7, sl, r9
 800417a:	42bb      	cmp	r3, r7
 800417c:	b085      	sub	sp, #20
 800417e:	bfb8      	it	lt
 8004180:	3101      	addlt	r1, #1
 8004182:	f7ff fed7 	bl	8003f34 <_Balloc>
 8004186:	b930      	cbnz	r0, 8004196 <__multiply+0x42>
 8004188:	4602      	mov	r2, r0
 800418a:	f240 115d 	movw	r1, #349	; 0x15d
 800418e:	4b41      	ldr	r3, [pc, #260]	; (8004294 <__multiply+0x140>)
 8004190:	4841      	ldr	r0, [pc, #260]	; (8004298 <__multiply+0x144>)
 8004192:	f000 fc71 	bl	8004a78 <__assert_func>
 8004196:	f100 0614 	add.w	r6, r0, #20
 800419a:	4633      	mov	r3, r6
 800419c:	2200      	movs	r2, #0
 800419e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80041a2:	4543      	cmp	r3, r8
 80041a4:	d31e      	bcc.n	80041e4 <__multiply+0x90>
 80041a6:	f105 0c14 	add.w	ip, r5, #20
 80041aa:	f104 0314 	add.w	r3, r4, #20
 80041ae:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80041b2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	ebac 0205 	sub.w	r2, ip, r5
 80041bc:	3a15      	subs	r2, #21
 80041be:	f022 0203 	bic.w	r2, r2, #3
 80041c2:	3204      	adds	r2, #4
 80041c4:	f105 0115 	add.w	r1, r5, #21
 80041c8:	458c      	cmp	ip, r1
 80041ca:	bf38      	it	cc
 80041cc:	2204      	movcc	r2, #4
 80041ce:	9201      	str	r2, [sp, #4]
 80041d0:	9a02      	ldr	r2, [sp, #8]
 80041d2:	9303      	str	r3, [sp, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d808      	bhi.n	80041ea <__multiply+0x96>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	dc55      	bgt.n	8004288 <__multiply+0x134>
 80041dc:	6107      	str	r7, [r0, #16]
 80041de:	b005      	add	sp, #20
 80041e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e4:	f843 2b04 	str.w	r2, [r3], #4
 80041e8:	e7db      	b.n	80041a2 <__multiply+0x4e>
 80041ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80041ee:	f1ba 0f00 	cmp.w	sl, #0
 80041f2:	d020      	beq.n	8004236 <__multiply+0xe2>
 80041f4:	46b1      	mov	r9, r6
 80041f6:	2200      	movs	r2, #0
 80041f8:	f105 0e14 	add.w	lr, r5, #20
 80041fc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004200:	f8d9 b000 	ldr.w	fp, [r9]
 8004204:	b2a1      	uxth	r1, r4
 8004206:	fa1f fb8b 	uxth.w	fp, fp
 800420a:	fb0a b101 	mla	r1, sl, r1, fp
 800420e:	4411      	add	r1, r2
 8004210:	f8d9 2000 	ldr.w	r2, [r9]
 8004214:	0c24      	lsrs	r4, r4, #16
 8004216:	0c12      	lsrs	r2, r2, #16
 8004218:	fb0a 2404 	mla	r4, sl, r4, r2
 800421c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004220:	b289      	uxth	r1, r1
 8004222:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004226:	45f4      	cmp	ip, lr
 8004228:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800422c:	f849 1b04 	str.w	r1, [r9], #4
 8004230:	d8e4      	bhi.n	80041fc <__multiply+0xa8>
 8004232:	9901      	ldr	r1, [sp, #4]
 8004234:	5072      	str	r2, [r6, r1]
 8004236:	9a03      	ldr	r2, [sp, #12]
 8004238:	3304      	adds	r3, #4
 800423a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800423e:	f1b9 0f00 	cmp.w	r9, #0
 8004242:	d01f      	beq.n	8004284 <__multiply+0x130>
 8004244:	46b6      	mov	lr, r6
 8004246:	f04f 0a00 	mov.w	sl, #0
 800424a:	6834      	ldr	r4, [r6, #0]
 800424c:	f105 0114 	add.w	r1, r5, #20
 8004250:	880a      	ldrh	r2, [r1, #0]
 8004252:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004256:	b2a4      	uxth	r4, r4
 8004258:	fb09 b202 	mla	r2, r9, r2, fp
 800425c:	4492      	add	sl, r2
 800425e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004262:	f84e 4b04 	str.w	r4, [lr], #4
 8004266:	f851 4b04 	ldr.w	r4, [r1], #4
 800426a:	f8be 2000 	ldrh.w	r2, [lr]
 800426e:	0c24      	lsrs	r4, r4, #16
 8004270:	fb09 2404 	mla	r4, r9, r4, r2
 8004274:	458c      	cmp	ip, r1
 8004276:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800427a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800427e:	d8e7      	bhi.n	8004250 <__multiply+0xfc>
 8004280:	9a01      	ldr	r2, [sp, #4]
 8004282:	50b4      	str	r4, [r6, r2]
 8004284:	3604      	adds	r6, #4
 8004286:	e7a3      	b.n	80041d0 <__multiply+0x7c>
 8004288:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1a5      	bne.n	80041dc <__multiply+0x88>
 8004290:	3f01      	subs	r7, #1
 8004292:	e7a1      	b.n	80041d8 <__multiply+0x84>
 8004294:	0800573f 	.word	0x0800573f
 8004298:	08005750 	.word	0x08005750

0800429c <__pow5mult>:
 800429c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a0:	4615      	mov	r5, r2
 80042a2:	f012 0203 	ands.w	r2, r2, #3
 80042a6:	4606      	mov	r6, r0
 80042a8:	460f      	mov	r7, r1
 80042aa:	d007      	beq.n	80042bc <__pow5mult+0x20>
 80042ac:	4c25      	ldr	r4, [pc, #148]	; (8004344 <__pow5mult+0xa8>)
 80042ae:	3a01      	subs	r2, #1
 80042b0:	2300      	movs	r3, #0
 80042b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80042b6:	f7ff fe9f 	bl	8003ff8 <__multadd>
 80042ba:	4607      	mov	r7, r0
 80042bc:	10ad      	asrs	r5, r5, #2
 80042be:	d03d      	beq.n	800433c <__pow5mult+0xa0>
 80042c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80042c2:	b97c      	cbnz	r4, 80042e4 <__pow5mult+0x48>
 80042c4:	2010      	movs	r0, #16
 80042c6:	f7ff fe11 	bl	8003eec <malloc>
 80042ca:	4602      	mov	r2, r0
 80042cc:	6270      	str	r0, [r6, #36]	; 0x24
 80042ce:	b928      	cbnz	r0, 80042dc <__pow5mult+0x40>
 80042d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80042d4:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <__pow5mult+0xac>)
 80042d6:	481d      	ldr	r0, [pc, #116]	; (800434c <__pow5mult+0xb0>)
 80042d8:	f000 fbce 	bl	8004a78 <__assert_func>
 80042dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042e0:	6004      	str	r4, [r0, #0]
 80042e2:	60c4      	str	r4, [r0, #12]
 80042e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80042e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042ec:	b94c      	cbnz	r4, 8004302 <__pow5mult+0x66>
 80042ee:	f240 2171 	movw	r1, #625	; 0x271
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff ff18 	bl	8004128 <__i2b>
 80042f8:	2300      	movs	r3, #0
 80042fa:	4604      	mov	r4, r0
 80042fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004300:	6003      	str	r3, [r0, #0]
 8004302:	f04f 0900 	mov.w	r9, #0
 8004306:	07eb      	lsls	r3, r5, #31
 8004308:	d50a      	bpl.n	8004320 <__pow5mult+0x84>
 800430a:	4639      	mov	r1, r7
 800430c:	4622      	mov	r2, r4
 800430e:	4630      	mov	r0, r6
 8004310:	f7ff ff20 	bl	8004154 <__multiply>
 8004314:	4680      	mov	r8, r0
 8004316:	4639      	mov	r1, r7
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff fe4b 	bl	8003fb4 <_Bfree>
 800431e:	4647      	mov	r7, r8
 8004320:	106d      	asrs	r5, r5, #1
 8004322:	d00b      	beq.n	800433c <__pow5mult+0xa0>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	b938      	cbnz	r0, 8004338 <__pow5mult+0x9c>
 8004328:	4622      	mov	r2, r4
 800432a:	4621      	mov	r1, r4
 800432c:	4630      	mov	r0, r6
 800432e:	f7ff ff11 	bl	8004154 <__multiply>
 8004332:	6020      	str	r0, [r4, #0]
 8004334:	f8c0 9000 	str.w	r9, [r0]
 8004338:	4604      	mov	r4, r0
 800433a:	e7e4      	b.n	8004306 <__pow5mult+0x6a>
 800433c:	4638      	mov	r0, r7
 800433e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004342:	bf00      	nop
 8004344:	080058a0 	.word	0x080058a0
 8004348:	080056c9 	.word	0x080056c9
 800434c:	08005750 	.word	0x08005750

08004350 <__lshift>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	460c      	mov	r4, r1
 8004356:	4607      	mov	r7, r0
 8004358:	4691      	mov	r9, r2
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	6849      	ldr	r1, [r1, #4]
 800435e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004368:	f108 0601 	add.w	r6, r8, #1
 800436c:	42b3      	cmp	r3, r6
 800436e:	db0b      	blt.n	8004388 <__lshift+0x38>
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff fddf 	bl	8003f34 <_Balloc>
 8004376:	4605      	mov	r5, r0
 8004378:	b948      	cbnz	r0, 800438e <__lshift+0x3e>
 800437a:	4602      	mov	r2, r0
 800437c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <__lshift+0xd0>)
 8004382:	4828      	ldr	r0, [pc, #160]	; (8004424 <__lshift+0xd4>)
 8004384:	f000 fb78 	bl	8004a78 <__assert_func>
 8004388:	3101      	adds	r1, #1
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	e7ee      	b.n	800436c <__lshift+0x1c>
 800438e:	2300      	movs	r3, #0
 8004390:	f100 0114 	add.w	r1, r0, #20
 8004394:	f100 0210 	add.w	r2, r0, #16
 8004398:	4618      	mov	r0, r3
 800439a:	4553      	cmp	r3, sl
 800439c:	db33      	blt.n	8004406 <__lshift+0xb6>
 800439e:	6920      	ldr	r0, [r4, #16]
 80043a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043a4:	f104 0314 	add.w	r3, r4, #20
 80043a8:	f019 091f 	ands.w	r9, r9, #31
 80043ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80043b4:	d02b      	beq.n	800440e <__lshift+0xbe>
 80043b6:	468a      	mov	sl, r1
 80043b8:	2200      	movs	r2, #0
 80043ba:	f1c9 0e20 	rsb	lr, r9, #32
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	fa00 f009 	lsl.w	r0, r0, r9
 80043c4:	4302      	orrs	r2, r0
 80043c6:	f84a 2b04 	str.w	r2, [sl], #4
 80043ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ce:	459c      	cmp	ip, r3
 80043d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80043d4:	d8f3      	bhi.n	80043be <__lshift+0x6e>
 80043d6:	ebac 0304 	sub.w	r3, ip, r4
 80043da:	3b15      	subs	r3, #21
 80043dc:	f023 0303 	bic.w	r3, r3, #3
 80043e0:	3304      	adds	r3, #4
 80043e2:	f104 0015 	add.w	r0, r4, #21
 80043e6:	4584      	cmp	ip, r0
 80043e8:	bf38      	it	cc
 80043ea:	2304      	movcc	r3, #4
 80043ec:	50ca      	str	r2, [r1, r3]
 80043ee:	b10a      	cbz	r2, 80043f4 <__lshift+0xa4>
 80043f0:	f108 0602 	add.w	r6, r8, #2
 80043f4:	3e01      	subs	r6, #1
 80043f6:	4638      	mov	r0, r7
 80043f8:	4621      	mov	r1, r4
 80043fa:	612e      	str	r6, [r5, #16]
 80043fc:	f7ff fdda 	bl	8003fb4 <_Bfree>
 8004400:	4628      	mov	r0, r5
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	f842 0f04 	str.w	r0, [r2, #4]!
 800440a:	3301      	adds	r3, #1
 800440c:	e7c5      	b.n	800439a <__lshift+0x4a>
 800440e:	3904      	subs	r1, #4
 8004410:	f853 2b04 	ldr.w	r2, [r3], #4
 8004414:	459c      	cmp	ip, r3
 8004416:	f841 2f04 	str.w	r2, [r1, #4]!
 800441a:	d8f9      	bhi.n	8004410 <__lshift+0xc0>
 800441c:	e7ea      	b.n	80043f4 <__lshift+0xa4>
 800441e:	bf00      	nop
 8004420:	0800573f 	.word	0x0800573f
 8004424:	08005750 	.word	0x08005750

08004428 <__mcmp>:
 8004428:	4603      	mov	r3, r0
 800442a:	690a      	ldr	r2, [r1, #16]
 800442c:	6900      	ldr	r0, [r0, #16]
 800442e:	b530      	push	{r4, r5, lr}
 8004430:	1a80      	subs	r0, r0, r2
 8004432:	d10d      	bne.n	8004450 <__mcmp+0x28>
 8004434:	3314      	adds	r3, #20
 8004436:	3114      	adds	r1, #20
 8004438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800443c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004448:	4295      	cmp	r5, r2
 800444a:	d002      	beq.n	8004452 <__mcmp+0x2a>
 800444c:	d304      	bcc.n	8004458 <__mcmp+0x30>
 800444e:	2001      	movs	r0, #1
 8004450:	bd30      	pop	{r4, r5, pc}
 8004452:	42a3      	cmp	r3, r4
 8004454:	d3f4      	bcc.n	8004440 <__mcmp+0x18>
 8004456:	e7fb      	b.n	8004450 <__mcmp+0x28>
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e7f8      	b.n	8004450 <__mcmp+0x28>
	...

08004460 <__mdiff>:
 8004460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	460c      	mov	r4, r1
 8004466:	4606      	mov	r6, r0
 8004468:	4611      	mov	r1, r2
 800446a:	4620      	mov	r0, r4
 800446c:	4692      	mov	sl, r2
 800446e:	f7ff ffdb 	bl	8004428 <__mcmp>
 8004472:	1e05      	subs	r5, r0, #0
 8004474:	d111      	bne.n	800449a <__mdiff+0x3a>
 8004476:	4629      	mov	r1, r5
 8004478:	4630      	mov	r0, r6
 800447a:	f7ff fd5b 	bl	8003f34 <_Balloc>
 800447e:	4602      	mov	r2, r0
 8004480:	b928      	cbnz	r0, 800448e <__mdiff+0x2e>
 8004482:	f240 2132 	movw	r1, #562	; 0x232
 8004486:	4b3c      	ldr	r3, [pc, #240]	; (8004578 <__mdiff+0x118>)
 8004488:	483c      	ldr	r0, [pc, #240]	; (800457c <__mdiff+0x11c>)
 800448a:	f000 faf5 	bl	8004a78 <__assert_func>
 800448e:	2301      	movs	r3, #1
 8004490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004494:	4610      	mov	r0, r2
 8004496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449a:	bfa4      	itt	ge
 800449c:	4653      	movge	r3, sl
 800449e:	46a2      	movge	sl, r4
 80044a0:	4630      	mov	r0, r6
 80044a2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80044a6:	bfa6      	itte	ge
 80044a8:	461c      	movge	r4, r3
 80044aa:	2500      	movge	r5, #0
 80044ac:	2501      	movlt	r5, #1
 80044ae:	f7ff fd41 	bl	8003f34 <_Balloc>
 80044b2:	4602      	mov	r2, r0
 80044b4:	b918      	cbnz	r0, 80044be <__mdiff+0x5e>
 80044b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80044ba:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <__mdiff+0x118>)
 80044bc:	e7e4      	b.n	8004488 <__mdiff+0x28>
 80044be:	f100 0814 	add.w	r8, r0, #20
 80044c2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80044c6:	60c5      	str	r5, [r0, #12]
 80044c8:	f04f 0c00 	mov.w	ip, #0
 80044cc:	f10a 0514 	add.w	r5, sl, #20
 80044d0:	f10a 0010 	add.w	r0, sl, #16
 80044d4:	46c2      	mov	sl, r8
 80044d6:	6926      	ldr	r6, [r4, #16]
 80044d8:	f104 0914 	add.w	r9, r4, #20
 80044dc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80044e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80044e4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80044e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80044ec:	fa1f f18b 	uxth.w	r1, fp
 80044f0:	4461      	add	r1, ip
 80044f2:	fa1f fc83 	uxth.w	ip, r3
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	eba1 010c 	sub.w	r1, r1, ip
 80044fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004500:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004504:	b289      	uxth	r1, r1
 8004506:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800450a:	454e      	cmp	r6, r9
 800450c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004510:	f84a 3b04 	str.w	r3, [sl], #4
 8004514:	d8e6      	bhi.n	80044e4 <__mdiff+0x84>
 8004516:	1b33      	subs	r3, r6, r4
 8004518:	3b15      	subs	r3, #21
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	3415      	adds	r4, #21
 8004520:	3304      	adds	r3, #4
 8004522:	42a6      	cmp	r6, r4
 8004524:	bf38      	it	cc
 8004526:	2304      	movcc	r3, #4
 8004528:	441d      	add	r5, r3
 800452a:	4443      	add	r3, r8
 800452c:	461e      	mov	r6, r3
 800452e:	462c      	mov	r4, r5
 8004530:	4574      	cmp	r4, lr
 8004532:	d30e      	bcc.n	8004552 <__mdiff+0xf2>
 8004534:	f10e 0103 	add.w	r1, lr, #3
 8004538:	1b49      	subs	r1, r1, r5
 800453a:	f021 0103 	bic.w	r1, r1, #3
 800453e:	3d03      	subs	r5, #3
 8004540:	45ae      	cmp	lr, r5
 8004542:	bf38      	it	cc
 8004544:	2100      	movcc	r1, #0
 8004546:	4419      	add	r1, r3
 8004548:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800454c:	b18b      	cbz	r3, 8004572 <__mdiff+0x112>
 800454e:	6117      	str	r7, [r2, #16]
 8004550:	e7a0      	b.n	8004494 <__mdiff+0x34>
 8004552:	f854 8b04 	ldr.w	r8, [r4], #4
 8004556:	fa1f f188 	uxth.w	r1, r8
 800455a:	4461      	add	r1, ip
 800455c:	1408      	asrs	r0, r1, #16
 800455e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004562:	b289      	uxth	r1, r1
 8004564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800456c:	f846 1b04 	str.w	r1, [r6], #4
 8004570:	e7de      	b.n	8004530 <__mdiff+0xd0>
 8004572:	3f01      	subs	r7, #1
 8004574:	e7e8      	b.n	8004548 <__mdiff+0xe8>
 8004576:	bf00      	nop
 8004578:	0800573f 	.word	0x0800573f
 800457c:	08005750 	.word	0x08005750

08004580 <__d2b>:
 8004580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004584:	2101      	movs	r1, #1
 8004586:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800458a:	4690      	mov	r8, r2
 800458c:	461d      	mov	r5, r3
 800458e:	f7ff fcd1 	bl	8003f34 <_Balloc>
 8004592:	4604      	mov	r4, r0
 8004594:	b930      	cbnz	r0, 80045a4 <__d2b+0x24>
 8004596:	4602      	mov	r2, r0
 8004598:	f240 310a 	movw	r1, #778	; 0x30a
 800459c:	4b24      	ldr	r3, [pc, #144]	; (8004630 <__d2b+0xb0>)
 800459e:	4825      	ldr	r0, [pc, #148]	; (8004634 <__d2b+0xb4>)
 80045a0:	f000 fa6a 	bl	8004a78 <__assert_func>
 80045a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80045a8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80045ac:	bb2d      	cbnz	r5, 80045fa <__d2b+0x7a>
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	f1b8 0300 	subs.w	r3, r8, #0
 80045b4:	d026      	beq.n	8004604 <__d2b+0x84>
 80045b6:	4668      	mov	r0, sp
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	f7ff fd87 	bl	80040cc <__lo0bits>
 80045be:	9900      	ldr	r1, [sp, #0]
 80045c0:	b1f0      	cbz	r0, 8004600 <__d2b+0x80>
 80045c2:	9a01      	ldr	r2, [sp, #4]
 80045c4:	f1c0 0320 	rsb	r3, r0, #32
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	430b      	orrs	r3, r1
 80045ce:	40c2      	lsrs	r2, r0
 80045d0:	6163      	str	r3, [r4, #20]
 80045d2:	9201      	str	r2, [sp, #4]
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf14      	ite	ne
 80045da:	2102      	movne	r1, #2
 80045dc:	2101      	moveq	r1, #1
 80045de:	61a3      	str	r3, [r4, #24]
 80045e0:	6121      	str	r1, [r4, #16]
 80045e2:	b1c5      	cbz	r5, 8004616 <__d2b+0x96>
 80045e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80045e8:	4405      	add	r5, r0
 80045ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80045ee:	603d      	str	r5, [r7, #0]
 80045f0:	6030      	str	r0, [r6, #0]
 80045f2:	4620      	mov	r0, r4
 80045f4:	b002      	add	sp, #8
 80045f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fe:	e7d6      	b.n	80045ae <__d2b+0x2e>
 8004600:	6161      	str	r1, [r4, #20]
 8004602:	e7e7      	b.n	80045d4 <__d2b+0x54>
 8004604:	a801      	add	r0, sp, #4
 8004606:	f7ff fd61 	bl	80040cc <__lo0bits>
 800460a:	2101      	movs	r1, #1
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	6121      	str	r1, [r4, #16]
 8004610:	6163      	str	r3, [r4, #20]
 8004612:	3020      	adds	r0, #32
 8004614:	e7e5      	b.n	80045e2 <__d2b+0x62>
 8004616:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800461a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800461e:	6038      	str	r0, [r7, #0]
 8004620:	6918      	ldr	r0, [r3, #16]
 8004622:	f7ff fd33 	bl	800408c <__hi0bits>
 8004626:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800462a:	6031      	str	r1, [r6, #0]
 800462c:	e7e1      	b.n	80045f2 <__d2b+0x72>
 800462e:	bf00      	nop
 8004630:	0800573f 	.word	0x0800573f
 8004634:	08005750 	.word	0x08005750

08004638 <_calloc_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	fb02 f501 	mul.w	r5, r2, r1
 800463e:	4629      	mov	r1, r5
 8004640:	f000 f854 	bl	80046ec <_malloc_r>
 8004644:	4604      	mov	r4, r0
 8004646:	b118      	cbz	r0, 8004650 <_calloc_r+0x18>
 8004648:	462a      	mov	r2, r5
 800464a:	2100      	movs	r1, #0
 800464c:	f7fe f946 	bl	80028dc <memset>
 8004650:	4620      	mov	r0, r4
 8004652:	bd38      	pop	{r3, r4, r5, pc}

08004654 <_free_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4605      	mov	r5, r0
 8004658:	2900      	cmp	r1, #0
 800465a:	d043      	beq.n	80046e4 <_free_r+0x90>
 800465c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004660:	1f0c      	subs	r4, r1, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfb8      	it	lt
 8004666:	18e4      	addlt	r4, r4, r3
 8004668:	f000 fa62 	bl	8004b30 <__malloc_lock>
 800466c:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <_free_r+0x94>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	4610      	mov	r0, r2
 8004672:	b933      	cbnz	r3, 8004682 <_free_r+0x2e>
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	6014      	str	r4, [r2, #0]
 8004678:	4628      	mov	r0, r5
 800467a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800467e:	f000 ba5d 	b.w	8004b3c <__malloc_unlock>
 8004682:	42a3      	cmp	r3, r4
 8004684:	d90a      	bls.n	800469c <_free_r+0x48>
 8004686:	6821      	ldr	r1, [r4, #0]
 8004688:	1862      	adds	r2, r4, r1
 800468a:	4293      	cmp	r3, r2
 800468c:	bf01      	itttt	eq
 800468e:	681a      	ldreq	r2, [r3, #0]
 8004690:	685b      	ldreq	r3, [r3, #4]
 8004692:	1852      	addeq	r2, r2, r1
 8004694:	6022      	streq	r2, [r4, #0]
 8004696:	6063      	str	r3, [r4, #4]
 8004698:	6004      	str	r4, [r0, #0]
 800469a:	e7ed      	b.n	8004678 <_free_r+0x24>
 800469c:	461a      	mov	r2, r3
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	b10b      	cbz	r3, 80046a6 <_free_r+0x52>
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	d9fa      	bls.n	800469c <_free_r+0x48>
 80046a6:	6811      	ldr	r1, [r2, #0]
 80046a8:	1850      	adds	r0, r2, r1
 80046aa:	42a0      	cmp	r0, r4
 80046ac:	d10b      	bne.n	80046c6 <_free_r+0x72>
 80046ae:	6820      	ldr	r0, [r4, #0]
 80046b0:	4401      	add	r1, r0
 80046b2:	1850      	adds	r0, r2, r1
 80046b4:	4283      	cmp	r3, r0
 80046b6:	6011      	str	r1, [r2, #0]
 80046b8:	d1de      	bne.n	8004678 <_free_r+0x24>
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4401      	add	r1, r0
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	6053      	str	r3, [r2, #4]
 80046c4:	e7d8      	b.n	8004678 <_free_r+0x24>
 80046c6:	d902      	bls.n	80046ce <_free_r+0x7a>
 80046c8:	230c      	movs	r3, #12
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	e7d4      	b.n	8004678 <_free_r+0x24>
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	1821      	adds	r1, r4, r0
 80046d2:	428b      	cmp	r3, r1
 80046d4:	bf01      	itttt	eq
 80046d6:	6819      	ldreq	r1, [r3, #0]
 80046d8:	685b      	ldreq	r3, [r3, #4]
 80046da:	1809      	addeq	r1, r1, r0
 80046dc:	6021      	streq	r1, [r4, #0]
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	6054      	str	r4, [r2, #4]
 80046e2:	e7c9      	b.n	8004678 <_free_r+0x24>
 80046e4:	bd38      	pop	{r3, r4, r5, pc}
 80046e6:	bf00      	nop
 80046e8:	20000204 	.word	0x20000204

080046ec <_malloc_r>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	1ccd      	adds	r5, r1, #3
 80046f0:	f025 0503 	bic.w	r5, r5, #3
 80046f4:	3508      	adds	r5, #8
 80046f6:	2d0c      	cmp	r5, #12
 80046f8:	bf38      	it	cc
 80046fa:	250c      	movcc	r5, #12
 80046fc:	2d00      	cmp	r5, #0
 80046fe:	4606      	mov	r6, r0
 8004700:	db01      	blt.n	8004706 <_malloc_r+0x1a>
 8004702:	42a9      	cmp	r1, r5
 8004704:	d903      	bls.n	800470e <_malloc_r+0x22>
 8004706:	230c      	movs	r3, #12
 8004708:	6033      	str	r3, [r6, #0]
 800470a:	2000      	movs	r0, #0
 800470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470e:	f000 fa0f 	bl	8004b30 <__malloc_lock>
 8004712:	4921      	ldr	r1, [pc, #132]	; (8004798 <_malloc_r+0xac>)
 8004714:	680a      	ldr	r2, [r1, #0]
 8004716:	4614      	mov	r4, r2
 8004718:	b99c      	cbnz	r4, 8004742 <_malloc_r+0x56>
 800471a:	4f20      	ldr	r7, [pc, #128]	; (800479c <_malloc_r+0xb0>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b923      	cbnz	r3, 800472a <_malloc_r+0x3e>
 8004720:	4621      	mov	r1, r4
 8004722:	4630      	mov	r0, r6
 8004724:	f000 f998 	bl	8004a58 <_sbrk_r>
 8004728:	6038      	str	r0, [r7, #0]
 800472a:	4629      	mov	r1, r5
 800472c:	4630      	mov	r0, r6
 800472e:	f000 f993 	bl	8004a58 <_sbrk_r>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	d123      	bne.n	800477e <_malloc_r+0x92>
 8004736:	230c      	movs	r3, #12
 8004738:	4630      	mov	r0, r6
 800473a:	6033      	str	r3, [r6, #0]
 800473c:	f000 f9fe 	bl	8004b3c <__malloc_unlock>
 8004740:	e7e3      	b.n	800470a <_malloc_r+0x1e>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	1b5b      	subs	r3, r3, r5
 8004746:	d417      	bmi.n	8004778 <_malloc_r+0x8c>
 8004748:	2b0b      	cmp	r3, #11
 800474a:	d903      	bls.n	8004754 <_malloc_r+0x68>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	441c      	add	r4, r3
 8004750:	6025      	str	r5, [r4, #0]
 8004752:	e004      	b.n	800475e <_malloc_r+0x72>
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	42a2      	cmp	r2, r4
 8004758:	bf0c      	ite	eq
 800475a:	600b      	streq	r3, [r1, #0]
 800475c:	6053      	strne	r3, [r2, #4]
 800475e:	4630      	mov	r0, r6
 8004760:	f000 f9ec 	bl	8004b3c <__malloc_unlock>
 8004764:	f104 000b 	add.w	r0, r4, #11
 8004768:	1d23      	adds	r3, r4, #4
 800476a:	f020 0007 	bic.w	r0, r0, #7
 800476e:	1ac2      	subs	r2, r0, r3
 8004770:	d0cc      	beq.n	800470c <_malloc_r+0x20>
 8004772:	1a1b      	subs	r3, r3, r0
 8004774:	50a3      	str	r3, [r4, r2]
 8004776:	e7c9      	b.n	800470c <_malloc_r+0x20>
 8004778:	4622      	mov	r2, r4
 800477a:	6864      	ldr	r4, [r4, #4]
 800477c:	e7cc      	b.n	8004718 <_malloc_r+0x2c>
 800477e:	1cc4      	adds	r4, r0, #3
 8004780:	f024 0403 	bic.w	r4, r4, #3
 8004784:	42a0      	cmp	r0, r4
 8004786:	d0e3      	beq.n	8004750 <_malloc_r+0x64>
 8004788:	1a21      	subs	r1, r4, r0
 800478a:	4630      	mov	r0, r6
 800478c:	f000 f964 	bl	8004a58 <_sbrk_r>
 8004790:	3001      	adds	r0, #1
 8004792:	d1dd      	bne.n	8004750 <_malloc_r+0x64>
 8004794:	e7cf      	b.n	8004736 <_malloc_r+0x4a>
 8004796:	bf00      	nop
 8004798:	20000204 	.word	0x20000204
 800479c:	20000208 	.word	0x20000208

080047a0 <__ssputs_r>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	688e      	ldr	r6, [r1, #8]
 80047a6:	4682      	mov	sl, r0
 80047a8:	429e      	cmp	r6, r3
 80047aa:	460c      	mov	r4, r1
 80047ac:	4690      	mov	r8, r2
 80047ae:	461f      	mov	r7, r3
 80047b0:	d838      	bhi.n	8004824 <__ssputs_r+0x84>
 80047b2:	898a      	ldrh	r2, [r1, #12]
 80047b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047b8:	d032      	beq.n	8004820 <__ssputs_r+0x80>
 80047ba:	6825      	ldr	r5, [r4, #0]
 80047bc:	6909      	ldr	r1, [r1, #16]
 80047be:	3301      	adds	r3, #1
 80047c0:	eba5 0901 	sub.w	r9, r5, r1
 80047c4:	6965      	ldr	r5, [r4, #20]
 80047c6:	444b      	add	r3, r9
 80047c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d0:	106d      	asrs	r5, r5, #1
 80047d2:	429d      	cmp	r5, r3
 80047d4:	bf38      	it	cc
 80047d6:	461d      	movcc	r5, r3
 80047d8:	0553      	lsls	r3, r2, #21
 80047da:	d531      	bpl.n	8004840 <__ssputs_r+0xa0>
 80047dc:	4629      	mov	r1, r5
 80047de:	f7ff ff85 	bl	80046ec <_malloc_r>
 80047e2:	4606      	mov	r6, r0
 80047e4:	b950      	cbnz	r0, 80047fc <__ssputs_r+0x5c>
 80047e6:	230c      	movs	r3, #12
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	f8ca 3000 	str.w	r3, [sl]
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	464a      	mov	r2, r9
 80047fe:	6921      	ldr	r1, [r4, #16]
 8004800:	f7ff fb8a 	bl	8003f18 <memcpy>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800480a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480e:	81a3      	strh	r3, [r4, #12]
 8004810:	6126      	str	r6, [r4, #16]
 8004812:	444e      	add	r6, r9
 8004814:	6026      	str	r6, [r4, #0]
 8004816:	463e      	mov	r6, r7
 8004818:	6165      	str	r5, [r4, #20]
 800481a:	eba5 0509 	sub.w	r5, r5, r9
 800481e:	60a5      	str	r5, [r4, #8]
 8004820:	42be      	cmp	r6, r7
 8004822:	d900      	bls.n	8004826 <__ssputs_r+0x86>
 8004824:	463e      	mov	r6, r7
 8004826:	4632      	mov	r2, r6
 8004828:	4641      	mov	r1, r8
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	f000 f966 	bl	8004afc <memmove>
 8004830:	68a3      	ldr	r3, [r4, #8]
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	1b9b      	subs	r3, r3, r6
 8004836:	4432      	add	r2, r6
 8004838:	2000      	movs	r0, #0
 800483a:	60a3      	str	r3, [r4, #8]
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	e7db      	b.n	80047f8 <__ssputs_r+0x58>
 8004840:	462a      	mov	r2, r5
 8004842:	f000 f981 	bl	8004b48 <_realloc_r>
 8004846:	4606      	mov	r6, r0
 8004848:	2800      	cmp	r0, #0
 800484a:	d1e1      	bne.n	8004810 <__ssputs_r+0x70>
 800484c:	4650      	mov	r0, sl
 800484e:	6921      	ldr	r1, [r4, #16]
 8004850:	f7ff ff00 	bl	8004654 <_free_r>
 8004854:	e7c7      	b.n	80047e6 <__ssputs_r+0x46>
	...

08004858 <_svfiprintf_r>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	4698      	mov	r8, r3
 800485e:	898b      	ldrh	r3, [r1, #12]
 8004860:	4607      	mov	r7, r0
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	460d      	mov	r5, r1
 8004866:	4614      	mov	r4, r2
 8004868:	b09d      	sub	sp, #116	; 0x74
 800486a:	d50e      	bpl.n	800488a <_svfiprintf_r+0x32>
 800486c:	690b      	ldr	r3, [r1, #16]
 800486e:	b963      	cbnz	r3, 800488a <_svfiprintf_r+0x32>
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	f7ff ff3b 	bl	80046ec <_malloc_r>
 8004876:	6028      	str	r0, [r5, #0]
 8004878:	6128      	str	r0, [r5, #16]
 800487a:	b920      	cbnz	r0, 8004886 <_svfiprintf_r+0x2e>
 800487c:	230c      	movs	r3, #12
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e0d1      	b.n	8004a2a <_svfiprintf_r+0x1d2>
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	616b      	str	r3, [r5, #20]
 800488a:	2300      	movs	r3, #0
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	2320      	movs	r3, #32
 8004890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004894:	2330      	movs	r3, #48	; 0x30
 8004896:	f04f 0901 	mov.w	r9, #1
 800489a:	f8cd 800c 	str.w	r8, [sp, #12]
 800489e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a44 <_svfiprintf_r+0x1ec>
 80048a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048a6:	4623      	mov	r3, r4
 80048a8:	469a      	mov	sl, r3
 80048aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ae:	b10a      	cbz	r2, 80048b4 <_svfiprintf_r+0x5c>
 80048b0:	2a25      	cmp	r2, #37	; 0x25
 80048b2:	d1f9      	bne.n	80048a8 <_svfiprintf_r+0x50>
 80048b4:	ebba 0b04 	subs.w	fp, sl, r4
 80048b8:	d00b      	beq.n	80048d2 <_svfiprintf_r+0x7a>
 80048ba:	465b      	mov	r3, fp
 80048bc:	4622      	mov	r2, r4
 80048be:	4629      	mov	r1, r5
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff ff6d 	bl	80047a0 <__ssputs_r>
 80048c6:	3001      	adds	r0, #1
 80048c8:	f000 80aa 	beq.w	8004a20 <_svfiprintf_r+0x1c8>
 80048cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ce:	445a      	add	r2, fp
 80048d0:	9209      	str	r2, [sp, #36]	; 0x24
 80048d2:	f89a 3000 	ldrb.w	r3, [sl]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80a2 	beq.w	8004a20 <_svfiprintf_r+0x1c8>
 80048dc:	2300      	movs	r3, #0
 80048de:	f04f 32ff 	mov.w	r2, #4294967295
 80048e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e6:	f10a 0a01 	add.w	sl, sl, #1
 80048ea:	9304      	str	r3, [sp, #16]
 80048ec:	9307      	str	r3, [sp, #28]
 80048ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f2:	931a      	str	r3, [sp, #104]	; 0x68
 80048f4:	4654      	mov	r4, sl
 80048f6:	2205      	movs	r2, #5
 80048f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fc:	4851      	ldr	r0, [pc, #324]	; (8004a44 <_svfiprintf_r+0x1ec>)
 80048fe:	f7ff fafd 	bl	8003efc <memchr>
 8004902:	9a04      	ldr	r2, [sp, #16]
 8004904:	b9d8      	cbnz	r0, 800493e <_svfiprintf_r+0xe6>
 8004906:	06d0      	lsls	r0, r2, #27
 8004908:	bf44      	itt	mi
 800490a:	2320      	movmi	r3, #32
 800490c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004910:	0711      	lsls	r1, r2, #28
 8004912:	bf44      	itt	mi
 8004914:	232b      	movmi	r3, #43	; 0x2b
 8004916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491a:	f89a 3000 	ldrb.w	r3, [sl]
 800491e:	2b2a      	cmp	r3, #42	; 0x2a
 8004920:	d015      	beq.n	800494e <_svfiprintf_r+0xf6>
 8004922:	4654      	mov	r4, sl
 8004924:	2000      	movs	r0, #0
 8004926:	f04f 0c0a 	mov.w	ip, #10
 800492a:	9a07      	ldr	r2, [sp, #28]
 800492c:	4621      	mov	r1, r4
 800492e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004932:	3b30      	subs	r3, #48	; 0x30
 8004934:	2b09      	cmp	r3, #9
 8004936:	d94e      	bls.n	80049d6 <_svfiprintf_r+0x17e>
 8004938:	b1b0      	cbz	r0, 8004968 <_svfiprintf_r+0x110>
 800493a:	9207      	str	r2, [sp, #28]
 800493c:	e014      	b.n	8004968 <_svfiprintf_r+0x110>
 800493e:	eba0 0308 	sub.w	r3, r0, r8
 8004942:	fa09 f303 	lsl.w	r3, r9, r3
 8004946:	4313      	orrs	r3, r2
 8004948:	46a2      	mov	sl, r4
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	e7d2      	b.n	80048f4 <_svfiprintf_r+0x9c>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	1d19      	adds	r1, r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	9103      	str	r1, [sp, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	bfbb      	ittet	lt
 800495a:	425b      	neglt	r3, r3
 800495c:	f042 0202 	orrlt.w	r2, r2, #2
 8004960:	9307      	strge	r3, [sp, #28]
 8004962:	9307      	strlt	r3, [sp, #28]
 8004964:	bfb8      	it	lt
 8004966:	9204      	strlt	r2, [sp, #16]
 8004968:	7823      	ldrb	r3, [r4, #0]
 800496a:	2b2e      	cmp	r3, #46	; 0x2e
 800496c:	d10c      	bne.n	8004988 <_svfiprintf_r+0x130>
 800496e:	7863      	ldrb	r3, [r4, #1]
 8004970:	2b2a      	cmp	r3, #42	; 0x2a
 8004972:	d135      	bne.n	80049e0 <_svfiprintf_r+0x188>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	3402      	adds	r4, #2
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	9203      	str	r2, [sp, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	f04f 33ff 	movlt.w	r3, #4294967295
 8004986:	9305      	str	r3, [sp, #20]
 8004988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a54 <_svfiprintf_r+0x1fc>
 800498c:	2203      	movs	r2, #3
 800498e:	4650      	mov	r0, sl
 8004990:	7821      	ldrb	r1, [r4, #0]
 8004992:	f7ff fab3 	bl	8003efc <memchr>
 8004996:	b140      	cbz	r0, 80049aa <_svfiprintf_r+0x152>
 8004998:	2340      	movs	r3, #64	; 0x40
 800499a:	eba0 000a 	sub.w	r0, r0, sl
 800499e:	fa03 f000 	lsl.w	r0, r3, r0
 80049a2:	9b04      	ldr	r3, [sp, #16]
 80049a4:	3401      	adds	r4, #1
 80049a6:	4303      	orrs	r3, r0
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ae:	2206      	movs	r2, #6
 80049b0:	4825      	ldr	r0, [pc, #148]	; (8004a48 <_svfiprintf_r+0x1f0>)
 80049b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049b6:	f7ff faa1 	bl	8003efc <memchr>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d038      	beq.n	8004a30 <_svfiprintf_r+0x1d8>
 80049be:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <_svfiprintf_r+0x1f4>)
 80049c0:	bb1b      	cbnz	r3, 8004a0a <_svfiprintf_r+0x1b2>
 80049c2:	9b03      	ldr	r3, [sp, #12]
 80049c4:	3307      	adds	r3, #7
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	3308      	adds	r3, #8
 80049cc:	9303      	str	r3, [sp, #12]
 80049ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d0:	4433      	add	r3, r6
 80049d2:	9309      	str	r3, [sp, #36]	; 0x24
 80049d4:	e767      	b.n	80048a6 <_svfiprintf_r+0x4e>
 80049d6:	460c      	mov	r4, r1
 80049d8:	2001      	movs	r0, #1
 80049da:	fb0c 3202 	mla	r2, ip, r2, r3
 80049de:	e7a5      	b.n	800492c <_svfiprintf_r+0xd4>
 80049e0:	2300      	movs	r3, #0
 80049e2:	f04f 0c0a 	mov.w	ip, #10
 80049e6:	4619      	mov	r1, r3
 80049e8:	3401      	adds	r4, #1
 80049ea:	9305      	str	r3, [sp, #20]
 80049ec:	4620      	mov	r0, r4
 80049ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f2:	3a30      	subs	r2, #48	; 0x30
 80049f4:	2a09      	cmp	r2, #9
 80049f6:	d903      	bls.n	8004a00 <_svfiprintf_r+0x1a8>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0c5      	beq.n	8004988 <_svfiprintf_r+0x130>
 80049fc:	9105      	str	r1, [sp, #20]
 80049fe:	e7c3      	b.n	8004988 <_svfiprintf_r+0x130>
 8004a00:	4604      	mov	r4, r0
 8004a02:	2301      	movs	r3, #1
 8004a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a08:	e7f0      	b.n	80049ec <_svfiprintf_r+0x194>
 8004a0a:	ab03      	add	r3, sp, #12
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	462a      	mov	r2, r5
 8004a10:	4638      	mov	r0, r7
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <_svfiprintf_r+0x1f8>)
 8004a14:	a904      	add	r1, sp, #16
 8004a16:	f7fe f807 	bl	8002a28 <_printf_float>
 8004a1a:	1c42      	adds	r2, r0, #1
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	d1d6      	bne.n	80049ce <_svfiprintf_r+0x176>
 8004a20:	89ab      	ldrh	r3, [r5, #12]
 8004a22:	065b      	lsls	r3, r3, #25
 8004a24:	f53f af2c 	bmi.w	8004880 <_svfiprintf_r+0x28>
 8004a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a2a:	b01d      	add	sp, #116	; 0x74
 8004a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a30:	ab03      	add	r3, sp, #12
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	462a      	mov	r2, r5
 8004a36:	4638      	mov	r0, r7
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <_svfiprintf_r+0x1f8>)
 8004a3a:	a904      	add	r1, sp, #16
 8004a3c:	f7fe fa90 	bl	8002f60 <_printf_i>
 8004a40:	e7eb      	b.n	8004a1a <_svfiprintf_r+0x1c2>
 8004a42:	bf00      	nop
 8004a44:	080058ac 	.word	0x080058ac
 8004a48:	080058b6 	.word	0x080058b6
 8004a4c:	08002a29 	.word	0x08002a29
 8004a50:	080047a1 	.word	0x080047a1
 8004a54:	080058b2 	.word	0x080058b2

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4d05      	ldr	r5, [pc, #20]	; (8004a74 <_sbrk_r+0x1c>)
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7fc fd78 	bl	8001558 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000348 	.word	0x20000348

08004a78 <__assert_func>:
 8004a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a7a:	4614      	mov	r4, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <__assert_func+0x2c>)
 8004a80:	4605      	mov	r5, r0
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68d8      	ldr	r0, [r3, #12]
 8004a86:	b14c      	cbz	r4, 8004a9c <__assert_func+0x24>
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <__assert_func+0x30>)
 8004a8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a8e:	9100      	str	r1, [sp, #0]
 8004a90:	462b      	mov	r3, r5
 8004a92:	4906      	ldr	r1, [pc, #24]	; (8004aac <__assert_func+0x34>)
 8004a94:	f000 f80e 	bl	8004ab4 <fiprintf>
 8004a98:	f000 faa2 	bl	8004fe0 <abort>
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__assert_func+0x38>)
 8004a9e:	461c      	mov	r4, r3
 8004aa0:	e7f3      	b.n	8004a8a <__assert_func+0x12>
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	080058bd 	.word	0x080058bd
 8004aac:	080058ca 	.word	0x080058ca
 8004ab0:	080058f8 	.word	0x080058f8

08004ab4 <fiprintf>:
 8004ab4:	b40e      	push	{r1, r2, r3}
 8004ab6:	b503      	push	{r0, r1, lr}
 8004ab8:	4601      	mov	r1, r0
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <fiprintf+0x20>)
 8004abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ac2:	6800      	ldr	r0, [r0, #0]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f000 f88d 	bl	8004be4 <_vfiprintf_r>
 8004aca:	b002      	add	sp, #8
 8004acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad0:	b003      	add	sp, #12
 8004ad2:	4770      	bx	lr
 8004ad4:	2000000c 	.word	0x2000000c

08004ad8 <__ascii_mbtowc>:
 8004ad8:	b082      	sub	sp, #8
 8004ada:	b901      	cbnz	r1, 8004ade <__ascii_mbtowc+0x6>
 8004adc:	a901      	add	r1, sp, #4
 8004ade:	b142      	cbz	r2, 8004af2 <__ascii_mbtowc+0x1a>
 8004ae0:	b14b      	cbz	r3, 8004af6 <__ascii_mbtowc+0x1e>
 8004ae2:	7813      	ldrb	r3, [r2, #0]
 8004ae4:	600b      	str	r3, [r1, #0]
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	1e10      	subs	r0, r2, #0
 8004aea:	bf18      	it	ne
 8004aec:	2001      	movne	r0, #1
 8004aee:	b002      	add	sp, #8
 8004af0:	4770      	bx	lr
 8004af2:	4610      	mov	r0, r2
 8004af4:	e7fb      	b.n	8004aee <__ascii_mbtowc+0x16>
 8004af6:	f06f 0001 	mvn.w	r0, #1
 8004afa:	e7f8      	b.n	8004aee <__ascii_mbtowc+0x16>

08004afc <memmove>:
 8004afc:	4288      	cmp	r0, r1
 8004afe:	b510      	push	{r4, lr}
 8004b00:	eb01 0402 	add.w	r4, r1, r2
 8004b04:	d902      	bls.n	8004b0c <memmove+0x10>
 8004b06:	4284      	cmp	r4, r0
 8004b08:	4623      	mov	r3, r4
 8004b0a:	d807      	bhi.n	8004b1c <memmove+0x20>
 8004b0c:	1e43      	subs	r3, r0, #1
 8004b0e:	42a1      	cmp	r1, r4
 8004b10:	d008      	beq.n	8004b24 <memmove+0x28>
 8004b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b1a:	e7f8      	b.n	8004b0e <memmove+0x12>
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	4402      	add	r2, r0
 8004b20:	428a      	cmp	r2, r1
 8004b22:	d100      	bne.n	8004b26 <memmove+0x2a>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2e:	e7f7      	b.n	8004b20 <memmove+0x24>

08004b30 <__malloc_lock>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__malloc_lock+0x8>)
 8004b32:	f000 bc15 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	20000350 	.word	0x20000350

08004b3c <__malloc_unlock>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__malloc_unlock+0x8>)
 8004b3e:	f000 bc10 	b.w	8005362 <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	20000350 	.word	0x20000350

08004b48 <_realloc_r>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	4607      	mov	r7, r0
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	460e      	mov	r6, r1
 8004b50:	b921      	cbnz	r1, 8004b5c <_realloc_r+0x14>
 8004b52:	4611      	mov	r1, r2
 8004b54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b58:	f7ff bdc8 	b.w	80046ec <_malloc_r>
 8004b5c:	b922      	cbnz	r2, 8004b68 <_realloc_r+0x20>
 8004b5e:	f7ff fd79 	bl	8004654 <_free_r>
 8004b62:	4625      	mov	r5, r4
 8004b64:	4628      	mov	r0, r5
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b68:	f000 fc60 	bl	800542c <_malloc_usable_size_r>
 8004b6c:	42a0      	cmp	r0, r4
 8004b6e:	d20f      	bcs.n	8004b90 <_realloc_r+0x48>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4638      	mov	r0, r7
 8004b74:	f7ff fdba 	bl	80046ec <_malloc_r>
 8004b78:	4605      	mov	r5, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d0f2      	beq.n	8004b64 <_realloc_r+0x1c>
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4622      	mov	r2, r4
 8004b82:	f7ff f9c9 	bl	8003f18 <memcpy>
 8004b86:	4631      	mov	r1, r6
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f7ff fd63 	bl	8004654 <_free_r>
 8004b8e:	e7e9      	b.n	8004b64 <_realloc_r+0x1c>
 8004b90:	4635      	mov	r5, r6
 8004b92:	e7e7      	b.n	8004b64 <_realloc_r+0x1c>

08004b94 <__sfputc_r>:
 8004b94:	6893      	ldr	r3, [r2, #8]
 8004b96:	b410      	push	{r4}
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	6093      	str	r3, [r2, #8]
 8004b9e:	da07      	bge.n	8004bb0 <__sfputc_r+0x1c>
 8004ba0:	6994      	ldr	r4, [r2, #24]
 8004ba2:	42a3      	cmp	r3, r4
 8004ba4:	db01      	blt.n	8004baa <__sfputc_r+0x16>
 8004ba6:	290a      	cmp	r1, #10
 8004ba8:	d102      	bne.n	8004bb0 <__sfputc_r+0x1c>
 8004baa:	bc10      	pop	{r4}
 8004bac:	f000 b94a 	b.w	8004e44 <__swbuf_r>
 8004bb0:	6813      	ldr	r3, [r2, #0]
 8004bb2:	1c58      	adds	r0, r3, #1
 8004bb4:	6010      	str	r0, [r2, #0]
 8004bb6:	7019      	strb	r1, [r3, #0]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	bc10      	pop	{r4}
 8004bbc:	4770      	bx	lr

08004bbe <__sfputs_r>:
 8004bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	460f      	mov	r7, r1
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	18d5      	adds	r5, r2, r3
 8004bc8:	42ac      	cmp	r4, r5
 8004bca:	d101      	bne.n	8004bd0 <__sfputs_r+0x12>
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e007      	b.n	8004be0 <__sfputs_r+0x22>
 8004bd0:	463a      	mov	r2, r7
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd8:	f7ff ffdc 	bl	8004b94 <__sfputc_r>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d1f3      	bne.n	8004bc8 <__sfputs_r+0xa>
 8004be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004be4 <_vfiprintf_r>:
 8004be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	460d      	mov	r5, r1
 8004bea:	4614      	mov	r4, r2
 8004bec:	4698      	mov	r8, r3
 8004bee:	4606      	mov	r6, r0
 8004bf0:	b09d      	sub	sp, #116	; 0x74
 8004bf2:	b118      	cbz	r0, 8004bfc <_vfiprintf_r+0x18>
 8004bf4:	6983      	ldr	r3, [r0, #24]
 8004bf6:	b90b      	cbnz	r3, 8004bfc <_vfiprintf_r+0x18>
 8004bf8:	f000 fb14 	bl	8005224 <__sinit>
 8004bfc:	4b89      	ldr	r3, [pc, #548]	; (8004e24 <_vfiprintf_r+0x240>)
 8004bfe:	429d      	cmp	r5, r3
 8004c00:	d11b      	bne.n	8004c3a <_vfiprintf_r+0x56>
 8004c02:	6875      	ldr	r5, [r6, #4]
 8004c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c06:	07d9      	lsls	r1, r3, #31
 8004c08:	d405      	bmi.n	8004c16 <_vfiprintf_r+0x32>
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	059a      	lsls	r2, r3, #22
 8004c0e:	d402      	bmi.n	8004c16 <_vfiprintf_r+0x32>
 8004c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c12:	f000 fba5 	bl	8005360 <__retarget_lock_acquire_recursive>
 8004c16:	89ab      	ldrh	r3, [r5, #12]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	d501      	bpl.n	8004c20 <_vfiprintf_r+0x3c>
 8004c1c:	692b      	ldr	r3, [r5, #16]
 8004c1e:	b9eb      	cbnz	r3, 8004c5c <_vfiprintf_r+0x78>
 8004c20:	4629      	mov	r1, r5
 8004c22:	4630      	mov	r0, r6
 8004c24:	f000 f96e 	bl	8004f04 <__swsetup_r>
 8004c28:	b1c0      	cbz	r0, 8004c5c <_vfiprintf_r+0x78>
 8004c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c2c:	07dc      	lsls	r4, r3, #31
 8004c2e:	d50e      	bpl.n	8004c4e <_vfiprintf_r+0x6a>
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295
 8004c34:	b01d      	add	sp, #116	; 0x74
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <_vfiprintf_r+0x244>)
 8004c3c:	429d      	cmp	r5, r3
 8004c3e:	d101      	bne.n	8004c44 <_vfiprintf_r+0x60>
 8004c40:	68b5      	ldr	r5, [r6, #8]
 8004c42:	e7df      	b.n	8004c04 <_vfiprintf_r+0x20>
 8004c44:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <_vfiprintf_r+0x248>)
 8004c46:	429d      	cmp	r5, r3
 8004c48:	bf08      	it	eq
 8004c4a:	68f5      	ldreq	r5, [r6, #12]
 8004c4c:	e7da      	b.n	8004c04 <_vfiprintf_r+0x20>
 8004c4e:	89ab      	ldrh	r3, [r5, #12]
 8004c50:	0598      	lsls	r0, r3, #22
 8004c52:	d4ed      	bmi.n	8004c30 <_vfiprintf_r+0x4c>
 8004c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c56:	f000 fb84 	bl	8005362 <__retarget_lock_release_recursive>
 8004c5a:	e7e9      	b.n	8004c30 <_vfiprintf_r+0x4c>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c60:	2320      	movs	r3, #32
 8004c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c66:	2330      	movs	r3, #48	; 0x30
 8004c68:	f04f 0901 	mov.w	r9, #1
 8004c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e30 <_vfiprintf_r+0x24c>
 8004c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c78:	4623      	mov	r3, r4
 8004c7a:	469a      	mov	sl, r3
 8004c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c80:	b10a      	cbz	r2, 8004c86 <_vfiprintf_r+0xa2>
 8004c82:	2a25      	cmp	r2, #37	; 0x25
 8004c84:	d1f9      	bne.n	8004c7a <_vfiprintf_r+0x96>
 8004c86:	ebba 0b04 	subs.w	fp, sl, r4
 8004c8a:	d00b      	beq.n	8004ca4 <_vfiprintf_r+0xc0>
 8004c8c:	465b      	mov	r3, fp
 8004c8e:	4622      	mov	r2, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	4630      	mov	r0, r6
 8004c94:	f7ff ff93 	bl	8004bbe <__sfputs_r>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f000 80aa 	beq.w	8004df2 <_vfiprintf_r+0x20e>
 8004c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca0:	445a      	add	r2, fp
 8004ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a2 	beq.w	8004df2 <_vfiprintf_r+0x20e>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cb8:	f10a 0a01 	add.w	sl, sl, #1
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	9307      	str	r3, [sp, #28]
 8004cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8004cc6:	4654      	mov	r4, sl
 8004cc8:	2205      	movs	r2, #5
 8004cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cce:	4858      	ldr	r0, [pc, #352]	; (8004e30 <_vfiprintf_r+0x24c>)
 8004cd0:	f7ff f914 	bl	8003efc <memchr>
 8004cd4:	9a04      	ldr	r2, [sp, #16]
 8004cd6:	b9d8      	cbnz	r0, 8004d10 <_vfiprintf_r+0x12c>
 8004cd8:	06d1      	lsls	r1, r2, #27
 8004cda:	bf44      	itt	mi
 8004cdc:	2320      	movmi	r3, #32
 8004cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ce2:	0713      	lsls	r3, r2, #28
 8004ce4:	bf44      	itt	mi
 8004ce6:	232b      	movmi	r3, #43	; 0x2b
 8004ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cec:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf2:	d015      	beq.n	8004d20 <_vfiprintf_r+0x13c>
 8004cf4:	4654      	mov	r4, sl
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f04f 0c0a 	mov.w	ip, #10
 8004cfc:	9a07      	ldr	r2, [sp, #28]
 8004cfe:	4621      	mov	r1, r4
 8004d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d04:	3b30      	subs	r3, #48	; 0x30
 8004d06:	2b09      	cmp	r3, #9
 8004d08:	d94e      	bls.n	8004da8 <_vfiprintf_r+0x1c4>
 8004d0a:	b1b0      	cbz	r0, 8004d3a <_vfiprintf_r+0x156>
 8004d0c:	9207      	str	r2, [sp, #28]
 8004d0e:	e014      	b.n	8004d3a <_vfiprintf_r+0x156>
 8004d10:	eba0 0308 	sub.w	r3, r0, r8
 8004d14:	fa09 f303 	lsl.w	r3, r9, r3
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	46a2      	mov	sl, r4
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	e7d2      	b.n	8004cc6 <_vfiprintf_r+0xe2>
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	1d19      	adds	r1, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	9103      	str	r1, [sp, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfbb      	ittet	lt
 8004d2c:	425b      	neglt	r3, r3
 8004d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d32:	9307      	strge	r3, [sp, #28]
 8004d34:	9307      	strlt	r3, [sp, #28]
 8004d36:	bfb8      	it	lt
 8004d38:	9204      	strlt	r2, [sp, #16]
 8004d3a:	7823      	ldrb	r3, [r4, #0]
 8004d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d3e:	d10c      	bne.n	8004d5a <_vfiprintf_r+0x176>
 8004d40:	7863      	ldrb	r3, [r4, #1]
 8004d42:	2b2a      	cmp	r3, #42	; 0x2a
 8004d44:	d135      	bne.n	8004db2 <_vfiprintf_r+0x1ce>
 8004d46:	9b03      	ldr	r3, [sp, #12]
 8004d48:	3402      	adds	r4, #2
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	9203      	str	r2, [sp, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bfb8      	it	lt
 8004d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d58:	9305      	str	r3, [sp, #20]
 8004d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e40 <_vfiprintf_r+0x25c>
 8004d5e:	2203      	movs	r2, #3
 8004d60:	4650      	mov	r0, sl
 8004d62:	7821      	ldrb	r1, [r4, #0]
 8004d64:	f7ff f8ca 	bl	8003efc <memchr>
 8004d68:	b140      	cbz	r0, 8004d7c <_vfiprintf_r+0x198>
 8004d6a:	2340      	movs	r3, #64	; 0x40
 8004d6c:	eba0 000a 	sub.w	r0, r0, sl
 8004d70:	fa03 f000 	lsl.w	r0, r3, r0
 8004d74:	9b04      	ldr	r3, [sp, #16]
 8004d76:	3401      	adds	r4, #1
 8004d78:	4303      	orrs	r3, r0
 8004d7a:	9304      	str	r3, [sp, #16]
 8004d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d80:	2206      	movs	r2, #6
 8004d82:	482c      	ldr	r0, [pc, #176]	; (8004e34 <_vfiprintf_r+0x250>)
 8004d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d88:	f7ff f8b8 	bl	8003efc <memchr>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d03f      	beq.n	8004e10 <_vfiprintf_r+0x22c>
 8004d90:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <_vfiprintf_r+0x254>)
 8004d92:	bb1b      	cbnz	r3, 8004ddc <_vfiprintf_r+0x1f8>
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	3307      	adds	r3, #7
 8004d98:	f023 0307 	bic.w	r3, r3, #7
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da2:	443b      	add	r3, r7
 8004da4:	9309      	str	r3, [sp, #36]	; 0x24
 8004da6:	e767      	b.n	8004c78 <_vfiprintf_r+0x94>
 8004da8:	460c      	mov	r4, r1
 8004daa:	2001      	movs	r0, #1
 8004dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8004db0:	e7a5      	b.n	8004cfe <_vfiprintf_r+0x11a>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f04f 0c0a 	mov.w	ip, #10
 8004db8:	4619      	mov	r1, r3
 8004dba:	3401      	adds	r4, #1
 8004dbc:	9305      	str	r3, [sp, #20]
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dc4:	3a30      	subs	r2, #48	; 0x30
 8004dc6:	2a09      	cmp	r2, #9
 8004dc8:	d903      	bls.n	8004dd2 <_vfiprintf_r+0x1ee>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0c5      	beq.n	8004d5a <_vfiprintf_r+0x176>
 8004dce:	9105      	str	r1, [sp, #20]
 8004dd0:	e7c3      	b.n	8004d5a <_vfiprintf_r+0x176>
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dda:	e7f0      	b.n	8004dbe <_vfiprintf_r+0x1da>
 8004ddc:	ab03      	add	r3, sp, #12
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	462a      	mov	r2, r5
 8004de2:	4630      	mov	r0, r6
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <_vfiprintf_r+0x258>)
 8004de6:	a904      	add	r1, sp, #16
 8004de8:	f7fd fe1e 	bl	8002a28 <_printf_float>
 8004dec:	4607      	mov	r7, r0
 8004dee:	1c78      	adds	r0, r7, #1
 8004df0:	d1d6      	bne.n	8004da0 <_vfiprintf_r+0x1bc>
 8004df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004df4:	07d9      	lsls	r1, r3, #31
 8004df6:	d405      	bmi.n	8004e04 <_vfiprintf_r+0x220>
 8004df8:	89ab      	ldrh	r3, [r5, #12]
 8004dfa:	059a      	lsls	r2, r3, #22
 8004dfc:	d402      	bmi.n	8004e04 <_vfiprintf_r+0x220>
 8004dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e00:	f000 faaf 	bl	8005362 <__retarget_lock_release_recursive>
 8004e04:	89ab      	ldrh	r3, [r5, #12]
 8004e06:	065b      	lsls	r3, r3, #25
 8004e08:	f53f af12 	bmi.w	8004c30 <_vfiprintf_r+0x4c>
 8004e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e0e:	e711      	b.n	8004c34 <_vfiprintf_r+0x50>
 8004e10:	ab03      	add	r3, sp, #12
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	462a      	mov	r2, r5
 8004e16:	4630      	mov	r0, r6
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <_vfiprintf_r+0x258>)
 8004e1a:	a904      	add	r1, sp, #16
 8004e1c:	f7fe f8a0 	bl	8002f60 <_printf_i>
 8004e20:	e7e4      	b.n	8004dec <_vfiprintf_r+0x208>
 8004e22:	bf00      	nop
 8004e24:	08005a24 	.word	0x08005a24
 8004e28:	08005a44 	.word	0x08005a44
 8004e2c:	08005a04 	.word	0x08005a04
 8004e30:	080058ac 	.word	0x080058ac
 8004e34:	080058b6 	.word	0x080058b6
 8004e38:	08002a29 	.word	0x08002a29
 8004e3c:	08004bbf 	.word	0x08004bbf
 8004e40:	080058b2 	.word	0x080058b2

08004e44 <__swbuf_r>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	460e      	mov	r6, r1
 8004e48:	4614      	mov	r4, r2
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	b118      	cbz	r0, 8004e56 <__swbuf_r+0x12>
 8004e4e:	6983      	ldr	r3, [r0, #24]
 8004e50:	b90b      	cbnz	r3, 8004e56 <__swbuf_r+0x12>
 8004e52:	f000 f9e7 	bl	8005224 <__sinit>
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <__swbuf_r+0x98>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	d12b      	bne.n	8004eb4 <__swbuf_r+0x70>
 8004e5c:	686c      	ldr	r4, [r5, #4]
 8004e5e:	69a3      	ldr	r3, [r4, #24]
 8004e60:	60a3      	str	r3, [r4, #8]
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	071a      	lsls	r2, r3, #28
 8004e66:	d52f      	bpl.n	8004ec8 <__swbuf_r+0x84>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	b36b      	cbz	r3, 8004ec8 <__swbuf_r+0x84>
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	b2f6      	uxtb	r6, r6
 8004e72:	1ac0      	subs	r0, r0, r3
 8004e74:	6963      	ldr	r3, [r4, #20]
 8004e76:	4637      	mov	r7, r6
 8004e78:	4283      	cmp	r3, r0
 8004e7a:	dc04      	bgt.n	8004e86 <__swbuf_r+0x42>
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 f93c 	bl	80050fc <_fflush_r>
 8004e84:	bb30      	cbnz	r0, 8004ed4 <__swbuf_r+0x90>
 8004e86:	68a3      	ldr	r3, [r4, #8]
 8004e88:	3001      	adds	r0, #1
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60a3      	str	r3, [r4, #8]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	701e      	strb	r6, [r3, #0]
 8004e96:	6963      	ldr	r3, [r4, #20]
 8004e98:	4283      	cmp	r3, r0
 8004e9a:	d004      	beq.n	8004ea6 <__swbuf_r+0x62>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	07db      	lsls	r3, r3, #31
 8004ea0:	d506      	bpl.n	8004eb0 <__swbuf_r+0x6c>
 8004ea2:	2e0a      	cmp	r6, #10
 8004ea4:	d104      	bne.n	8004eb0 <__swbuf_r+0x6c>
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 f927 	bl	80050fc <_fflush_r>
 8004eae:	b988      	cbnz	r0, 8004ed4 <__swbuf_r+0x90>
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <__swbuf_r+0x9c>)
 8004eb6:	429c      	cmp	r4, r3
 8004eb8:	d101      	bne.n	8004ebe <__swbuf_r+0x7a>
 8004eba:	68ac      	ldr	r4, [r5, #8]
 8004ebc:	e7cf      	b.n	8004e5e <__swbuf_r+0x1a>
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <__swbuf_r+0xa0>)
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	bf08      	it	eq
 8004ec4:	68ec      	ldreq	r4, [r5, #12]
 8004ec6:	e7ca      	b.n	8004e5e <__swbuf_r+0x1a>
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 f81a 	bl	8004f04 <__swsetup_r>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d0cb      	beq.n	8004e6c <__swbuf_r+0x28>
 8004ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed8:	e7ea      	b.n	8004eb0 <__swbuf_r+0x6c>
 8004eda:	bf00      	nop
 8004edc:	08005a24 	.word	0x08005a24
 8004ee0:	08005a44 	.word	0x08005a44
 8004ee4:	08005a04 	.word	0x08005a04

08004ee8 <__ascii_wctomb>:
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4608      	mov	r0, r1
 8004eec:	b141      	cbz	r1, 8004f00 <__ascii_wctomb+0x18>
 8004eee:	2aff      	cmp	r2, #255	; 0xff
 8004ef0:	d904      	bls.n	8004efc <__ascii_wctomb+0x14>
 8004ef2:	228a      	movs	r2, #138	; 0x8a
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	4770      	bx	lr
 8004efc:	2001      	movs	r0, #1
 8004efe:	700a      	strb	r2, [r1, #0]
 8004f00:	4770      	bx	lr
	...

08004f04 <__swsetup_r>:
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <__swsetup_r+0xcc>)
 8004f06:	b570      	push	{r4, r5, r6, lr}
 8004f08:	681d      	ldr	r5, [r3, #0]
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	b125      	cbz	r5, 8004f1a <__swsetup_r+0x16>
 8004f10:	69ab      	ldr	r3, [r5, #24]
 8004f12:	b913      	cbnz	r3, 8004f1a <__swsetup_r+0x16>
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 f985 	bl	8005224 <__sinit>
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <__swsetup_r+0xd0>)
 8004f1c:	429c      	cmp	r4, r3
 8004f1e:	d10f      	bne.n	8004f40 <__swsetup_r+0x3c>
 8004f20:	686c      	ldr	r4, [r5, #4]
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f28:	0719      	lsls	r1, r3, #28
 8004f2a:	d42c      	bmi.n	8004f86 <__swsetup_r+0x82>
 8004f2c:	06dd      	lsls	r5, r3, #27
 8004f2e:	d411      	bmi.n	8004f54 <__swsetup_r+0x50>
 8004f30:	2309      	movs	r3, #9
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	e03e      	b.n	8004fbe <__swsetup_r+0xba>
 8004f40:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <__swsetup_r+0xd4>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d101      	bne.n	8004f4a <__swsetup_r+0x46>
 8004f46:	68ac      	ldr	r4, [r5, #8]
 8004f48:	e7eb      	b.n	8004f22 <__swsetup_r+0x1e>
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <__swsetup_r+0xd8>)
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	bf08      	it	eq
 8004f50:	68ec      	ldreq	r4, [r5, #12]
 8004f52:	e7e6      	b.n	8004f22 <__swsetup_r+0x1e>
 8004f54:	0758      	lsls	r0, r3, #29
 8004f56:	d512      	bpl.n	8004f7e <__swsetup_r+0x7a>
 8004f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5a:	b141      	cbz	r1, 8004f6e <__swsetup_r+0x6a>
 8004f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f60:	4299      	cmp	r1, r3
 8004f62:	d002      	beq.n	8004f6a <__swsetup_r+0x66>
 8004f64:	4630      	mov	r0, r6
 8004f66:	f7ff fb75 	bl	8004654 <_free_r>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	2300      	movs	r3, #0
 8004f78:	6063      	str	r3, [r4, #4]
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	f043 0308 	orr.w	r3, r3, #8
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	b94b      	cbnz	r3, 8004f9e <__swsetup_r+0x9a>
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f94:	d003      	beq.n	8004f9e <__swsetup_r+0x9a>
 8004f96:	4621      	mov	r1, r4
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f000 fa07 	bl	80053ac <__smakebuf_r>
 8004f9e:	89a0      	ldrh	r0, [r4, #12]
 8004fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fa4:	f010 0301 	ands.w	r3, r0, #1
 8004fa8:	d00a      	beq.n	8004fc0 <__swsetup_r+0xbc>
 8004faa:	2300      	movs	r3, #0
 8004fac:	60a3      	str	r3, [r4, #8]
 8004fae:	6963      	ldr	r3, [r4, #20]
 8004fb0:	425b      	negs	r3, r3
 8004fb2:	61a3      	str	r3, [r4, #24]
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	b943      	cbnz	r3, 8004fca <__swsetup_r+0xc6>
 8004fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fbc:	d1ba      	bne.n	8004f34 <__swsetup_r+0x30>
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	0781      	lsls	r1, r0, #30
 8004fc2:	bf58      	it	pl
 8004fc4:	6963      	ldrpl	r3, [r4, #20]
 8004fc6:	60a3      	str	r3, [r4, #8]
 8004fc8:	e7f4      	b.n	8004fb4 <__swsetup_r+0xb0>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	e7f7      	b.n	8004fbe <__swsetup_r+0xba>
 8004fce:	bf00      	nop
 8004fd0:	2000000c 	.word	0x2000000c
 8004fd4:	08005a24 	.word	0x08005a24
 8004fd8:	08005a44 	.word	0x08005a44
 8004fdc:	08005a04 	.word	0x08005a04

08004fe0 <abort>:
 8004fe0:	2006      	movs	r0, #6
 8004fe2:	b508      	push	{r3, lr}
 8004fe4:	f000 fa52 	bl	800548c <raise>
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f7fc fa41 	bl	8001470 <_exit>
	...

08004ff0 <__sflush_r>:
 8004ff0:	898a      	ldrh	r2, [r1, #12]
 8004ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	0710      	lsls	r0, r2, #28
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	d458      	bmi.n	80050b0 <__sflush_r+0xc0>
 8004ffe:	684b      	ldr	r3, [r1, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	dc05      	bgt.n	8005010 <__sflush_r+0x20>
 8005004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	dc02      	bgt.n	8005010 <__sflush_r+0x20>
 800500a:	2000      	movs	r0, #0
 800500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005012:	2e00      	cmp	r6, #0
 8005014:	d0f9      	beq.n	800500a <__sflush_r+0x1a>
 8005016:	2300      	movs	r3, #0
 8005018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800501c:	682f      	ldr	r7, [r5, #0]
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	d032      	beq.n	8005088 <__sflush_r+0x98>
 8005022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	075a      	lsls	r2, r3, #29
 8005028:	d505      	bpl.n	8005036 <__sflush_r+0x46>
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	1ac0      	subs	r0, r0, r3
 800502e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005030:	b10b      	cbz	r3, 8005036 <__sflush_r+0x46>
 8005032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005034:	1ac0      	subs	r0, r0, r3
 8005036:	2300      	movs	r3, #0
 8005038:	4602      	mov	r2, r0
 800503a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800503c:	4628      	mov	r0, r5
 800503e:	6a21      	ldr	r1, [r4, #32]
 8005040:	47b0      	blx	r6
 8005042:	1c43      	adds	r3, r0, #1
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	d106      	bne.n	8005056 <__sflush_r+0x66>
 8005048:	6829      	ldr	r1, [r5, #0]
 800504a:	291d      	cmp	r1, #29
 800504c:	d82c      	bhi.n	80050a8 <__sflush_r+0xb8>
 800504e:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <__sflush_r+0x108>)
 8005050:	40ca      	lsrs	r2, r1
 8005052:	07d6      	lsls	r6, r2, #31
 8005054:	d528      	bpl.n	80050a8 <__sflush_r+0xb8>
 8005056:	2200      	movs	r2, #0
 8005058:	6062      	str	r2, [r4, #4]
 800505a:	6922      	ldr	r2, [r4, #16]
 800505c:	04d9      	lsls	r1, r3, #19
 800505e:	6022      	str	r2, [r4, #0]
 8005060:	d504      	bpl.n	800506c <__sflush_r+0x7c>
 8005062:	1c42      	adds	r2, r0, #1
 8005064:	d101      	bne.n	800506a <__sflush_r+0x7a>
 8005066:	682b      	ldr	r3, [r5, #0]
 8005068:	b903      	cbnz	r3, 800506c <__sflush_r+0x7c>
 800506a:	6560      	str	r0, [r4, #84]	; 0x54
 800506c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800506e:	602f      	str	r7, [r5, #0]
 8005070:	2900      	cmp	r1, #0
 8005072:	d0ca      	beq.n	800500a <__sflush_r+0x1a>
 8005074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005078:	4299      	cmp	r1, r3
 800507a:	d002      	beq.n	8005082 <__sflush_r+0x92>
 800507c:	4628      	mov	r0, r5
 800507e:	f7ff fae9 	bl	8004654 <_free_r>
 8005082:	2000      	movs	r0, #0
 8005084:	6360      	str	r0, [r4, #52]	; 0x34
 8005086:	e7c1      	b.n	800500c <__sflush_r+0x1c>
 8005088:	6a21      	ldr	r1, [r4, #32]
 800508a:	2301      	movs	r3, #1
 800508c:	4628      	mov	r0, r5
 800508e:	47b0      	blx	r6
 8005090:	1c41      	adds	r1, r0, #1
 8005092:	d1c7      	bne.n	8005024 <__sflush_r+0x34>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0c4      	beq.n	8005024 <__sflush_r+0x34>
 800509a:	2b1d      	cmp	r3, #29
 800509c:	d001      	beq.n	80050a2 <__sflush_r+0xb2>
 800509e:	2b16      	cmp	r3, #22
 80050a0:	d101      	bne.n	80050a6 <__sflush_r+0xb6>
 80050a2:	602f      	str	r7, [r5, #0]
 80050a4:	e7b1      	b.n	800500a <__sflush_r+0x1a>
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	e7ad      	b.n	800500c <__sflush_r+0x1c>
 80050b0:	690f      	ldr	r7, [r1, #16]
 80050b2:	2f00      	cmp	r7, #0
 80050b4:	d0a9      	beq.n	800500a <__sflush_r+0x1a>
 80050b6:	0793      	lsls	r3, r2, #30
 80050b8:	bf18      	it	ne
 80050ba:	2300      	movne	r3, #0
 80050bc:	680e      	ldr	r6, [r1, #0]
 80050be:	bf08      	it	eq
 80050c0:	694b      	ldreq	r3, [r1, #20]
 80050c2:	eba6 0807 	sub.w	r8, r6, r7
 80050c6:	600f      	str	r7, [r1, #0]
 80050c8:	608b      	str	r3, [r1, #8]
 80050ca:	f1b8 0f00 	cmp.w	r8, #0
 80050ce:	dd9c      	ble.n	800500a <__sflush_r+0x1a>
 80050d0:	4643      	mov	r3, r8
 80050d2:	463a      	mov	r2, r7
 80050d4:	4628      	mov	r0, r5
 80050d6:	6a21      	ldr	r1, [r4, #32]
 80050d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050da:	47b0      	blx	r6
 80050dc:	2800      	cmp	r0, #0
 80050de:	dc06      	bgt.n	80050ee <__sflush_r+0xfe>
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	e78e      	b.n	800500c <__sflush_r+0x1c>
 80050ee:	4407      	add	r7, r0
 80050f0:	eba8 0800 	sub.w	r8, r8, r0
 80050f4:	e7e9      	b.n	80050ca <__sflush_r+0xda>
 80050f6:	bf00      	nop
 80050f8:	20400001 	.word	0x20400001

080050fc <_fflush_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	690b      	ldr	r3, [r1, #16]
 8005100:	4605      	mov	r5, r0
 8005102:	460c      	mov	r4, r1
 8005104:	b913      	cbnz	r3, 800510c <_fflush_r+0x10>
 8005106:	2500      	movs	r5, #0
 8005108:	4628      	mov	r0, r5
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	b118      	cbz	r0, 8005116 <_fflush_r+0x1a>
 800510e:	6983      	ldr	r3, [r0, #24]
 8005110:	b90b      	cbnz	r3, 8005116 <_fflush_r+0x1a>
 8005112:	f000 f887 	bl	8005224 <__sinit>
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <_fflush_r+0x6c>)
 8005118:	429c      	cmp	r4, r3
 800511a:	d11b      	bne.n	8005154 <_fflush_r+0x58>
 800511c:	686c      	ldr	r4, [r5, #4]
 800511e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ef      	beq.n	8005106 <_fflush_r+0xa>
 8005126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005128:	07d0      	lsls	r0, r2, #31
 800512a:	d404      	bmi.n	8005136 <_fflush_r+0x3a>
 800512c:	0599      	lsls	r1, r3, #22
 800512e:	d402      	bmi.n	8005136 <_fflush_r+0x3a>
 8005130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005132:	f000 f915 	bl	8005360 <__retarget_lock_acquire_recursive>
 8005136:	4628      	mov	r0, r5
 8005138:	4621      	mov	r1, r4
 800513a:	f7ff ff59 	bl	8004ff0 <__sflush_r>
 800513e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005140:	4605      	mov	r5, r0
 8005142:	07da      	lsls	r2, r3, #31
 8005144:	d4e0      	bmi.n	8005108 <_fflush_r+0xc>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	059b      	lsls	r3, r3, #22
 800514a:	d4dd      	bmi.n	8005108 <_fflush_r+0xc>
 800514c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514e:	f000 f908 	bl	8005362 <__retarget_lock_release_recursive>
 8005152:	e7d9      	b.n	8005108 <_fflush_r+0xc>
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <_fflush_r+0x70>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d101      	bne.n	800515e <_fflush_r+0x62>
 800515a:	68ac      	ldr	r4, [r5, #8]
 800515c:	e7df      	b.n	800511e <_fflush_r+0x22>
 800515e:	4b04      	ldr	r3, [pc, #16]	; (8005170 <_fflush_r+0x74>)
 8005160:	429c      	cmp	r4, r3
 8005162:	bf08      	it	eq
 8005164:	68ec      	ldreq	r4, [r5, #12]
 8005166:	e7da      	b.n	800511e <_fflush_r+0x22>
 8005168:	08005a24 	.word	0x08005a24
 800516c:	08005a44 	.word	0x08005a44
 8005170:	08005a04 	.word	0x08005a04

08005174 <std>:
 8005174:	2300      	movs	r3, #0
 8005176:	b510      	push	{r4, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	e9c0 3300 	strd	r3, r3, [r0]
 800517e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005182:	6083      	str	r3, [r0, #8]
 8005184:	8181      	strh	r1, [r0, #12]
 8005186:	6643      	str	r3, [r0, #100]	; 0x64
 8005188:	81c2      	strh	r2, [r0, #14]
 800518a:	6183      	str	r3, [r0, #24]
 800518c:	4619      	mov	r1, r3
 800518e:	2208      	movs	r2, #8
 8005190:	305c      	adds	r0, #92	; 0x5c
 8005192:	f7fd fba3 	bl	80028dc <memset>
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x38>)
 8005198:	6224      	str	r4, [r4, #32]
 800519a:	6263      	str	r3, [r4, #36]	; 0x24
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <std+0x3c>)
 800519e:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <std+0x40>)
 80051a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <std+0x44>)
 80051a6:	6323      	str	r3, [r4, #48]	; 0x30
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	080054c5 	.word	0x080054c5
 80051b0:	080054e7 	.word	0x080054e7
 80051b4:	0800551f 	.word	0x0800551f
 80051b8:	08005543 	.word	0x08005543

080051bc <_cleanup_r>:
 80051bc:	4901      	ldr	r1, [pc, #4]	; (80051c4 <_cleanup_r+0x8>)
 80051be:	f000 b8af 	b.w	8005320 <_fwalk_reent>
 80051c2:	bf00      	nop
 80051c4:	080050fd 	.word	0x080050fd

080051c8 <__sfmoreglue>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	2568      	movs	r5, #104	; 0x68
 80051cc:	1e4a      	subs	r2, r1, #1
 80051ce:	4355      	muls	r5, r2
 80051d0:	460e      	mov	r6, r1
 80051d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051d6:	f7ff fa89 	bl	80046ec <_malloc_r>
 80051da:	4604      	mov	r4, r0
 80051dc:	b140      	cbz	r0, 80051f0 <__sfmoreglue+0x28>
 80051de:	2100      	movs	r1, #0
 80051e0:	e9c0 1600 	strd	r1, r6, [r0]
 80051e4:	300c      	adds	r0, #12
 80051e6:	60a0      	str	r0, [r4, #8]
 80051e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051ec:	f7fd fb76 	bl	80028dc <memset>
 80051f0:	4620      	mov	r0, r4
 80051f2:	bd70      	pop	{r4, r5, r6, pc}

080051f4 <__sfp_lock_acquire>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__sfp_lock_acquire+0x8>)
 80051f6:	f000 b8b3 	b.w	8005360 <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	20000354 	.word	0x20000354

08005200 <__sfp_lock_release>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__sfp_lock_release+0x8>)
 8005202:	f000 b8ae 	b.w	8005362 <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	20000354 	.word	0x20000354

0800520c <__sinit_lock_acquire>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__sinit_lock_acquire+0x8>)
 800520e:	f000 b8a7 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	2000034f 	.word	0x2000034f

08005218 <__sinit_lock_release>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__sinit_lock_release+0x8>)
 800521a:	f000 b8a2 	b.w	8005362 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	2000034f 	.word	0x2000034f

08005224 <__sinit>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	f7ff fff0 	bl	800520c <__sinit_lock_acquire>
 800522c:	69a3      	ldr	r3, [r4, #24]
 800522e:	b11b      	cbz	r3, 8005238 <__sinit+0x14>
 8005230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005234:	f7ff bff0 	b.w	8005218 <__sinit_lock_release>
 8005238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800523c:	6523      	str	r3, [r4, #80]	; 0x50
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <__sinit+0x68>)
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <__sinit+0x6c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	62a2      	str	r2, [r4, #40]	; 0x28
 8005246:	42a3      	cmp	r3, r4
 8005248:	bf08      	it	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	4620      	mov	r0, r4
 800524e:	bf08      	it	eq
 8005250:	61a3      	streq	r3, [r4, #24]
 8005252:	f000 f81f 	bl	8005294 <__sfp>
 8005256:	6060      	str	r0, [r4, #4]
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f81b 	bl	8005294 <__sfp>
 800525e:	60a0      	str	r0, [r4, #8]
 8005260:	4620      	mov	r0, r4
 8005262:	f000 f817 	bl	8005294 <__sfp>
 8005266:	2200      	movs	r2, #0
 8005268:	2104      	movs	r1, #4
 800526a:	60e0      	str	r0, [r4, #12]
 800526c:	6860      	ldr	r0, [r4, #4]
 800526e:	f7ff ff81 	bl	8005174 <std>
 8005272:	2201      	movs	r2, #1
 8005274:	2109      	movs	r1, #9
 8005276:	68a0      	ldr	r0, [r4, #8]
 8005278:	f7ff ff7c 	bl	8005174 <std>
 800527c:	2202      	movs	r2, #2
 800527e:	2112      	movs	r1, #18
 8005280:	68e0      	ldr	r0, [r4, #12]
 8005282:	f7ff ff77 	bl	8005174 <std>
 8005286:	2301      	movs	r3, #1
 8005288:	61a3      	str	r3, [r4, #24]
 800528a:	e7d1      	b.n	8005230 <__sinit+0xc>
 800528c:	08005684 	.word	0x08005684
 8005290:	080051bd 	.word	0x080051bd

08005294 <__sfp>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	4607      	mov	r7, r0
 8005298:	f7ff ffac 	bl	80051f4 <__sfp_lock_acquire>
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <__sfp+0x84>)
 800529e:	681e      	ldr	r6, [r3, #0]
 80052a0:	69b3      	ldr	r3, [r6, #24]
 80052a2:	b913      	cbnz	r3, 80052aa <__sfp+0x16>
 80052a4:	4630      	mov	r0, r6
 80052a6:	f7ff ffbd 	bl	8005224 <__sinit>
 80052aa:	3648      	adds	r6, #72	; 0x48
 80052ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	d503      	bpl.n	80052bc <__sfp+0x28>
 80052b4:	6833      	ldr	r3, [r6, #0]
 80052b6:	b30b      	cbz	r3, 80052fc <__sfp+0x68>
 80052b8:	6836      	ldr	r6, [r6, #0]
 80052ba:	e7f7      	b.n	80052ac <__sfp+0x18>
 80052bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052c0:	b9d5      	cbnz	r5, 80052f8 <__sfp+0x64>
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <__sfp+0x88>)
 80052c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052c8:	60e3      	str	r3, [r4, #12]
 80052ca:	6665      	str	r5, [r4, #100]	; 0x64
 80052cc:	f000 f847 	bl	800535e <__retarget_lock_init_recursive>
 80052d0:	f7ff ff96 	bl	8005200 <__sfp_lock_release>
 80052d4:	2208      	movs	r2, #8
 80052d6:	4629      	mov	r1, r5
 80052d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052e0:	6025      	str	r5, [r4, #0]
 80052e2:	61a5      	str	r5, [r4, #24]
 80052e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052e8:	f7fd faf8 	bl	80028dc <memset>
 80052ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f4:	4620      	mov	r0, r4
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	3468      	adds	r4, #104	; 0x68
 80052fa:	e7d9      	b.n	80052b0 <__sfp+0x1c>
 80052fc:	2104      	movs	r1, #4
 80052fe:	4638      	mov	r0, r7
 8005300:	f7ff ff62 	bl	80051c8 <__sfmoreglue>
 8005304:	4604      	mov	r4, r0
 8005306:	6030      	str	r0, [r6, #0]
 8005308:	2800      	cmp	r0, #0
 800530a:	d1d5      	bne.n	80052b8 <__sfp+0x24>
 800530c:	f7ff ff78 	bl	8005200 <__sfp_lock_release>
 8005310:	230c      	movs	r3, #12
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	e7ee      	b.n	80052f4 <__sfp+0x60>
 8005316:	bf00      	nop
 8005318:	08005684 	.word	0x08005684
 800531c:	ffff0001 	.word	0xffff0001

08005320 <_fwalk_reent>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	4688      	mov	r8, r1
 8005328:	2700      	movs	r7, #0
 800532a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800532e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005332:	f1b9 0901 	subs.w	r9, r9, #1
 8005336:	d505      	bpl.n	8005344 <_fwalk_reent+0x24>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	2c00      	cmp	r4, #0
 800533c:	d1f7      	bne.n	800532e <_fwalk_reent+0xe>
 800533e:	4638      	mov	r0, r7
 8005340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005344:	89ab      	ldrh	r3, [r5, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d907      	bls.n	800535a <_fwalk_reent+0x3a>
 800534a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534e:	3301      	adds	r3, #1
 8005350:	d003      	beq.n	800535a <_fwalk_reent+0x3a>
 8005352:	4629      	mov	r1, r5
 8005354:	4630      	mov	r0, r6
 8005356:	47c0      	blx	r8
 8005358:	4307      	orrs	r7, r0
 800535a:	3568      	adds	r5, #104	; 0x68
 800535c:	e7e9      	b.n	8005332 <_fwalk_reent+0x12>

0800535e <__retarget_lock_init_recursive>:
 800535e:	4770      	bx	lr

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <__swhatbuf_r>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	460e      	mov	r6, r1
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	4614      	mov	r4, r2
 800536e:	2900      	cmp	r1, #0
 8005370:	461d      	mov	r5, r3
 8005372:	b096      	sub	sp, #88	; 0x58
 8005374:	da07      	bge.n	8005386 <__swhatbuf_r+0x22>
 8005376:	2300      	movs	r3, #0
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	89b3      	ldrh	r3, [r6, #12]
 800537c:	061a      	lsls	r2, r3, #24
 800537e:	d410      	bmi.n	80053a2 <__swhatbuf_r+0x3e>
 8005380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005384:	e00e      	b.n	80053a4 <__swhatbuf_r+0x40>
 8005386:	466a      	mov	r2, sp
 8005388:	f000 f902 	bl	8005590 <_fstat_r>
 800538c:	2800      	cmp	r0, #0
 800538e:	dbf2      	blt.n	8005376 <__swhatbuf_r+0x12>
 8005390:	9a01      	ldr	r2, [sp, #4]
 8005392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800539a:	425a      	negs	r2, r3
 800539c:	415a      	adcs	r2, r3
 800539e:	602a      	str	r2, [r5, #0]
 80053a0:	e7ee      	b.n	8005380 <__swhatbuf_r+0x1c>
 80053a2:	2340      	movs	r3, #64	; 0x40
 80053a4:	2000      	movs	r0, #0
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	b016      	add	sp, #88	; 0x58
 80053aa:	bd70      	pop	{r4, r5, r6, pc}

080053ac <__smakebuf_r>:
 80053ac:	898b      	ldrh	r3, [r1, #12]
 80053ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053b0:	079d      	lsls	r5, r3, #30
 80053b2:	4606      	mov	r6, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	d507      	bpl.n	80053c8 <__smakebuf_r+0x1c>
 80053b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	2301      	movs	r3, #1
 80053c2:	6163      	str	r3, [r4, #20]
 80053c4:	b002      	add	sp, #8
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	466a      	mov	r2, sp
 80053ca:	ab01      	add	r3, sp, #4
 80053cc:	f7ff ffca 	bl	8005364 <__swhatbuf_r>
 80053d0:	9900      	ldr	r1, [sp, #0]
 80053d2:	4605      	mov	r5, r0
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff f989 	bl	80046ec <_malloc_r>
 80053da:	b948      	cbnz	r0, 80053f0 <__smakebuf_r+0x44>
 80053dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e0:	059a      	lsls	r2, r3, #22
 80053e2:	d4ef      	bmi.n	80053c4 <__smakebuf_r+0x18>
 80053e4:	f023 0303 	bic.w	r3, r3, #3
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	81a3      	strh	r3, [r4, #12]
 80053ee:	e7e3      	b.n	80053b8 <__smakebuf_r+0xc>
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <__smakebuf_r+0x7c>)
 80053f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	6020      	str	r0, [r4, #0]
 80053f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	9b00      	ldr	r3, [sp, #0]
 8005400:	6120      	str	r0, [r4, #16]
 8005402:	6163      	str	r3, [r4, #20]
 8005404:	9b01      	ldr	r3, [sp, #4]
 8005406:	b15b      	cbz	r3, 8005420 <__smakebuf_r+0x74>
 8005408:	4630      	mov	r0, r6
 800540a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800540e:	f000 f8d1 	bl	80055b4 <_isatty_r>
 8005412:	b128      	cbz	r0, 8005420 <__smakebuf_r+0x74>
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	89a0      	ldrh	r0, [r4, #12]
 8005422:	4305      	orrs	r5, r0
 8005424:	81a5      	strh	r5, [r4, #12]
 8005426:	e7cd      	b.n	80053c4 <__smakebuf_r+0x18>
 8005428:	080051bd 	.word	0x080051bd

0800542c <_malloc_usable_size_r>:
 800542c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005430:	1f18      	subs	r0, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfbc      	itt	lt
 8005436:	580b      	ldrlt	r3, [r1, r0]
 8005438:	18c0      	addlt	r0, r0, r3
 800543a:	4770      	bx	lr

0800543c <_raise_r>:
 800543c:	291f      	cmp	r1, #31
 800543e:	b538      	push	{r3, r4, r5, lr}
 8005440:	4604      	mov	r4, r0
 8005442:	460d      	mov	r5, r1
 8005444:	d904      	bls.n	8005450 <_raise_r+0x14>
 8005446:	2316      	movs	r3, #22
 8005448:	6003      	str	r3, [r0, #0]
 800544a:	f04f 30ff 	mov.w	r0, #4294967295
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005452:	b112      	cbz	r2, 800545a <_raise_r+0x1e>
 8005454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005458:	b94b      	cbnz	r3, 800546e <_raise_r+0x32>
 800545a:	4620      	mov	r0, r4
 800545c:	f000 f830 	bl	80054c0 <_getpid_r>
 8005460:	462a      	mov	r2, r5
 8005462:	4601      	mov	r1, r0
 8005464:	4620      	mov	r0, r4
 8005466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800546a:	f000 b817 	b.w	800549c <_kill_r>
 800546e:	2b01      	cmp	r3, #1
 8005470:	d00a      	beq.n	8005488 <_raise_r+0x4c>
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	d103      	bne.n	800547e <_raise_r+0x42>
 8005476:	2316      	movs	r3, #22
 8005478:	6003      	str	r3, [r0, #0]
 800547a:	2001      	movs	r0, #1
 800547c:	e7e7      	b.n	800544e <_raise_r+0x12>
 800547e:	2400      	movs	r4, #0
 8005480:	4628      	mov	r0, r5
 8005482:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005486:	4798      	blx	r3
 8005488:	2000      	movs	r0, #0
 800548a:	e7e0      	b.n	800544e <_raise_r+0x12>

0800548c <raise>:
 800548c:	4b02      	ldr	r3, [pc, #8]	; (8005498 <raise+0xc>)
 800548e:	4601      	mov	r1, r0
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f7ff bfd3 	b.w	800543c <_raise_r>
 8005496:	bf00      	nop
 8005498:	2000000c 	.word	0x2000000c

0800549c <_kill_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	2300      	movs	r3, #0
 80054a0:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_kill_r+0x20>)
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	602b      	str	r3, [r5, #0]
 80054aa:	f7fb ffd1 	bl	8001450 <_kill>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d102      	bne.n	80054b8 <_kill_r+0x1c>
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	b103      	cbz	r3, 80054b8 <_kill_r+0x1c>
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	bd38      	pop	{r3, r4, r5, pc}
 80054ba:	bf00      	nop
 80054bc:	20000348 	.word	0x20000348

080054c0 <_getpid_r>:
 80054c0:	f7fb bfbf 	b.w	8001442 <_getpid>

080054c4 <__sread>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	460c      	mov	r4, r1
 80054c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054cc:	f000 f894 	bl	80055f8 <_read_r>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	bfab      	itete	ge
 80054d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054d6:	89a3      	ldrhlt	r3, [r4, #12]
 80054d8:	181b      	addge	r3, r3, r0
 80054da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054de:	bfac      	ite	ge
 80054e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054e2:	81a3      	strhlt	r3, [r4, #12]
 80054e4:	bd10      	pop	{r4, pc}

080054e6 <__swrite>:
 80054e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ea:	461f      	mov	r7, r3
 80054ec:	898b      	ldrh	r3, [r1, #12]
 80054ee:	4605      	mov	r5, r0
 80054f0:	05db      	lsls	r3, r3, #23
 80054f2:	460c      	mov	r4, r1
 80054f4:	4616      	mov	r6, r2
 80054f6:	d505      	bpl.n	8005504 <__swrite+0x1e>
 80054f8:	2302      	movs	r3, #2
 80054fa:	2200      	movs	r2, #0
 80054fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005500:	f000 f868 	bl	80055d4 <_lseek_r>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	4632      	mov	r2, r6
 8005508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550c:	81a3      	strh	r3, [r4, #12]
 800550e:	4628      	mov	r0, r5
 8005510:	463b      	mov	r3, r7
 8005512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	f000 b817 	b.w	800554c <_write_r>

0800551e <__sseek>:
 800551e:	b510      	push	{r4, lr}
 8005520:	460c      	mov	r4, r1
 8005522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005526:	f000 f855 	bl	80055d4 <_lseek_r>
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	bf15      	itete	ne
 8005530:	6560      	strne	r0, [r4, #84]	; 0x54
 8005532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800553a:	81a3      	strheq	r3, [r4, #12]
 800553c:	bf18      	it	ne
 800553e:	81a3      	strhne	r3, [r4, #12]
 8005540:	bd10      	pop	{r4, pc}

08005542 <__sclose>:
 8005542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005546:	f000 b813 	b.w	8005570 <_close_r>
	...

0800554c <_write_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	2200      	movs	r2, #0
 8005556:	4d05      	ldr	r5, [pc, #20]	; (800556c <_write_r+0x20>)
 8005558:	602a      	str	r2, [r5, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	f7fb ffaf 	bl	80014be <_write>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_write_r+0x1e>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_write_r+0x1e>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20000348 	.word	0x20000348

08005570 <_close_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	2300      	movs	r3, #0
 8005574:	4d05      	ldr	r5, [pc, #20]	; (800558c <_close_r+0x1c>)
 8005576:	4604      	mov	r4, r0
 8005578:	4608      	mov	r0, r1
 800557a:	602b      	str	r3, [r5, #0]
 800557c:	f7fb ffbb 	bl	80014f6 <_close>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_close_r+0x1a>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_close_r+0x1a>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	20000348 	.word	0x20000348

08005590 <_fstat_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	2300      	movs	r3, #0
 8005594:	4d06      	ldr	r5, [pc, #24]	; (80055b0 <_fstat_r+0x20>)
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	602b      	str	r3, [r5, #0]
 800559e:	f7fb ffb5 	bl	800150c <_fstat>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d102      	bne.n	80055ac <_fstat_r+0x1c>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	b103      	cbz	r3, 80055ac <_fstat_r+0x1c>
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	bd38      	pop	{r3, r4, r5, pc}
 80055ae:	bf00      	nop
 80055b0:	20000348 	.word	0x20000348

080055b4 <_isatty_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	2300      	movs	r3, #0
 80055b8:	4d05      	ldr	r5, [pc, #20]	; (80055d0 <_isatty_r+0x1c>)
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fb ffb3 	bl	800152a <_isatty>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_isatty_r+0x1a>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_isatty_r+0x1a>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000348 	.word	0x20000348

080055d4 <_lseek_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	2200      	movs	r2, #0
 80055de:	4d05      	ldr	r5, [pc, #20]	; (80055f4 <_lseek_r+0x20>)
 80055e0:	602a      	str	r2, [r5, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f7fb ffab 	bl	800153e <_lseek>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_lseek_r+0x1e>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_lseek_r+0x1e>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20000348 	.word	0x20000348

080055f8 <_read_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	2200      	movs	r2, #0
 8005602:	4d05      	ldr	r5, [pc, #20]	; (8005618 <_read_r+0x20>)
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f7fb ff3c 	bl	8001484 <_read>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_read_r+0x1e>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_read_r+0x1e>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20000348 	.word	0x20000348

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
